const t=JSON.parse('{"key":"v-324ac5d9","path":"/code/language/js/javascript%E5%8A%A8%E7%94%BB-%E8%AE%A1%E6%97%B6%E5%99%A8-requestAnimationFrame.html","title":"javascript动画-计时器-requestAnimationFrame","lang":"zh-CN","frontmatter":{"title":"javascript动画-计时器-requestAnimationFrame","date":"2022-01-16 15:01","updated":"2023-05-13 22:56","description":"计时器一直是 javascript 动画的核心技术。而编写动画循环的关键是要知道延迟时间多长合适。一方面，循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅;另一方面,循环间隔还要足够长,这样才能确保浏览器有能力渲染产生的变化 大多数电脑显示器的刷新频率是 60Hz，大概相当于每秒钟重绘 60 次。大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘 频率,因为即使超过那个频率用户体验也不会有提升。因此,最平滑动画的最佳循环问隔是 1000ms/60,约等于 16.6ms 而 setTimeout 和 setInterval 的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器 UI 线程队列中以等待执行的时间。如果队列前面已经加入了其他任务,那动画代码就要等前面的任务完成后再执行","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/language/js/javascript%E5%8A%A8%E7%94%BB-%E8%AE%A1%E6%97%B6%E5%99%A8-requestAnimationFrame.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"javascript动画-计时器-requestAnimationFrame"}],["meta",{"property":"og:description","content":"计时器一直是 javascript 动画的核心技术。而编写动画循环的关键是要知道延迟时间多长合适。一方面，循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅;另一方面,循环间隔还要足够长,这样才能确保浏览器有能力渲染产生的变化 大多数电脑显示器的刷新频率是 60Hz，大概相当于每秒钟重绘 60 次。大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘 频率,因为即使超过那个频率用户体验也不会有提升。因此,最平滑动画的最佳循环问隔是 1000ms/60,约等于 16.6ms 而 setTimeout 和 setInterval 的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器 UI 线程队列中以等待执行的时间。如果队列前面已经加入了其他任务,那动画代码就要等前面的任务完成后再执行"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-24T09:20:32.000Z"}],["meta",{"property":"article:published_time","content":"2022-01-16T15:01:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-24T09:20:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"javascript动画-计时器-requestAnimationFrame\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-16T15:01:00.000Z\\",\\"dateModified\\":\\"2023-06-24T09:20:32.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1677862957000,"updatedTime":1687598432000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":4}]},"readingTime":{"minutes":1.38,"words":415},"filePathRelative":"code/language/js/javascript动画-计时器-requestAnimationFrame.md","localizedDate":"2022年1月16日","excerpt":"<p>计时器一直是 javascript 动画的核心技术。而编写动画循环的关键是要知道延迟时间多长合适。一方面，循环间隔必须足够短，这样才能让不同的动画效果显得平滑流畅;另一方面,循环间隔还要足够长,这样才能确保浏览器有能力渲染产生的变化</p>\\n<p>大多数电脑显示器的刷新频率是 60Hz，大概相当于每秒钟重绘 60 次。大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘\\n频率,因为即使超过那个频率用户体验也不会有提升。因此,最平滑动画的最佳循环问隔是 1000ms/60,约等于 16.6ms</p>\\n<p>而 setTimeout 和 setInterval 的问题是，它们都不精确。它们的内在运行机制决定了时间间隔参数实际上只是指定了把动画代码添加到浏览器 UI 线程队列中以等待执行的时间。如果队列前面已经加入了其他任务,那动画代码就要等前面的任务完成后再执行</p>","copyright":{},"autoDesc":true}');export{t as data};
