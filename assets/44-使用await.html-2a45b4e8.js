const n=JSON.parse(`{"key":"v-1ee48d6a","path":"/code/react/React18/44-%E4%BD%BF%E7%94%A8await.html","title":"44-使用await","lang":"zh-CN","frontmatter":{"category":["react18"],"date":"2023-03-18 10:09","title":"44-使用await","updated":"2023-05-13 22:56","description":"useEffect(() =&gt; {}) 只能用同步函数，可以定义一个 const 保存 异步函数 import React, {useEffect, useState} from 'react'; import StudentList from \\"./components/StudentList\\"; import './App.css'; const App = () =&gt; { const [stuData, setStuData] = useState([]); // 添加一个state来记录数据是否正在加载,false表示没有加载数据，true表示加载 const [loading, setLoading] = useState(false); // 创建一个state来记录错误信息 const [error, setError] = useState(null); /* * 将写死的数据替换为从接口 http://localhost:1337/api/students * 中加载的数据 * * 组件初始化时需要向服务器发送请求来加载数据 * */ useEffect(() =&gt; { //设置loading为true setLoading(true); // 重置错误 setError(null); // 在effect中加载数据 // fetch() 用来向服务器发送请求加载数据，是Ajax的升级版 // 它需要两个参数：1.请求地址 2.请求信息 fetch('http://localhost:1337/api/students') .then((res) =&gt; { // 判断是否正常返回响应信息 if(res.ok){ // response表示响应信息 // console.log(res); return res.json();// 该方法可以将响应的json直接转换为js对象 } // 抛出一个错误 throw new Error('数据加载失败！'); }) .then(data =&gt; { // 将加载到的数据设置到state中 setStuData(data.data); // 数据加载完毕设置loading为false setLoading(false); }) .catch((e) =&gt; { // catch中的回调函数，用来统一处理错误 // catch一执行，说明上述代码出错了 // 代码运行到这里，说明没有成功加载到数据 setLoading(false); // 设置错误状态 setError(e); }); }, []); return ( &lt;div className=\\"app\\"&gt; {(!loading &amp;&amp; !error) &amp;&amp; &lt;StudentList stus={stuData}/&gt;} {loading &amp;&amp; &lt;p&gt;数据正在加载中...&lt;/p&gt;} {error &amp;&amp; &lt;p&gt;数据加载异常！&lt;/p&gt;} &lt;/div&gt; ); }; export default App;","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/react/React18/44-%E4%BD%BF%E7%94%A8await.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"44-使用await"}],["meta",{"property":"og:description","content":"useEffect(() =&gt; {}) 只能用同步函数，可以定义一个 const 保存 异步函数 import React, {useEffect, useState} from 'react'; import StudentList from \\"./components/StudentList\\"; import './App.css'; const App = () =&gt; { const [stuData, setStuData] = useState([]); // 添加一个state来记录数据是否正在加载,false表示没有加载数据，true表示加载 const [loading, setLoading] = useState(false); // 创建一个state来记录错误信息 const [error, setError] = useState(null); /* * 将写死的数据替换为从接口 http://localhost:1337/api/students * 中加载的数据 * * 组件初始化时需要向服务器发送请求来加载数据 * */ useEffect(() =&gt; { //设置loading为true setLoading(true); // 重置错误 setError(null); // 在effect中加载数据 // fetch() 用来向服务器发送请求加载数据，是Ajax的升级版 // 它需要两个参数：1.请求地址 2.请求信息 fetch('http://localhost:1337/api/students') .then((res) =&gt; { // 判断是否正常返回响应信息 if(res.ok){ // response表示响应信息 // console.log(res); return res.json();// 该方法可以将响应的json直接转换为js对象 } // 抛出一个错误 throw new Error('数据加载失败！'); }) .then(data =&gt; { // 将加载到的数据设置到state中 setStuData(data.data); // 数据加载完毕设置loading为false setLoading(false); }) .catch((e) =&gt; { // catch中的回调函数，用来统一处理错误 // catch一执行，说明上述代码出错了 // 代码运行到这里，说明没有成功加载到数据 setLoading(false); // 设置错误状态 setError(e); }); }, []); return ( &lt;div className=\\"app\\"&gt; {(!loading &amp;&amp; !error) &amp;&amp; &lt;StudentList stus={stuData}/&gt;} {loading &amp;&amp; &lt;p&gt;数据正在加载中...&lt;/p&gt;} {error &amp;&amp; &lt;p&gt;数据加载异常！&lt;/p&gt;} &lt;/div&gt; ); }; export default App;"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-24T09:20:32.000Z"}],["meta",{"property":"article:published_time","content":"2023-03-18T10:09:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-24T09:20:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"44-使用await\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T10:09:00.000Z\\",\\"dateModified\\":\\"2023-06-24T09:20:32.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1679501467000,"updatedTime":1687598432000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":4}]},"readingTime":{"minutes":1.35,"words":404},"filePathRelative":"code/react/React18/44-使用await.md","localizedDate":"2023年3月18日","excerpt":"<p><code>useEffect(() =&gt; {})</code> 只能用同步函数，可以定义一个 <code>const</code> 保存 异步函数</p>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">import</span> React<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>useEffect<span class=\\"token punctuation\\">,</span> useState<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">'react'</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> StudentList <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"./components/StudentList\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token string\\">'./App.css'</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">App</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>stuData<span class=\\"token punctuation\\">,</span> setStuData<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 添加一个state来记录数据是否正在加载,false表示没有加载数据，true表示加载</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>loading<span class=\\"token punctuation\\">,</span> setLoading<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 创建一个state来记录错误信息</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>error<span class=\\"token punctuation\\">,</span> setError<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">/*\\n    *   将写死的数据替换为从接口 http://localhost:1337/api/students\\n    *       中加载的数据\\n    *\\n    *   组件初始化时需要向服务器发送请求来加载数据\\n    * */</span>\\n    <span class=\\"token function\\">useEffect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">//设置loading为true</span>\\n        <span class=\\"token function\\">setLoading</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 重置错误</span>\\n        <span class=\\"token function\\">setError</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">// 在effect中加载数据</span>\\n        <span class=\\"token comment\\">// fetch() 用来向服务器发送请求加载数据，是Ajax的升级版</span>\\n        <span class=\\"token comment\\">// 它需要两个参数：1.请求地址 2.请求信息</span>\\n        <span class=\\"token function\\">fetch</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'http://localhost:1337/api/students'</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">res</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">// 判断是否正常返回响应信息</span>\\n                <span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">.</span>ok<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token comment\\">// response表示响应信息</span>\\n                    <span class=\\"token comment\\">// console.log(res);</span>\\n                    <span class=\\"token keyword\\">return</span> res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">json</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span><span class=\\"token comment\\">// 该方法可以将响应的json直接转换为js对象</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                <span class=\\"token comment\\">// 抛出一个错误</span>\\n                <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'数据加载失败！'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">then</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">data</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">// 将加载到的数据设置到state中</span>\\n                <span class=\\"token function\\">setStuData</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token comment\\">// 数据加载完毕设置loading为false</span>\\n                <span class=\\"token function\\">setLoading</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">.</span><span class=\\"token function\\">catch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">e</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token comment\\">// catch中的回调函数，用来统一处理错误</span>\\n                <span class=\\"token comment\\">// catch一执行，说明上述代码出错了</span>\\n                <span class=\\"token comment\\">// 代码运行到这里，说明没有成功加载到数据</span>\\n                <span class=\\"token function\\">setLoading</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">// 设置错误状态</span>\\n                <span class=\\"token function\\">setError</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n        <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>div</span> <span class=\\"token attr-name\\">className</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>app<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">\\n            </span><span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>loading <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>error<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">StudentList</span></span> <span class=\\"token attr-name\\">stus</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>stuData<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">/&gt;</span></span><span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n            </span><span class=\\"token punctuation\\">{</span>loading <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">数据正在加载中...</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n            </span><span class=\\"token punctuation\\">{</span>error <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>p</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token plain-text\\">数据加载异常！</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>p</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n        </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>div</span><span class=\\"token punctuation\\">&gt;</span></span>\\n    <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> App<span class=\\"token punctuation\\">;</span>\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}`);export{n as data};
