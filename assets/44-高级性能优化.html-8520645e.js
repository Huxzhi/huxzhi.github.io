import{_ as n,W as s,X as a,a2 as e}from"./framework-cbb69da9.js";const t="/assets/image-2023-01-12_19-02-11-067-44-高级性能优化-bf0cc1b1.png",p="/assets/image-2023-01-12_19-02-23-933-44-高级性能优化-873eb34c.png",i="/assets/image-2023-01-12_19-03-41-886-44-高级性能优化-ba5b0c9a.png",o="/assets/image-2023-01-12_19-05-28-720-44-高级性能优化-f256f478.png",c="/assets/image-2023-01-12_19-05-52-575-44-高级性能优化-9b065bce.png",l="/assets/image-2023-01-12_19-06-35-065-44-高级性能优化-cc976f53.png",r="/assets/image-2023-01-12_19-07-45-955-44-高级性能优化-30c42c53.png",u="/assets/image-2023-01-12_19-08-03-660-44-高级性能优化-386221ef.png",d={},k=e('<h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><p>我们可以使用谷歌浏览器自带的 <code>DevTools</code>  进行性能分析 <code>LightHouse</code></p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参数介绍" tabindex="-1"><a class="header-anchor" href="#参数介绍" aria-hidden="true">#</a> 参数介绍</h2><p>从 Performance 页的表现结果来看，得分 37 分，并提供了很多的时间信息，我们来解释下这些选项代表的意思：</p><p>FCP (First Contentful Paint)：首次内容绘制的时间，浏览器第一次绘制 DOM 相关的内容，也是用户第一次看到页面内容的时间。</p><p>Speed Index: 页面各个可见部分的显示平均时间，当我们的页面上存在轮播图或者需要从后端获取内容加载时，这个数据会被影响到。</p><p>LCP (Largest Contentful Paint)：最大内容绘制时间，页面最大的元素绘制完成的时间。</p><p>TTI（Time to Interactive）：从页面开始渲染到用户可以与页面进行交互的时间，内容必须渲染完毕，交互元素绑定的事件已经注册完成。</p><p>TBT（Total Blocking Time）：记录了首次内容绘制到用户可交互之间的时间，这段时间内，主进程被阻塞，会阻碍用户的交互，页面点击无反应。</p><p>CLS（Cumulative Layout Shift）：计算布局偏移值得分，会比较两次渲染帧的内容偏移情况，可能导致用户想点击 A 按钮，但下一帧中，A 按钮被挤到旁边，导致用户实际点击了 B 按钮。</p><h2 id="代码分析" tabindex="-1"><a class="header-anchor" href="#代码分析" aria-hidden="true">#</a> 代码分析</h2><p>由于我们使用的是 vite vite 打包是基于 rollup 的我们可以使用 rollup 的插件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> rollup-plugin-visualizer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>vite.config.ts 配置 记得设置 open 不然无效</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> visualizer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rollup-plugin-visualizer&#39;</span><span class="token punctuation">;</span>
plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">visualizer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      open<span class="token operator">:</span><span class="token boolean">true</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后进行 npm run build 打包</p><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我在项目中使用了 Ant Design 发现 这个 UI 库非常庞大 这时候 就可以使用 Ant Design 的按需引入减少 包大小</p><h2 id="vite-配置优化" tabindex="-1"><a class="header-anchor" href="#vite-配置优化" aria-hidden="true">#</a> Vite 配置优化</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>build<span class="token operator">:</span><span class="token punctuation">{</span>
       chunkSizeWarningLimit<span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">,</span>
       cssCodeSplit<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//css 拆分</span>
       sourcemap<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//不生成sourcemap</span>
       minify<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//是否禁用最小化混淆，esbuild打包速度最快，terser打包体积最小。</span>
       assetsInlineLimit<span class="token operator">:</span><span class="token number">5000</span> <span class="token comment">//小于该值 图片将打包成Base64</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pwa-离线存储技术" tabindex="-1"><a class="header-anchor" href="#pwa-离线存储技术" aria-hidden="true">#</a> PWA 离线存储技术</h2><div class="language-coffeescript line-numbers-mode" data-ext="coffeescript"><pre class="language-coffeescript"><code>npm install vite<span class="token operator">-</span>plugin<span class="token operator">-</span>pwa <span class="token operator">-</span><span class="token constant">D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> VitePWA <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite-plugin-pwa&#39;</span>
plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">VitePWA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">vueJsx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">visualizer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      open<span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PWA 技术的出现就是让 web 网页无限接近于 Native 应用</p><ol><li>可以添加到主屏幕，利用 manifest 实现</li><li>可以实现离线缓存，利用 service worker 实现</li><li>可以发送通知，利用 service worker 实现</li></ol><p>VitePWA 插件配置</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token function">VitePWA</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      workbox<span class="token operator">:</span><span class="token punctuation">{</span>
          cacheId<span class="token operator">:</span><span class="token string">&quot;XIaoman&quot;</span><span class="token punctuation">,</span><span class="token comment">//缓存名称</span>
          runtimeCaching<span class="token operator">:</span><span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
              urlPattern<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*\\.js.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">//缓存文件</span>
              handler<span class="token operator">:</span><span class="token string">&quot;StaleWhileRevalidate&quot;</span><span class="token punctuation">,</span> <span class="token comment">//重新验证时失效</span>
              options<span class="token operator">:</span><span class="token punctuation">{</span>
                cacheName<span class="token operator">:</span><span class="token string">&quot;XiaoMan-js&quot;</span><span class="token punctuation">,</span> <span class="token comment">//缓存js，名称</span>
                expiration<span class="token operator">:</span><span class="token punctuation">{</span>
                  maxEntries<span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token comment">//缓存文件数量 LRU算法</span>
                  maxAgeSeconds<span class="token operator">:</span><span class="token number">30</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token comment">//缓存有效期</span>

                <span class="token punctuation">}</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行 npm run build 打包会生成 sw.js</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="其他性能优化" tabindex="-1"><a class="header-anchor" href="#其他性能优化" aria-hidden="true">#</a> 其他性能优化</h2><h3 id="图片懒加载" tabindex="-1"><a class="header-anchor" href="#图片懒加载" aria-hidden="true">#</a> 图片懒加载</h3><p><code>import lazyPlugin from &#39;vue3-lazy&#39;</code></p><p><code>&lt;img v-lazy=&quot;user.avatar&quot; &gt;</code></p><h3 id="虚拟列表" tabindex="-1"><a class="header-anchor" href="#虚拟列表" aria-hidden="true">#</a> 虚拟列表</h3><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="多线程-使用-new-worker-创建" tabindex="-1"><a class="header-anchor" href="#多线程-使用-new-worker-创建" aria-hidden="true">#</a> 多线程 使用   new Worker 创建</h3><p>worker 脚本与主进程的脚本必须遵守同源限制。他们所在的路径协议、域名、端口号三者需要相同</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> myWorker1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;./calcBox.js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>都使用 postMessage 发送消息</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>worker.<span class="token function">postMessage</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">,</span> [arrayBuffer]<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>都使用 onmessage 接收消息</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">self</span><span class="token operator">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// xxx这里是worker脚本的内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>worker.<span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>VueUse 库已经集成了 webWorker <img src="`+r+'" alt="" loading="lazy"></p><p>防抖节流</p><p>同样 VueUse 也是集成了</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',51),m=[k];function v(g,b){return s(),a("div",null,m)}const h=n(d,[["render",v],["__file","44-高级性能优化.html.vue"]]);export{h as default};
