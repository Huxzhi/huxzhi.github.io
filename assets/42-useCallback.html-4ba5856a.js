const a=JSON.parse('{"key":"v-29879dcc","path":"/code/react/React18/42-useCallback.html","title":"42-useCallback","lang":"zh-CN","frontmatter":{"category":["react18"],"date":"2023-03-17 17:10","title":"42-useCallback","updated":"2023-03-20 16:36","description":"42-useCallback useCallback() 参数： 回调函数 依赖数组 当依赖数组中的变量发生变化时，回调函数才会重新创建 如果不指定依赖数组，回调函数每次都会重新创建 一定要将回调函数中使用到的所有变量都设置到依赖数组中 除了（setState） const [num, setNum] = useState(1); const clickHandler = useCallback(() =&gt; { setCount(prevState =&gt; prevState + num); setNum(prevState =&gt; num + 1); }, [num]);","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/react/React18/42-useCallback.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"42-useCallback"}],["meta",{"property":"og:description","content":"42-useCallback useCallback() 参数： 回调函数 依赖数组 当依赖数组中的变量发生变化时，回调函数才会重新创建 如果不指定依赖数组，回调函数每次都会重新创建 一定要将回调函数中使用到的所有变量都设置到依赖数组中 除了（setState） const [num, setNum] = useState(1); const clickHandler = useCallback(() =&gt; { setCount(prevState =&gt; prevState + num); setNum(prevState =&gt; num + 1); }, [num]);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T16:11:07.000Z"}],["meta",{"property":"article:published_time","content":"2023-03-17T17:10:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T16:11:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"42-useCallback\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-17T17:10:00.000Z\\",\\"dateModified\\":\\"2023-03-22T16:11:07.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"useCallback()","slug":"usecallback","link":"#usecallback","children":[]}],"git":{"createdTime":1679501467000,"updatedTime":1679501467000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":1}]},"readingTime":{"minutes":0.42,"words":125},"filePathRelative":"code/react/React18/42-useCallback.md","localizedDate":"2023年3月17日","excerpt":"<h1> 42-useCallback</h1>\\n<h2> useCallback()</h2>\\n<ul>\\n<li>参数：\\n<ol>\\n<li>回调函数</li>\\n<li>依赖数组\\n<ul>\\n<li>当依赖数组中的变量发生变化时，回调函数才会重新创建</li>\\n<li>如果不指定依赖数组，回调函数每次都会重新创建</li>\\n<li>一定要将回调函数中使用到的所有变量都设置到依赖数组中\\n除了（setState）</li>\\n</ul>\\n</li>\\n</ol>\\n</li>\\n</ul>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code>    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>num<span class=\\"token punctuation\\">,</span> setNum<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">const</span> clickHandler <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useCallback</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">setCount</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">prevState</span> <span class=\\"token operator\\">=&gt;</span> prevState <span class=\\"token operator\\">+</span> num<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token function\\">setNum</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">prevState</span> <span class=\\"token operator\\">=&gt;</span> num <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span>num<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{a as data};
