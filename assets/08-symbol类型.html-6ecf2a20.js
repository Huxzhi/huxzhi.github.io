import{_ as t,X as p,Y as o,Z as n,$ as s,a1 as e,a2 as c,G as l}from"./framework-c2b0d87a.js";const i={},u={href:"https://www.tslang.cn/docs/handbook/symbols.html",target:"_blank",rel:"noopener noreferrer"},r=c(`<h1 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h1><p>自 ECMAScript 2015 起，symbol 成为了一种新的原生类型，就像 number 和 string 一样。</p><p>symbol 类型的值是通过 Symbol 构造函数创建的。</p><p><mark>Symbols 是不可改变且唯一的。用来表示独一无二的值，在设计上就不会被遍历出来</mark></p><p>可以传递参做为唯一标识 只支持 string 和 number 类型的参数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> sym2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> sym3 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

sym2 <span class="token operator">===</span> sym3<span class="token punctuation">;</span> <span class="token comment">// false, symbols是唯一的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像字符串一样， symbols 也可以被用做对象属性的键。</p><p>注意， Symbol 值作为对象属性名时，不能用点运算符。 还有一点需要注意， Symbol 值作为属性名时，该属性还是公开属性，不是私有属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;value&quot;</span> <span class="token comment">//作为标识符，用于对象的属性名，就能保证不会出现同名的属性。</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>sym<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;value&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-symbol-定义的属性-是不能通过如下方式遍历拿到的" tabindex="-1"><a class="header-anchor" href="#使用-symbol-定义的属性-是不能通过如下方式遍历拿到的" aria-hidden="true">#</a> 使用 symbol 定义的属性，是不能通过如下方式遍历拿到的</h2><p>可以防止命名冲突</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> symbol1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;666&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> symbol2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;777&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> obj1<span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token punctuation">[</span>symbol1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;小满&#39;</span><span class="token punctuation">,</span>
   <span class="token punctuation">[</span>symbol2<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;二蛋&#39;</span><span class="token punctuation">,</span>
   age<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
   sex<span class="token operator">:</span> <span class="token string">&#39;女&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 1 for in 遍历</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 注意在console看key,是不是没有遍历到symbol1</span>
   <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 2 Object.keys 遍历</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 3 getOwnPropertyNames</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 4 JSON.stringfy</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何拿到</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个</span>
Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// 2 es6 的 Reflect 拿到对象的所有属性</span>
Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="symbol-iterator-迭代器-和-生成器-for-of" tabindex="-1"><a class="header-anchor" href="#symbol-iterator-迭代器-和-生成器-for-of" aria-hidden="true">#</a> Symbol .iterator 迭代器 和 生成器 for of</h1><p>支持遍历大部分类型迭代器 arr nodeList argumetns set map 等</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{ value: 1, done: false }</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{ value: 2, done: false }</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{ value: 3, done: false }</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{ value: 4, done: false }</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//{ value: undefined, done: true }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>
    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">const</span> array<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>Item<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;2&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&quot;3&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span>
 
<span class="token keyword">type</span> <span class="token class-name">mapTypes</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
<span class="token keyword">const</span> map<span class="token operator">:</span>Map<span class="token operator">&lt;</span>mapTypes<span class="token punctuation">,</span>mapTypes<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;王爷&#39;</span><span class="token punctuation">)</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;陆北&#39;</span><span class="token punctuation">)</span>
 
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    aaa<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">,</span>
    bbb<span class="token operator">:</span><span class="token number">456</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">let</span> set<span class="token operator">:</span>Set<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// let it:Iterator&lt;Item&gt; = array[Symbol.iterator]()</span>

<span class="token comment">//小迭代器的实现，for of 实现</span>
<span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token punctuation">(</span>erg<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> it<span class="token operator">:</span> Iterator<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> erg<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//找到参数的迭代器属性</span>
    <span class="token keyword">let</span> next<span class="token operator">:</span><span class="token builtin">any</span><span class="token operator">=</span> <span class="token punctuation">{</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token comment">//判断next，由于next默认为fasle，while循环只有true会通过，所以需要取反</span>
        next <span class="token operator">=</span>  it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//刚开始是声明next给个默认值，等到开始循环的时候再把真正的值赋给他</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">gen</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token comment">//</span>
<span class="token comment">//对象是不支持迭代器的使用的，其实我们在控制台输出一个对象，查找他内置的属性，也是找不到 Symbol (象征) .interator的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for-of-和-for-in-的区别" tabindex="-1"><a class="header-anchor" href="#for-of-和-for-in-的区别" aria-hidden="true">#</a> for of 和 for in 的区别</h2><p>for of 取值 value for in 取索引 index</p><h2 id="以下为这些-symbols-的列表" tabindex="-1"><a class="header-anchor" href="#以下为这些-symbols-的列表" aria-hidden="true">#</a> 以下为这些 symbols 的列表：</h2><p>Symbol .hasInstance 方法，会被 instanceof 运算符调用。构造器对象用来识别一个对象是否是其实例。</p><p>Symbol .isConcatSpreadable 布尔值，表示当在一个对象上调用 Array.prototype.concat 时，这个对象的数组元素是否可展开。</p><p>Symbol .iterator 方法，被 for-of 语句调用。返回对象的默认迭代器。</p><p>Symbol .match 方法，被 String .prototype.match 调用。正则表达式用来匹配字符串。</p><p>Symbol .replace 方法，被 String .prototype.replace 调用。正则表达式用来替换字符串中匹配的子串。</p><p>Symbol .search 方法，被 String .prototype.search 调用。正则表达式返回被匹配部分在字符串中的索引。</p><p>Symbol .species 函数值，为一个构造函数。用来创建派生对象。</p><p>Symbol .split 方法，被 String .prototype.split 调用。正则表达式来用分割字符串。</p><p>Symbol .toPrimitive 方法，被 ToPrimitive 抽象操作调用。把对象转换为相应的原始值。</p><p>Symbol .toStringTag 方法，被内置方法 Object.prototype.toString 调用。返回创建对象时默认的字符串描述。</p><p>Symbol .unscopables 对象，它自己拥有的属性会被 with 作用域排除在外。</p>`,33);function k(d,m){const a=l("ExternalLinkIcon");return p(),o("div",null,[n("p",null,[s("Symbols · "),n("a",u,[s("TypeScript 中文网 · TypeScript——JavaScript 的超集 ts 官网"),e(a)])]),r])}const v=t(i,[["render",k],["__file","08-symbol类型.html.vue"]]);export{v as default};
