const n=JSON.parse(`{"key":"v-560b1240","path":"/code/vue/vue3/38-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%EF%BC%8Ch%E5%87%BD%E6%95%B0.html","title":"38-函数式编程，h函数","lang":"zh-CN","frontmatter":{"category":["vue3"],"date":"2023-01-09 20:18","title":"38-函数式编程，h函数","updated":"2023-05-13 22:56","description":"之前跟大家介绍了两种 vue 编写风格分别是 template 模板方式，和 JSX 方式感觉 JSX 被大家吐槽的很厉害，其实用习惯还挺好用的今天介绍第三种函数式编程 函数式编程 主要会用到 h 函数 h 接收三个参数 type 元素的类型 propsOrChildren 数据对象, 这里主要表示(props, attrs, dom props, class 和 style) children 子节点 h 函数拥有多种组合方式 // 除类型之外的所有参数都是可选的 h('div') h('div', { id: 'foo' }) //属性和属性都可以在道具中使用 //Vue会自动选择正确的分配方式 h('div', { class: 'bar', innerHTML: 'hello' }) // props modifiers such as .prop and .attr can be added // with '.' and \`^' prefixes respectively h('div', { '.name': 'some-name', '^width': '100' }) // class 和 style 可以是对象或者数组 h('div', { class: [foo, { bar }], style: { color: 'red' } }) // 定义事件需要加on 如 onXxx h('div', { onClick: () =&gt; {} }) // 子集可以字符串 h('div', { id: 'foo' }, 'hello') //如果没有props是可以省略props 的 h('div', 'hello') h('div', [h('span', 'hello')]) // 子数组可以包含混合的VNode和字符串 h('div', ['hello', h('span', 'hello')])","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/vue/vue3/38-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%EF%BC%8Ch%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"38-函数式编程，h函数"}],["meta",{"property":"og:description","content":"之前跟大家介绍了两种 vue 编写风格分别是 template 模板方式，和 JSX 方式感觉 JSX 被大家吐槽的很厉害，其实用习惯还挺好用的今天介绍第三种函数式编程 函数式编程 主要会用到 h 函数 h 接收三个参数 type 元素的类型 propsOrChildren 数据对象, 这里主要表示(props, attrs, dom props, class 和 style) children 子节点 h 函数拥有多种组合方式 // 除类型之外的所有参数都是可选的 h('div') h('div', { id: 'foo' }) //属性和属性都可以在道具中使用 //Vue会自动选择正确的分配方式 h('div', { class: 'bar', innerHTML: 'hello' }) // props modifiers such as .prop and .attr can be added // with '.' and \`^' prefixes respectively h('div', { '.name': 'some-name', '^width': '100' }) // class 和 style 可以是对象或者数组 h('div', { class: [foo, { bar }], style: { color: 'red' } }) // 定义事件需要加on 如 onXxx h('div', { onClick: () =&gt; {} }) // 子集可以字符串 h('div', { id: 'foo' }, 'hello') //如果没有props是可以省略props 的 h('div', 'hello') h('div', [h('span', 'hello')]) // 子数组可以包含混合的VNode和字符串 h('div', ['hello', h('span', 'hello')])"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-24T09:20:32.000Z"}],["meta",{"property":"article:published_time","content":"2023-01-09T20:18:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-24T09:20:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"38-函数式编程，h函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-09T20:18:00.000Z\\",\\"dateModified\\":\\"2023-06-24T09:20:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"h 函数拥有多种组合方式","slug":"h-函数拥有多种组合方式","link":"#h-函数拥有多种组合方式","children":[]},{"level":2,"title":"使用props传递参数","slug":"使用props传递参数","link":"#使用props传递参数","children":[]},{"level":2,"title":"接受emit","slug":"接受emit","link":"#接受emit","children":[]},{"level":2,"title":"定义插槽","slug":"定义插槽","link":"#定义插槽","children":[]}],"git":{"createdTime":1677862957000,"updatedTime":1687598432000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":5}]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"code/vue/vue3/38-函数式编程，h函数.md","localizedDate":"2023年1月9日","excerpt":"<p>之前跟大家介绍了两种 vue 编写风格分别是 template 模板方式，和 JSX 方式感觉 JSX 被大家吐槽的很厉害，其实用习惯还挺好用的今天介绍第三种函数式编程</p>\\n<h1> 函数式编程</h1>\\n<p>主要会用到 h 函数</p>\\n<p>h 接收三个参数</p>\\n<ul>\\n<li>type 元素的类型</li>\\n<li>propsOrChildren 数据对象, 这里主要表示(props, attrs, dom props, class 和 style)</li>\\n<li>children 子节点</li>\\n</ul>\\n<h2> h 函数拥有多种组合方式</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// 除类型之外的所有参数都是可选的</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">id</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n \\n<span class=\\"token comment\\">//属性和属性都可以在道具中使用</span>\\n<span class=\\"token comment\\">//Vue会自动选择正确的分配方式</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">class</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'bar'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">innerHTML</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'hello'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n \\n<span class=\\"token comment\\">// props modifiers such as .prop and .attr can be added</span>\\n<span class=\\"token comment\\">// with '.' and \`^' prefixes respectively</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token string-property property\\">'.name'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'some-name'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string-property property\\">'^width'</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'100'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n \\n<span class=\\"token comment\\">// class 和 style 可以是对象或者数组</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token keyword\\">class</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">[</span>foo<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> bar <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">style</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">color</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'red'</span> <span class=\\"token punctuation\\">}</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n \\n<span class=\\"token comment\\">// 定义事件需要加on 如 onXxx</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token function-variable function\\">onClick</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n \\n<span class=\\"token comment\\">// 子集可以字符串</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">id</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'foo'</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">)</span>\\n \\n<span class=\\"token comment\\">//如果没有props是可以省略props 的</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'span'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n \\n<span class=\\"token comment\\">// 子数组可以包含混合的VNode和字符串</span>\\n<span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'div'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">h</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'span'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'hello'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}`);export{n as data};
