import{_ as e,X as p,Y as i,Z as n,$ as a,a1 as t,a2 as o,G as c}from"./framework-c2b0d87a.js";const l="/assets/image-20211015174133459-e6e93e63.png",u="/assets/image-20211024224919018-7c3db7e8.png",r="/assets/image-20211025230045977-183bce5a.png",d="/assets/image-20211101222447022-d77bba56.png",k="/assets/image-20211101222736188-51762d01.png",g="/assets/image-20211101222818848-32fb1776.png",m={},v=n("h1",{id:"_1、spring",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、spring","aria-hidden":"true"},"#"),a(" 1、Spring")],-1),b=n("h3",{id:"_1-1、简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1、简介","aria-hidden":"true"},"#"),a(" 1.1、简介")],-1),h={href:"https://spring.io/projects/spring-framework#overview",target:"_blank",rel:"noopener noreferrer"},f={href:"https://repo.spring.io/ui/native/release/org/springframework/spring",target:"_blank",rel:"noopener noreferrer"},_=o(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-web --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2、优点" tabindex="-1"><a class="header-anchor" href="#_1-2、优点" aria-hidden="true">#</a> 1.2、优点</h3><ul><li>Spring是一个开源的免费的框架（容器）</li><li>Spring是一个轻量级的、非入侵式的框架</li><li>控制反转（IOC）、面向切面编程（AOP）</li><li>支持事务的处理，对框架整合的支持</li></ul><p><mark>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架</mark></p><h3 id="_1-3、组成" tabindex="-1"><a class="header-anchor" href="#_1-3、组成" aria-hidden="true">#</a> 1.3、组成</h3><figure><img src="`+l+`" alt="image-20211015174133459" tabindex="0" loading="lazy"><figcaption>image-20211015174133459</figcaption></figure><h3 id="_1-4、ioc" tabindex="-1"><a class="header-anchor" href="#_1-4、ioc" aria-hidden="true">#</a> 1.4、IOC</h3><p>注入配置</p><p>Spring容器还提供了一个更简单的<code>@PropertySource</code>来自动读取配置文件。我们只需要在<code>@Configuration</code>配置类上再添加一个注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;app.properties&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 表示读取classpath的app.properties</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${app.zone:Z}&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> zoneId<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">ZoneId</span> <span class="token function">createZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>zoneId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果当前的Profile设置为<code>test</code>，则Spring容器会调用<code>createZoneIdForTest()</code>创建<code>ZoneId</code>，否则，调用<code>createZoneId()</code>创建<code>ZoneId</code>。注意到<code>@Profile(&quot;!test&quot;)</code>表示非test环境。</p><p>在运行程序时，加上JVM参数<code>-Dspring.profiles.active=test</code>就可以指定以<code>test</code>环境启动。</p><p>实际上，Spring允许指定多个Profile，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-Dspring.profiles.active=test,master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>Spring通过CGLIB创建的代理类，不会初始化代理类自身继承的任何成员变量，包括final类型的成员变量</mark></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span>

<span class="token comment">//利用set进行动态实现值的注入</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span><span class="token class-name">UserDao</span> userDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用了set注入后，程序不在具有主动性</p><h1 id="_8、使用注解开发" tabindex="-1"><a class="header-anchor" href="#_8、使用注解开发" aria-hidden="true">#</a> 8、使用注解开发</h1><p>在Spring4之后，要使用注解开发，必须要保证 aop的包导入了</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!--指定要扫描的包,这个包下的注解就会生效--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.kuang<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用注解需要导入context约束，增加注解的支持！</p><ol><li><p>bean</p></li><li><p>属性如何注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	
    <span class="token comment">//相当于&lt;property name=&quot;name&quot;value=&quot;kuangshen&quot;/&gt;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;kuangshen&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>衍生的注解 @Component有几个衍生注解，我们在web开发中，会按照mVc三层架构分层！</p><ul><li>dao【@Repository】</li><li>service【@Service】</li><li>controller【@Controller】</li></ul><p>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配Bean</p></li><li><p>自动装配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">-</span><span class="token annotation punctuation">@Autowired</span><span class="token operator">:</span>自动装配通过类型<span class="token punctuation">.</span>名字
	如果<span class="token class-name">Autowired</span>不能唯一自动装配上属性<span class="token punctuation">,</span>则需要通过<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token annotation punctuation">@Nu11ab1e</span>字段标记了这个注解<span class="token punctuation">,</span>说明这个字段可以为nu11<span class="token punctuation">;</span>
<span class="token operator">-</span><span class="token annotation punctuation">@Resource</span><span class="token operator">:</span>自动装配通过名字<span class="token punctuation">.</span>类型<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>作用域</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">&quot;prototype&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">//相当于&lt;property name=&quot;name&quot;value=&quot;kuangshen&quot;/&gt;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;kuangshen&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>小结</p></li></ol><h1 id="_10-代理模式" tabindex="-1"><a class="header-anchor" href="#_10-代理模式" aria-hidden="true">#</a> 10 代理模式</h1><figure><img src="`+u+'" alt="image-20211024224919018" tabindex="0" loading="lazy"><figcaption>image-20211024224919018</figcaption></figure><h3 id="_10-1、静态代理" tabindex="-1"><a class="header-anchor" href="#_10-1、静态代理" aria-hidden="true">#</a> 10.1、静态代理</h3><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实角色，代理真实角色后，我们一般会做一些附属操作</li><li>客户：访问代理对象的人！</li></ul><p>代码步骤：</p><p>1.接口 2.真实角色 3.代理角色 4.客户端访问代理角色</p><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共也就就交给代理角色！实现了业务的分工！</li><li>公共业务发生扩展的时候，方便集中管理！</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色；代码量会翻倍一开发效率会变低</li></ul><h3 id="_10-2、加深理解" tabindex="-1"><a class="header-anchor" href="#_10-2、加深理解" aria-hidden="true">#</a> 10.2、加深理解</h3><p>聊聊AOP</p><figure><img src="'+r+'" alt="image-20211025230045977" tabindex="0" loading="lazy"><figcaption>image-20211025230045977</figcaption></figure><h3 id="_10-3、动态代理" tabindex="-1"><a class="header-anchor" href="#_10-3、动态代理" aria-hidden="true">#</a> 10.3、动态代理</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是我们直接写好的！</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理 <ul><li>基于接口--JDK动态代理【我们在这里使用】</li><li>基于类：cglib</li><li>java字节码实现：javasist</li></ul></li></ul><p>需要了解两个类：Proxy：代理，InvocationHandler：调用处理程序</p><p>动态代理的好处：</p><ul><li>可以使真实角色的操作更加纯粹！不用去关注一些公共的业务</li><li>公共也就就交给代理角色！实现了业务的分工！</li><li>公共业务发生扩展的时候，方便集中管理！</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li></ul><h1 id="_11、aop" tabindex="-1"><a class="header-anchor" href="#_11、aop" aria-hidden="true">#</a> 11、AOP</h1><h3 id="_11-1-什么是aop" tabindex="-1"><a class="header-anchor" href="#_11-1-什么是aop" aria-hidden="true">#</a> 11.1 什么是AOP</h3><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><figure><img src="'+d+'" alt="image-20211101222447022" tabindex="0" loading="lazy"><figcaption>image-20211101222447022</figcaption></figure><h3 id="_11-2aop在spring中的作用" tabindex="-1"><a class="header-anchor" href="#_11-2aop在spring中的作用" aria-hidden="true">#</a> 11.2Aop在Spring中的作用</h3><p><mark>提供声明式事务；允许用户自定义切面</mark></p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志，安全，缓存，事务等等…</li><li>切面（ASPECT）：横切关注点被模块化的特殊对象。即，它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知执行的“地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><figure><img src="'+k+'" alt="image-20211101222736188" tabindex="0" loading="lazy"><figcaption>image-20211101222736188</figcaption></figure><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice：</p><figure><img src="'+g+`" alt="image-20211101222818848" tabindex="0" loading="lazy"><figcaption>image-20211101222818848</figcaption></figure><p>即Aop在不改变原有代码的情况下，去增加新的功能.</p><h3 id="_11-3使用spring实现aop" tabindex="-1"><a class="header-anchor" href="#_11-3使用spring实现aop" aria-hidden="true">#</a> 11.3使用Spring实现Aop</h3><p>【重点】使用AOP织入，需要导入一个依赖包！</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--https://mvnrepository.com/artifact/org.aspectj/aspectjweaver--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式一：使用Spring的APl接口【主要SpringAPl接口实现】</p><p>方式二：自定义来实现AOP【主要是切面定义】</p><p>方式三：使用注解方式实现AOP</p>`,58);function x(w,y){const s=c("ExternalLinkIcon");return p(),i("div",null,[v,b,n("p",null,[a("官网："),n("a",h,[a("https://spring.io/projects/spring-framework#overview"),t(s)])]),n("p",null,[a("官方下载地址："),n("a",f,[a("https://repo.spring.io/ui/native/release/org/springframework/spring"),t(s)])]),_])}const S=e(m,[["render",x],["__file","Spring课堂记录.html.vue"]]);export{S as default};
