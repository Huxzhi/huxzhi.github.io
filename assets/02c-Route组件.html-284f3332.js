import{_ as n,X as a,Y as s,a2 as t}from"./framework-c2b0d87a.js";const p="/assets/image-2023-03-20_20-23-47-687-02c-Route组件-c44e2edf.png",e={},o=t(`<h1 id="_02c-route-组件" tabindex="-1"><a class="header-anchor" href="#_02c-route-组件" aria-hidden="true">#</a> 02c-Route 组件</h1><p>route 组件是路由的映射组件，通过该组件将 url 地址和 React 组件进行映射，映射后当 url 地址变为指定地址时指定的组件就会显示，否则不显示。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;Route path=&quot;/home&quot; component={Home} /&gt;
&lt;Route path=&quot;/about&quot; component={About} /&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中，路径<code>/home</code>和<code>&lt;Home/&gt;</code>组件进行了映射，路径<code>/about</code>和<code>&lt;About/&gt;</code>组件进行了映射。当访问<code>http://localhost:3000/about</code>时，about 组件会自动渲染显示，访问<code>http://localhost:3000/home</code>时，home 组件会自动渲染显示。</p><p>Route 组件可以设置以下几个属性</p><ol><li>path 用来设置要映射的路径，可以是一个字符串或字符串数组。字符串用来匹配单个路径，数组可以匹配多个路径。</li><li>exact 用来设置路由地址是否完整匹配，它需要一个布尔值，默认为 false，就像上边的情况。如果设置为 true，那么只有地址和 path 完全一致时，组件才会挂载。</li><li>strict 布尔值，默认值为 false。false 时，会匹配到以<code>/</code>结尾的路径。比如：path 设置为<code>/home</code>默认情况下<code>/home/</code>也会导致组件挂载。设置为 true 时，以<code>/</code>结尾的路径不会被匹配。</li><li>component</li><li>render</li><li>children</li><li>location</li><li>sensitive</li></ol><h2 id="_4-component" tabindex="-1"><a class="header-anchor" href="#_4-component" aria-hidden="true">#</a> 4.component</h2><p>component 用来指定路由匹配后被挂载的组件 component 需要直接传递组件的类</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//App.js</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>和标签体指定组件不同，如果通过 component 属性指定组件，React Router 会自动向组件中传递三个参数 <code>match</code>、<code>location</code> 和 <code>history</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//About.js</span>
<span class="token keyword">const</span> <span class="token function-variable function">About</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="match" tabindex="-1"><a class="header-anchor" href="#match" aria-hidden="true">#</a> match</h3><p>对象，表示请求匹配的路径信息，其中包含四个属性：</p><ol><li>param —— 请求参数</li><li>isExact —— 布尔值，请求路径是否完整匹配</li><li>path —— 请求路径的规则</li><li>url —— 匹配到的 url 地址</li></ol><h3 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> location</h3><p>对象，表示浏览器地址栏的信息，请求完整路径、查询字符串等，可能具有的属性：</p><ol><li>pathname —— 请求的路径</li><li>search —— 查询字符串</li><li>hash —— hash 字符串</li><li>state —— 历史记录中的状态对象，可以用来在跳转时传递数据</li></ol><h3 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h3><p>对象，用来读取和操作浏览器的历史记录（页面跳转）等功能，属性：</p><ol><li>length —— 历史记录的数量</li><li>action —— 当前历史记录的状态，pop（前进、后退、新记录创建、索引发生变化）；push（新记录添加）；replace（历史记录被替换）</li><li>location —— location 对象</li><li>push() —— 添加新的历史记录，主动控制页面跳转</li><li>replace() —— 替换历史记录</li><li>go() —— 跳转到指定记录</li><li>goBack() —— 回退</li><li>goForward() —— 前进</li><li>block() —— 用来阻止用户跳转行为，可以用 Prompt 组件代替</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">pathname</span><span class="token operator">:</span><span class="token string">&#39;/student/2&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 记录在 location 中的状态对象，可以用来在跳转时传递数据</span>
    <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;哈哈&#39;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-render" tabindex="-1"><a class="header-anchor" href="#_5-render" aria-hidden="true">#</a> 5.render</h2><p>传参数方便</p><p>render 也可以用了指定要挂载的组件 render 需要一个回调函数作为参数，回调函数的返回值会最终被挂载 <mark>render 不会自动传递三个属性</mark></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//与 component 相同</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/student/:id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">render</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">routePros</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>routePros<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-children" tabindex="-1"><a class="header-anchor" href="#_6-children" aria-hidden="true">#</a> 6.children</h2><p>children 也可以用来指定被挂载的组件 用法有两种：</p><ol><li>和 render 类似，传递回调函数 <ul><li>当 children 设置一个回调函数时，该组件无论路径是否匹配都会挂载</li></ul></li><li>可以传递组件</li></ol><p>下面这几种形式都可以</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">//回调函数形式</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/student/:id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">children</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">routeProps</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>routeProps<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">//传递组件形式</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/student/:id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">children</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">//传递组件</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/student/:id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span></span><span class="token punctuation">/&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span><span class="token operator">*</span><span class="token operator">/</span><span class="token punctuation">}</span>

<span class="token comment">//表达式形式</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/student/:id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span><span class="token parameter">routeProps</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>routeProps<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="通过钩子函数来获取" tabindex="-1"><a class="header-anchor" href="#通过钩子函数来获取" aria-hidden="true">#</a> 通过钩子函数来获取</h2><p>除了可以通过 props 获取三个对象外，也可以通过钩子函数来获取</p><p>student.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token function">useRouteMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> stu <span class="token operator">=</span> <span class="token constant">STU_DATA</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> <span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),c=[o];function l(i,u){return a(),s("div",null,c)}const d=n(e,[["render",l],["__file","02c-Route组件.html.vue"]]);export{d as default};
