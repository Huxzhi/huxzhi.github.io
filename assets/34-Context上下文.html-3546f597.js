import{_ as n,X as s,Y as a,a2 as t}from"./framework-c2b0d87a.js";const e={},p=t(`<h1 id="_34-context-上下文" tabindex="-1"><a class="header-anchor" href="#_34-context-上下文" aria-hidden="true">#</a> 34-Context 上下文</h1><p>Context 相当于一个公共的存储空间，我们可以将多个组件中都需要访问的数据统一存储到一个 Context 中，这样无需通过 props 逐层传递，即可使组件访问到这些数据</p><p><mark>当我们通过 Context 访问数据时，他会读取离他最近的 Provider 中的数据</mark>，如果没有 Provider，则读取 Context 中的默认数据</p><h2 id="创建-context" tabindex="-1"><a class="header-anchor" href="#创建-context" aria-hidden="true">#</a> 创建 context</h2><p>src/store/ 通过 <code>React.createContext()</code> 创建 <code>context</code></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> TestContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;孙悟空&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> TestContext<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用方式一-回调函数" tabindex="-1"><a class="header-anchor" href="#使用方式一-回调函数" aria-hidden="true">#</a> 使用方式一：回调函数</h2><ol><li>引入 context</li><li>使用 <code>Xxx.Consumer</code> 组件来创建元素，生产者和消费者模式</li></ol><h3 id="consumer-消费者" tabindex="-1"><a class="header-anchor" href="#consumer-消费者" aria-hidden="true">#</a> Consumer 消费者</h3><p>Consumer 的标签体需要一个回调函数 它会将 context 设置为回调函数的参数，通过参数就可以访问到 context 中存储的数据</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> TestContext <span class="token keyword">from</span> <span class="token string">&quot;../store/testContext&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TestContext.Consumer</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
               <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
                   </span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"> - </span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token plain-text">
               </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TestContext.Consumer</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">A</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="provider-生产者" tabindex="-1"><a class="header-anchor" href="#provider-生产者" aria-hidden="true">#</a> Provider 生产者</h3><p><code>Xxx.Provider</code> - 表示数据的生产者，可以使用它来指定 Context 中的数据 - 通过 value 来指定 Context 中存储的数据， 这样一来，在该组件的 <strong>所有的子组件中</strong> 都可以通过 Context 来访问它所指定数据 <mark>当我们通过 Context 访问数据时，他会读取离他最近的 Provider 中的数据</mark>，如果没有 Provider，则读取 Context 中的默认数据</p><h2 id="使用方式二-usecontext" tabindex="-1"><a class="header-anchor" href="#使用方式二-usecontext" aria-hidden="true">#</a> 使用方式二：useContext()</h2><ol><li>导入 Context</li><li>使用钩子函数 useContext() 获取到 context useContext() 需要一个 Context 作为参数 它会将 Context 中数据获取并作为返回值返回</li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">B</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token comment">// 使用钩子函数获取Context</span>
    <span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>TestContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token plain-text"> -- </span><span class="token punctuation">{</span>ctx<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">B</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","34-Context上下文.html.vue"]]);export{r as default};
