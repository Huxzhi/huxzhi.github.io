const e=JSON.parse('{"key":"v-73fd25fe","path":"/code/react/React18/39-useEffect%E5%89%AF%E4%BD%9C%E7%94%A8-%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%90%8E%E6%89%A7%E8%A1%8C.html","title":"39-Effect副作用","lang":"zh-CN","frontmatter":{"date":"2023-03-15 17:30","title":"39-Effect副作用","updated":"2023-03-20 16:36","description":"39-useEffect 副作用 使用 Effect 为了解决这个问题 React 专门为我们提供了钩子函数 useEffect() ，Effect 的翻译过来就是副作用，专门用来处理那些不能直接写在组件内部的代码。 哪些代码 不能直接写在组件内部 呢？像是：获取数据、记录日志、检查登录、设置定时器等。简单来说，就是那些和组件渲染无关，但却有可能对组件产生副作用的代码 useEffect 语法： useEffect(didUpdate);","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/react/React18/39-useEffect%E5%89%AF%E4%BD%9C%E7%94%A8-%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E5%90%8E%E6%89%A7%E8%A1%8C.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"39-Effect副作用"}],["meta",{"property":"og:description","content":"39-useEffect 副作用 使用 Effect 为了解决这个问题 React 专门为我们提供了钩子函数 useEffect() ，Effect 的翻译过来就是副作用，专门用来处理那些不能直接写在组件内部的代码。 哪些代码 不能直接写在组件内部 呢？像是：获取数据、记录日志、检查登录、设置定时器等。简单来说，就是那些和组件渲染无关，但却有可能对组件产生副作用的代码 useEffect 语法： useEffect(didUpdate);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T16:11:07.000Z"}],["meta",{"property":"article:published_time","content":"2023-03-15T17:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T16:11:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"39-Effect副作用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-15T17:30:00.000Z\\",\\"dateModified\\":\\"2023-03-22T16:11:07.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用 Effect","slug":"使用-effect","link":"#使用-effect","children":[{"level":3,"title":"useEffect() 中的代码是在组件渲染后才执行","slug":"useeffect-中的代码是在组件渲染后才执行","link":"#useeffect-中的代码是在组件渲染后才执行","children":[]}]},{"level":2,"title":"限制 effect 的执行时机","slug":"限制-effect-的执行时机","link":"#限制-effect-的执行时机","children":[{"level":3,"title":"useEffect() 可以传递一个第二个参数","slug":"useeffect-可以传递一个第二个参数","link":"#useeffect-可以传递一个第二个参数","children":[]}]},{"level":2,"title":"清除 Effect ，用于防抖","slug":"清除-effect-用于防抖","link":"#清除-effect-用于防抖","children":[{"level":3,"title":"在Effect的回调函数中，可以指定一个函数作为返回值","slug":"在effect的回调函数中-可以指定一个函数作为返回值","link":"#在effect的回调函数中-可以指定一个函数作为返回值","children":[]}]}],"git":{"createdTime":1679501467000,"updatedTime":1679501467000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":1}]},"readingTime":{"minutes":5.1,"words":1530},"filePathRelative":"code/react/React18/39-useEffect副作用-组件渲染后执行.md","localizedDate":"2023年3月15日","excerpt":"<h1> 39-useEffect 副作用</h1>\\n<h2> 使用 Effect</h2>\\n<p>为了解决这个问题 React 专门为我们提供了钩子函数 <code>useEffect()</code> ，Effect 的翻译过来就是副作用，专门用来处理那些不能直接写在组件内部的代码。</p>\\n<p>哪些代码 <strong>不能直接写在组件内部</strong> 呢？像是：<mark>获取数据、记录日志、检查登录、设置定时器等。简单来说，就是那些和组件渲染无关，但却有可能对组件产生副作用的代码</mark></p>\\n<p>useEffect 语法：</p>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token function\\">useEffect</span><span class=\\"token punctuation\\">(</span>didUpdate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{e as data};
