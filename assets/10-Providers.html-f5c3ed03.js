const e=JSON.parse('{"key":"v-3e82cfab","path":"/code/nest-js/10-Providers.html","title":"10-Providers","lang":"zh-CN","frontmatter":{"date":"2023-01-28 17:11","title":"10-Providers","description":"Providers Providers 是 Nest 的一个基本概念。许多基本的 Nest 类可能被视为 provider - service, repository, factory, helper 等等。 他们都可以通过 constructor 注入依赖关系。 这意味着对象可以彼此创建各种关系，并且“连接”对象实例的功能在很大程度上可以委托给 Nest 运行时系统。 Provider 只是一个用 @Injectable() 装饰器注释的类。 10.a-注入依赖关系","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/nest-js/10-Providers.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"10-Providers"}],["meta",{"property":"og:description","content":"Providers Providers 是 Nest 的一个基本概念。许多基本的 Nest 类可能被视为 provider - service, repository, factory, helper 等等。 他们都可以通过 constructor 注入依赖关系。 这意味着对象可以彼此创建各种关系，并且“连接”对象实例的功能在很大程度上可以委托给 Nest 运行时系统。 Provider 只是一个用 @Injectable() 装饰器注释的类。 10.a-注入依赖关系"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://huxzhi.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-03T17:02:37.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"10-Providers"}],["meta",{"property":"article:published_time","content":"2023-01-28T17:11:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-03T17:02:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10-Providers\\",\\"image\\":[\\"https://huxzhi.github.io/\\"],\\"datePublished\\":\\"2023-01-28T17:11:00.000Z\\",\\"dateModified\\":\\"2023-03-03T17:02:37.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.基本用法","slug":"_1-基本用法","link":"#_1-基本用法","children":[]},{"level":2,"title":"2.service 第二种用法(自定义名称)","slug":"_2-service-第二种用法-自定义名称","link":"#_2-service-第二种用法-自定义名称","children":[]},{"level":2,"title":"3.自定义注入值","slug":"_3-自定义注入值","link":"#_3-自定义注入值","children":[]},{"level":2,"title":"4.工厂模式","slug":"_4-工厂模式","link":"#_4-工厂模式","children":[]},{"level":2,"title":"5.异步模式","slug":"_5-异步模式","link":"#_5-异步模式","children":[]}],"git":{"createdTime":1677862957000,"updatedTime":1677862957000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":1}]},"readingTime":{"minutes":1.92,"words":575},"filePathRelative":"code/nest-js/10-Providers.md","localizedDate":"2023年1月28日","excerpt":"<h1> Providers</h1>\\n<p><code>Providers</code> 是 Nest 的一个基本概念。许多基本的 Nest 类可能被视为 provider - service, repository, factory, helper 等等。 他们都可以通过 constructor 注入依赖关系。 这意味着对象可以彼此创建各种关系，并且“连接”对象实例的功能在很大程度上可以委托给 Nest 运行时系统。 Provider 只是一个用 <code>@Injectable()</code> 装饰器注释的类。</p>\\n<p><a href=\\"/code/nest-js/10.a-%E6%B3%A8%E5%85%A5%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB.html\\" target=\\"blank\\">10.a-注入依赖关系</a></p>","copyright":{},"autoDesc":true}');export{e as data};
