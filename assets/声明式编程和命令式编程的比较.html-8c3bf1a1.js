const t=JSON.parse('{"key":"v-44b7e216","path":"/note/%E5%A3%B0%E6%98%8E%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%92%8C%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E6%AF%94%E8%BE%83.html","title":"3b-声明式编程和命令式编程的比较","lang":"zh-CN","frontmatter":{"date":"2023-01-29 22:20","title":"3b-声明式编程和命令式编程的比较","updated":"2023-05-13 22:56","description":"这么一想还真是，之前学习的都是命令式，需要考虑不同的初始条件和结束，兼容性很差，声明式 map，reduce，filter 把一些操作都抽象出来了，不再需要for循环了，没有初始条件， 所以声明式会写 很多 回调函数 也许你还不能明白，但有一个地方，你也许已经用到了声明式编程，那就是SQL。 你可以把SQL当做一个处理数据的声明式查询语言。完全用SQL写一个应用程序？这不可能。但如果是处理相互关联的数据集，它就显的无比强大了。 声明式编程 命令式编程：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。 声明式编程：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/note/%E5%A3%B0%E6%98%8E%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%92%8C%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%9A%84%E6%AF%94%E8%BE%83.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"3b-声明式编程和命令式编程的比较"}],["meta",{"property":"og:description","content":"这么一想还真是，之前学习的都是命令式，需要考虑不同的初始条件和结束，兼容性很差，声明式 map，reduce，filter 把一些操作都抽象出来了，不再需要for循环了，没有初始条件， 所以声明式会写 很多 回调函数 也许你还不能明白，但有一个地方，你也许已经用到了声明式编程，那就是SQL。 你可以把SQL当做一个处理数据的声明式查询语言。完全用SQL写一个应用程序？这不可能。但如果是处理相互关联的数据集，它就显的无比强大了。 声明式编程 命令式编程：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。 声明式编程：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-24T09:20:32.000Z"}],["meta",{"property":"article:published_time","content":"2023-01-29T22:20:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-24T09:20:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3b-声明式编程和命令式编程的比较\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-29T22:20:00.000Z\\",\\"dateModified\\":\\"2023-06-24T09:20:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"声明式编程","slug":"声明式编程","link":"#声明式编程","children":[]}],"git":{"createdTime":1687598432000,"updatedTime":1687598432000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":1}]},"readingTime":{"minutes":1.87,"words":562},"filePathRelative":"note/声明式编程和命令式编程的比较.md","localizedDate":"2023年1月29日","excerpt":"<p>这么一想还真是，之前学习的都是命令式，需要考虑不同的初始条件和结束，兼容性很差，声明式 map，reduce，filter 把一些操作都抽象出来了，不再需要for循环了，没有初始条件，</p>\\n<p>所以声明式会写 很多 回调函数</p>\\n<p>也许你还不能明白，但有一个地方，你也许已经用到了声明式编程，那就是SQL。</p>\\n<p>你可以把SQL当做一个处理数据的声明式查询语言。完全用SQL写一个应用程序？这不可能。但如果是处理相互关联的数据集，它就显的无比强大了。</p>\\n<h2> 声明式编程</h2>\\n<ul>\\n<li><strong>命令式编程</strong>：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。</li>\\n<li><strong>声明式编程</strong>：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。</li>\\n</ul>","copyright":{},"autoDesc":true}');export{t as data};
