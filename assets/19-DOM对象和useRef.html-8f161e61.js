import{_ as n,X as s,Y as a,a2 as e}from"./framework-c2b0d87a.js";const t={},p=e(`<h2 id="获取原生的-dom-对象" tabindex="-1"><a class="header-anchor" href="#获取原生的-dom-对象" aria-hidden="true">#</a> 获取原生的 DOM 对象</h2><h3 id="可以使用传统的-document-来对-dom-进行操作" tabindex="-1"><a class="header-anchor" href="#可以使用传统的-document-来对-dom-进行操作" aria-hidden="true">#</a> 可以使用传统的 document 来对 DOM 进行操作</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 通过id获取h1</span>
<span class="token keyword">const</span> header <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;header&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="直接从-react-处获取-dom-对象" tabindex="-1"><a class="header-anchor" href="#直接从-react-处获取-dom-对象" aria-hidden="true">#</a> 直接从 React 处获取 DOM 对象</h3><p>步骤：</p><ol><li>创建一个存储 DOM 对象的容器 <ul><li>使用 useRef() 钩子函数</li><li>钩子函数的注意事项： <ol><li>React 中的钩子函数只能用于 <strong>函数组件</strong> 或自定义钩子</li><li>钩子函数只能直接在函数组件中调用</li></ol></li></ul></li><li>将容器设置为想要获取 DOM 对象元素的 ref 属性 <ul><li><code>&lt;h1 ref={xxx}&gt;....&lt;/h1&gt;</code></li><li>React 会自动将当前元素的 DOM 对象，设置为容器 current 属性</li></ul></li></ol><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> h1Ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个容器</span>

    <span class="token comment">//可以直接修改&lt;h1&gt;的innerText 内容</span>
    h1Ref<span class="token punctuation">.</span>current<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;嘻嘻！&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token comment">/* 绑定 h1Ref */</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>header<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>h1Ref<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">我是标题</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 导出App</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作 要绑定的 DOM，调用 h1Ref.current.方法 即可</p><h2 id="useref" tabindex="-1"><a class="header-anchor" href="#useref" aria-hidden="true">#</a> useRef()</h2><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">const</span> h1Ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个容器</span>

<span class="token comment">//也可以绑定上 DOM </span>
<span class="token keyword">const</span> h1Ref <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">current</span><span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>返回的就是一个普通的 JS 对象</p></li><li><p>所以我们直接创建一个 js 对象 <code>{current:undefined}</code> ，也可以代替 useRef()</p></li><li><p>区别：</p><ul><li>我们创建的对象，组件每次重新渲染都会创建一个新对象。因为这个对象在函数作用域，组件函数每次重新执行，就会创建一个新对象 useRef()创建的对象，可以确保每次渲染获取到的都是同一个对象</li><li>当你需要一个对象不会因为组件的重新渲染而改变时，就可以使用 useRef()</li></ul></li></ul><p>验证</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">let</span> temp

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,13),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","19-DOM对象和useRef.html.vue"]]);export{r as default};
