import{_ as r,X as n,Y as s,Z as a,$ as e,a1 as o,a2 as c,G as l}from"./framework-c2b0d87a.js";const i={},d=c('<h3 id="ast-是什么" tabindex="-1"><a class="header-anchor" href="#ast-是什么" aria-hidden="true">#</a> AST 是什么</h3><p>抽象语法树 (Abstract Syntax Tree)，简称 AST，它是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p><h3 id="ast-有什么用" tabindex="-1"><a class="header-anchor" href="#ast-有什么用" aria-hidden="true">#</a> AST 有什么用</h3><p>AST 运用广泛，比如：</p><ul><li>编辑器的错误提示、代码格式化、代码高亮、代码自动补全；</li><li><code>elint</code>、<code>pretiier</code> 对代码错误或风格的检查；</li><li><code>webpack</code> 通过 <code>babel</code> 转译 <code>javascript</code> 语法；</li></ul><p>并且如果你想了解 js 编译执行的原理，那么你就得了解 AST。</p><h3 id="ast-如何生成" tabindex="-1"><a class="header-anchor" href="#ast-如何生成" aria-hidden="true">#</a> AST 如何生成</h3><p>js 执行的第一步是读取 js 文件中的字符流，然后通过词法分析生成 <code>token</code>，之后再通过语法分析( Parser )生成 AST，最后生成机器码执行。</p><p>整个解析过程主要分为以下两个步骤：</p><ul><li>分词：将整个代码字符串分割成最小语法单元数组</li><li>语法分析：在分词基础上建立分析语法单元之间的关系</li></ul><p>JS Parser 是 js 语法解析器，它可以将 js 源码转成 AST，常见的 Parser 有 esprima、traceur、acorn、shift 等。</p>',11),h=a("br",null,null,-1),_={href:"https://juejin.cn/post/6844904035271573511",target:"_blank",rel:"noopener noreferrer"},p=a("br",null,null,-1),u=a("br",null,null,-1);function f(S,T){const t=l("ExternalLinkIcon");return n(),s("div",null,[d,a("p",null,[e("作者：叫我易六呀"),h,e(" 链接："),a("a",_,[e("https://juejin.cn/post/6844904035271573511"),o(t)]),p,e(" 来源：稀土掘金"),u,e(" 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。")])])}const A=r(i,[["render",f],["__file","AST抽象语法树.html.vue"]]);export{A as default};
