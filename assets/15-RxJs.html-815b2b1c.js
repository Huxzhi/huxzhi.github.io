import{_ as t,X as p,Y as e,Z as n,$ as s,a1 as o,a2 as c,G as u}from"./framework-c2b0d87a.js";const i="/assets/image-2023-01-29_21-52-23-823-15-RxJs-dfa0bb7e.png",l={},r=n("p",null,[n("strong",null,"为什么要介绍 RxJs 应为 在 Nestjs 已经内置了 RxJs 无需安装 并且 Nestjs 也会有一些基于 Rxjs 提供的 API")],-1),k=n("p",null,"声明式编程和命令式编程的比较",-1),d=n("blockquote",null,[n("p",null,[s("[!NOTE] 个人理解 把要执行的事件放入 "),n("code",null,"subscriber.next"),s(" 中，会不断执行下去，"),n("code",null,"observable"),s(" 能观察到执行到下一个事件了")])],-1),b=n("figure",null,[n("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),v={href:"https://cn.rx.js.org/class/es6/Observable.js~Observable.html",title:"Observable | RxJS 中文文档",target:"_blank",rel:"noopener noreferrer"},m=c(`<p>RxJs 使用的是 <code>观察者模式</code>，用来 编写异步队列 和 事件处理（后台用不到，前端可以操作 dom）。</p><ul><li><code>Observable</code> 可观察的物件</li><li><code>Subscription</code> 监听 Observable</li><li><code>Operators</code> 纯函数可以处理管道的数据 如 map filter concat reduce 等</li></ul><h2 id="案例-1-订阅和通知" tabindex="-1"><a class="header-anchor" href="#案例-1-订阅和通知" aria-hidden="true">#</a> 案例 1 订阅和通知</h2><p><mark>类似于迭代器</mark> <code>next</code> 发出通知 ，<code>complete</code> 通知完成</p><p><code>subscribe</code> 订阅 <code>observable</code> 发出的通知 也就是一个观察者</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//类似于迭代器 next 发出通知  complete通知完成</span>
<span class="token keyword">const</span> observable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span>subscriber<span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        subscriber<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
        subscriber<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

observable<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
       <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例-2-pipe-管道" tabindex="-1"><a class="header-anchor" href="#案例-2-pipe-管道" aria-hidden="true">#</a> 案例 2 pipe 管道</h2><p>interval 五百毫秒执行一次 pipe 就是 管道的意思 管道里面也是可以去掉接口的支持处理异步数据 去处理数据 这儿展示了 <code>map</code>  和 <code>filter</code> 跟数组的方法是一样的   最后 通过观察者 subscribe 接受回调</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> take <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> map<span class="token punctuation">,</span> filter<span class="token punctuation">,</span>reduce<span class="token punctuation">,</span>find<span class="token punctuation">,</span>findIndex <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs/operators&#39;</span>


<span class="token keyword">const</span> subs <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span>v <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> num<span class="token operator">:</span> v <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">filter</span><span class="token punctuation">(</span>v <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>num <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        subs<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="案例-3" tabindex="-1"><a class="header-anchor" href="#案例-3" aria-hidden="true">#</a> 案例 3</h2><p>Rxjs 也可以处理事件 不过我们在 Nestjs 里面就不用操作 DOM 了 你如果 Angular 或则 Vue 框架看可以使用 fromEvent</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Observable<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> take<span class="token punctuation">,</span><span class="token keyword">of</span><span class="token punctuation">,</span>retry<span class="token punctuation">,</span>fromEvent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;rxjs&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> map<span class="token punctuation">,</span> filter<span class="token punctuation">,</span>reduce<span class="token punctuation">,</span>find<span class="token punctuation">,</span>findIndex <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs/operators&#39;</span>

<span class="token keyword">const</span> dom <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span>e<span class="token operator">=&gt;</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>
dom<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function f(x,g){const a=u("ExternalLinkIcon");return p(),e("div",null,[r,k,d,b,n("p",null,[s("Rxjs 中文文档"),n("a",v,[s("Observable | RxJS 中文文档"),o(a)])]),m])}const _=t(l,[["render",f],["__file","15-RxJs.html.vue"]]);export{_ as default};
