const t=JSON.parse('{"key":"v-0770a443","path":"/note/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/07.a-http1.1%E5%92%8Chttp2.html","title":"http1.1 http2","lang":"zh-CN","frontmatter":{"description":"http1.1 http2 HTTP/2 采用二进制格式而非文本格式 HTTP/2 是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行 使用报头压缩，HTTP/2 降低了开销 HTTP/2 让服务器可以将响应主动“推送”到客户端缓存中 1.二进制分帧层 在二进制分帧层上，HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中 HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/note/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/07.a-http1.1%E5%92%8Chttp2.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"http1.1 http2"}],["meta",{"property":"og:description","content":"http1.1 http2 HTTP/2 采用二进制格式而非文本格式 HTTP/2 是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行 使用报头压缩，HTTP/2 降低了开销 HTTP/2 让服务器可以将响应主动“推送”到客户端缓存中 1.二进制分帧层 在二进制分帧层上，HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中 HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://huxzhi.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-04T10:07:31.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"http1.1 http2"}],["meta",{"property":"article:modified_time","content":"2023-03-04T10:07:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"http1.1 http2\\",\\"image\\":[\\"https://huxzhi.github.io/\\"],\\"dateModified\\":\\"2023-03-04T10:07:31.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.二进制分帧层","slug":"_1-二进制分帧层","link":"#_1-二进制分帧层","children":[]},{"level":2,"title":"4.客户端缓存","slug":"_4-客户端缓存","link":"#_4-客户端缓存","children":[{"level":3,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[]},{"level":3,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[]}]}],"git":{"createdTime":1677924451000,"updatedTime":1677924451000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":1}]},"readingTime":{"minutes":3.87,"words":1161},"filePathRelative":"note/网络安全/07.a-http1.1和http2.md","localizedDate":"2023年3月4日","excerpt":"<h1> http1.1 http2</h1>\\n<p>HTTP/2 采用二进制格式而非文本格式\\nHTTP/2 是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行\\n使用报头压缩，HTTP/2 降低了开销\\nHTTP/2 让服务器可以将响应主动“推送”到客户端缓存中</p>\\n<h2> 1.二进制分帧层</h2>\\n<p>在二进制分帧层上，HTTP 2.0 会将所有传输的信息分割为更小的消息和帧,并对它们采用二进制格式的编码 ，其中 HTTP1.x 的首部信息会被封装到 Headers 帧，而我们的 request body 则封装到 Data 帧里面。</p>\\n<figure><figcaption></figcaption></figure>","copyright":{},"autoDesc":true}');export{t as data};
