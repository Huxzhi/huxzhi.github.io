import{_ as p,X as o,Y as c,Z as n,$ as s,a1 as t,a2 as e,G as l}from"./framework-c2b0d87a.js";const i="/assets/image-20220213172953586-73d4921d.png",u="/assets/Pasted-image-20220113184632-fb10cc5e.png",r="/assets/Pasted-image-20220123201518-c84f307a.png",d="/assets/Pasted-image-20220208212926-6cc54db9.png",k="/assets/Pasted-image-20220208212639-fc5b8acd.png",v="/assets/Pasted-image-20220123201540-7a5868c3.png",m="/assets/Pasted-image-20220208095317-a295b99a.png",g="/assets/Pasted-image-20220209213934-c2a062e0.png",b="/assets/Pasted-image-20220210152643-fd00a96c.png",h="/assets/Pasted-image-20220211112344-0abb869e.png",y="/assets/Pasted-image-20220211112418-41086e04.png",f="/assets/image-20220212182352085-18a53643.png",q="/assets/image-20220212182643187-d87c6d0b.png",x="/assets/image-20220212182527329-91fd63df.png",w="/assets/1606114688649-e6502134-88b3-48db-a463-04c23eddedc7-d2959646.png",_="/assets/Pasted-image-20220211185507-69e91fe9.png",S="/assets/Pasted-image-20220211184411-a6d53d1d.png",M="/assets/image-20220213104442175-848c2f84.png",C="/assets/image-20220213162358459-bdcc226c.png",j="/assets/1606280937533-504d0889-b893-4a01-af68-2fc31ffce9fc-979497b1.png",E="/assets/image-20220213185828035-0bb2037c.png",P="/assets/1606366100317-5e0199fa-6709-4d32-bce3-bb262e2e5e6a-25f2cd1e.png",R="/assets/image-20220213204428550-6b6fd4dd.png",I="/assets/image-20220214164955876-6ba16446.png",T="/assets/image-20220214172141255-fde64d26.png",B="/assets/image-20220214172024257-21647716.png",A="/assets/image-20220214214703956-90502c3f.png",F={},H=n("h1",{id:"springboot2-课堂笔记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#springboot2-课堂笔记","aria-hidden":"true"},"#"),s(" SpringBoot2 课堂笔记")],-1),W={href:"https://www.bilibili.com/video/BV19K4y1L7MT",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.yuque.com/atguigu/springboot",target:"_blank",rel:"noopener noreferrer"},z=e('<h1 id="_05、web-开发" tabindex="-1"><a class="header-anchor" href="#_05、web-开发" aria-hidden="true">#</a> 05、Web 开发</h1><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1、springmvc-自动配置概览" tabindex="-1"><a class="header-anchor" href="#_1、springmvc-自动配置概览" aria-hidden="true">#</a> 1、SpringMVC 自动配置概览</h2><p>Spring Boot provides auto-configuration for Spring MVC that <strong>works well with most applications.(大多场景我们都无需自定义配置)</strong></p><p>The auto-configuration adds the following features on top of Spring’s defaults:</p>',5),V=n("li",null,[n("p",null,[s("Inclusion of "),n("code",null,"ContentNegotiatingViewResolver"),s(" and "),n("code",null,"BeanNameViewResolver"),s(" beans.")])],-1),D=n("li",null,[n("ul",null,[n("li",null,"内容协商视图解析器和 BeanName 视图解析器")])],-1),L={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content",target:"_blank",rel:"noopener noreferrer"},U=e("<li><ul><li>静态资源（包括 webjars）</li></ul></li><li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.</p></li><li><ul><li>自动注册 <code>Converter，GenericConverter，Formatter </code></li></ul></li>",3),N=n("code",null,"HttpMessageConverters",-1),G={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters",target:"_blank",rel:"noopener noreferrer"},J=n("li",null,[n("ul",null,[n("li",null,[s("支持 "),n("code",null,"HttpMessageConverters"),s(" （后来我们配合内容协商理解原理）")])])],-1),X=n("code",null,"MessageCodesResolver",-1),K={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-message-codes",target:"_blank",rel:"noopener noreferrer"},Y=n("li",null,[n("ul",null,[n("li",null,[s("自动注册 "),n("code",null,"MessageCodesResolver"),s(" （国际化用）")])])],-1),Q=n("li",null,[n("p",null,[s("Static "),n("code",null,"index.html"),s(" support.")])],-1),Z=n("li",null,[n("ul",null,[n("li",null,"静态 index.html 页支持")])],-1),$=n("code",null,"Favicon",-1),nn={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon",target:"_blank",rel:"noopener noreferrer"},sn=n("li",null,[n("ul",null,[n("li",null,[s("自定义 "),n("code",null,"Favicon")])])],-1),an=n("code",null,"ConfigurableWebBindingInitializer",-1),tn={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer",target:"_blank",rel:"noopener noreferrer"},en=n("li",null,[n("ul",null,[n("li",null,[s("自动使用 "),n("code",null,"ConfigurableWebBindingInitializer"),s(" ，（DataBinder 负责将请求数据绑定到 JavaBean 上）")])])],-1),pn=e(`<h2 id="_2、简单功能分析" tabindex="-1"><a class="header-anchor" href="#_2、简单功能分析" aria-hidden="true">#</a> 2、简单功能分析</h2><h3 id="_1、静态资源访问" tabindex="-1"><a class="header-anchor" href="#_1、静态资源访问" aria-hidden="true">#</a> 1、静态资源访问</h3><ul><li>静态资源路径下 index.html</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>favicon 默认为 icon 的图标</li></ul><h2 id="_3、请求参数处理" tabindex="-1"><a class="header-anchor" href="#_3、请求参数处理" aria-hidden="true">#</a> 3、请求参数处理</h2><h3 id="rest-风格" tabindex="-1"><a class="header-anchor" href="#rest-风格" aria-hidden="true">#</a> Rest 风格</h3><h4 id="开启-rest-功能" tabindex="-1"><a class="header-anchor" href="#开启-rest-功能" aria-hidden="true">#</a> 开启 REST 功能</h4><p>页面表单的 REST 功能，HiddenHttpMethodFilter</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code> <span class="token key atrule">spring</span><span class="token punctuation">:</span>  
  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>  
    <span class="token key atrule">hiddenmethod</span><span class="token punctuation">:</span>  
      <span class="token key atrule">filter</span><span class="token punctuation">:</span>  
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#开启页面表单的REST功能</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试-rest-风格" tabindex="-1"><a class="header-anchor" href="#测试-rest-风格" aria-hidden="true">#</a> 测试 REST 风格</h4><p>测试 REST 风格.html</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>get<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>REST-GET 提交<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>REST-POST 提交<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_method<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>delete<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_m<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>delete<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>REST-DELETE 提交<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_method<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hidden<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>PUT<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>REST-PUT 提交<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HelloController.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>  
    <span class="token comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)  </span>
 <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token string">&quot;GET-张三&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.POST)  </span>
 <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token string">&quot;POST-张三&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.PUT)  </span>
 <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">putUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token string">&quot;PUT-张三&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token comment">//    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.DELETE)  </span>
 <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">)</span>  
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token string">&quot;DELETE-张三&quot;</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rest-原理" tabindex="-1"><a class="header-anchor" href="#rest-原理" aria-hidden="true">#</a> REST 原理</h4><p>（表单提交要使用 REST 的时候）</p><ul><li>浏览器 <ul><li>只提供 <code>GET</code> 和 <code>POST</code> 方法，需要用包装类，重写 <code>getMethod</code> 方法，调用的是 <code>requestWrapper</code></li></ul></li><li>使用客户端工具 <ul><li>如 PostMan 直接发送 <code>PUT</code>，、<code>DELETE</code> 等方式请求，无需 filter。</li></ul></li></ul><h4 id="拓展点-修改方法名" tabindex="-1"><a class="header-anchor" href="#拓展点-修改方法名" aria-hidden="true">#</a> 拓展点：修改方法名</h4><p>修改 <code>&lt;input name=&quot;_method&quot; &gt;</code> 中的方法名为 <code>&lt;input name=&quot;_m&quot; &gt;</code></p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>修改方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Bean</span>  
 <span class="token keyword">public</span> <span class="token class-name">HiddenHttpMethodFilter</span> <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">HiddenHttpMethodFilter</span> methodFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        methodFilter<span class="token punctuation">.</span><span class="token function">setMethodParam</span><span class="token punctuation">(</span><span class="token string">&quot;_m&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> methodFilter<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="普通参数与基本注解" tabindex="-1"><a class="header-anchor" href="#普通参数与基本注解" aria-hidden="true">#</a> 普通参数与基本注解</h3><h3 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h3><ul><li>@PathVariable、获取路径变量</li><li>@RequestHeader、获取请求头</li><li>@ModelAttribute、？？？获取模式属性</li><li>@RequestParam、获取请求参数</li><li>@MatrixVariable、获取矩阵变量，见下方</li><li>@CookieValue、获取 cookie</li><li>@RequestBody、获取请求体</li></ul><blockquote><p>矩阵变量</p></blockquote><p>在 cookie 被禁用的情况下使用，一般用来携带 jsessionid</p><ul><li>/cars/{path}?xxx=xxx&amp;aaa=ccc queryString 查询字符串。@RequestParam；</li><li>/cars/sell;low=34;brand=byd,audi,yd ；矩阵变量</li></ul><p>页面开发，cookie 禁用了，session 里面的内容怎么使用；</p><ul><li>session.set(a,b)---&gt; jsessionid ---&gt; cookie ----&gt; 每次发请求携带。</li></ul><p>url 重写：/abc;jsesssionid=xxxx 把 cookie 的值使用矩阵变量的方式进行传递.</p><ul><li>/boss/1/2</li><li>/boss/1;age=20/2;age=20</li></ul><h4 id="自定义对象参数" tabindex="-1"><a class="header-anchor" href="#自定义对象参数" aria-hidden="true">#</a> 自定义对象参数：</h4><p>可以自动类型转换与格式化，可以级联封装。</p><p>SpringBoot 定义了许多参数解析器，数据类型转换类，和绑定类，将参数内容转换成需要的 JavaBean。</p><h3 id="pojo-封装过程" tabindex="-1"><a class="header-anchor" href="#pojo-封装过程" aria-hidden="true">#</a> POJO 封装过程</h3><ul><li><strong>ServletModelAttributeMethodProcessor</strong></li></ul><p>添加自定义的内容转化，利用自定义的 <code>convert</code> 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1、WebMvcConfigurer定制化SpringMVC的功能</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">webMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      registry<span class="token punctuation">.</span><span class="token function">addConverter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Pet</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

          <span class="token annotation punctuation">@Override</span>
          <span class="token keyword">public</span> <span class="token class-name">Pet</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// 啊猫,3</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token class-name">Pet</span> pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  pet<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  pet<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">return</span> pet<span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
              <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>converter 的 <code>canWrite</code> 和 <code>canRead</code> 进行判断 mediaType 类型，再分别对应处理</p><h2 id="_4、数据响应与内容协商" tabindex="-1"><a class="header-anchor" href="#_4、数据响应与内容协商" aria-hidden="true">#</a> 4、数据响应与内容协商</h2><h3 id="_1、响应-json" tabindex="-1"><a class="header-anchor" href="#_1、响应-json" aria-hidden="true">#</a> 1、响应 JSON</h3><h4 id="_1-1、jackson-jar-responsebody" tabindex="-1"><a class="header-anchor" href="#_1-1、jackson-jar-responsebody" aria-hidden="true">#</a> 1.1、jackson.jar+@ResponseBody</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>web场景自动引入了json场景
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>handleReturnValue</strong>：处理解析器</p><p>根据返回值类型选择对应的<strong>返回值解析器</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> publuc <span class="token keyword">void</span> <span class="token class-name">ServletInvocableHandlerMethod</span><span class="token punctuation">{</span>
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">.</span><span class="token function">handleReturnValue</span><span class="token punctuation">(</span>
                    returnValue<span class="token punctuation">,</span> <span class="token function">getReturnValueType</span><span class="token punctuation">(</span>returnValue<span class="token punctuation">)</span><span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> webRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2、httpmessageconverter-原理" tabindex="-1"><a class="header-anchor" href="#_1-2、httpmessageconverter-原理" aria-hidden="true">#</a> 1.2、HTTPMessageConverter 原理</h4><p><strong>消息转换器(HTTPMessageConverter)</strong></p><ol><li><strong>内容协商</strong>：（浏览器默认会以请求头的方式告诉服务器他能接受什么样的内容类型）</li><li>服务器最终根据自己自身的能力，决定服务器能生产出什么样内容类型的数据</li></ol><p>最终 MappingJackson2HttpMessageConverter 把对象转为 JSON（利用底层的 jackson 的 objectMapper 转换的）</p><h3 id="_2、内容协商" tabindex="-1"><a class="header-anchor" href="#_2、内容协商" aria-hidden="true">#</a> 2、内容协商</h3><ul><li>postman 分别测试返回 json 和 xml <ul><li>只需要改变请求头中 Accept 字段。Http 协议中规定的，告诉服务器本客户端可以接收的数据类型。</li><li>Accept: application/xml</li></ul></li></ul><p>进行内容协商的 最佳匹配媒体类型 ，for 循环遍历</p><p>用 支持 将对象转为最佳匹配媒体类型的 converter,调用它进行转化。</p><h3 id="_3、自定义-messageconverter" tabindex="-1"><a class="header-anchor" href="#_3、自定义-messageconverter" aria-hidden="true">#</a> 3、自定义 MessageConverter</h3><p><strong><code>contentNegotiationManager </code> 内容协商管理器 默认使用基于请求头的策略</strong><strong><code>HeaderContentNegotiationStrategy</code> 确定客户端可以接收的内容类型</strong></p><p>开启浏览器参数方式内容协商功能</p><p>为了方便内容协商，开启基于请求参数的内容协商功能</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">contentnegotiation</span><span class="token punctuation">:</span>
      <span class="token key atrule">favor-parameter</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment">#开启请求参数内容协商模式</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',62),on={href:"http://localhost:8080/test/person?format=json",target:"_blank",rel:"noopener noreferrer"},cn={href:"http://localhost:8080/test/person?format=xml",target:"_blank",rel:"noopener noreferrer"},ln=e(`<p><strong>优缺点：</strong></p><ul><li>优点：不受浏览器约束</li><li>缺点：需要额外的传递 format 参数，URL 变得冗余繁琐，缺少了 REST 的简洁风范。还有个缺点便是：还需手动显示开启。</li></ul><p>响应数据</p><p>SpringMVC 的什么功能。一个入口给容器中添加一个 WebMvcConfigurer</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、浏览器发请求直接返回xml [application/xmL]       jacksonXmlconverter
2、如果是ajax请求返回 json [application/json] jacksonJsonconverter 
3、如果硅谷app发请求，返回自定义协议数据[appliaction/x-guigu] xxxxConverter

步骤：
1、添加自定义的MessageConverter进系统底层
2、系统底层就会统计出所有MessageConverter能操作哪些类型
3、客户端内容协商[guigu---&gt;guigu] * * @return  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码 WebMvcConfigurer</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">extendMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GuiguMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GuiguMessageConverter</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**  
 * 自定义的Converter
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GuiguMessageConverter</span> <span class="token keyword">implements</span> <span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canRead</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canWrite</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> mediaType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> clazz<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
  
    <span class="token doc-comment comment">/**  
     * 服务器要统计所有MessageConverter都能写出哪些内容类型
     * application/x-guigu
     * <span class="token keyword">@return</span>  
     */</span>  
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MediaType</span><span class="token punctuation">&gt;</span></span> <span class="token function">getSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">parseMediaTypes</span><span class="token punctuation">(</span><span class="token string">&quot;application/x-guigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
      
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">HttpInputMessage</span> inputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotReadableException</span> <span class="token punctuation">{</span>  
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
      
    <span class="token annotation punctuation">@Override</span>  
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> contentType<span class="token punctuation">,</span> <span class="token class-name">HttpOutputMessage</span> outputMessage<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">HttpMessageNotWritableException</span> <span class="token punctuation">{</span>  
        <span class="token comment">//自定义协议数据的写出  </span>
        <span class="token class-name">String</span> data <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;;&quot;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;;&quot;</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getBirth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
      
        <span class="token comment">//写出去  </span>
        <span class="token class-name">OutputStream</span> body <span class="token operator">=</span> outputMessage<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            body<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>作业：以参数确定返回的媒体类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**  
 * 自定义内容协商策略
 * <span class="token keyword">@param</span> <span class="token parameter">configurer</span>  
 */</span>  
 <span class="token annotation punctuation">@Override</span>  
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token class-name">ContentNegotiationConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">//Map&lt;String, MediaType&gt; mediaTypes  </span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">&gt;</span></span> mediaTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    mediaTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    mediaTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    mediaTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;gg&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token function">parseMediaType</span><span class="token punctuation">(</span><span class="token string">&quot;application/x-guigu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">//指定支持解析哪些参数对应的哪些媒体类型  </span>
    <span class="token class-name">ParameterContentNegotiationStrategy</span> parameterStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterContentNegotiationStrategy</span><span class="token punctuation">(</span>mediaTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token comment">//parameterStrategy.setParameterName(&quot;ff&quot;);  </span>
    
    <span class="token comment">//基于请求头的内容协商策略</span>
    <span class="token class-name">HeaderContentNegotiationStrategy</span> headeStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeaderContentNegotiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
  
    configurer<span class="token punctuation">.</span><span class="token function">strategies</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>parameterStrategy<span class="token punctuation">,</span> headeStrategy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>该自定义会导致 解析请求头的内容协商出现 <code>*/*</code>，因为这是直接覆盖内容协商管理器导致的，无论请求头是什么，都会默认匹配 json</p><figure><img src="'+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>有可能我们添加的自定义的功能会覆盖默认很多功能，导致一些默认的功能失效。</strong> 需要自己看源代码进行补充了</p><h2 id="_5、视图解析与模版引擎" tabindex="-1"><a class="header-anchor" href="#_5、视图解析与模版引擎" aria-hidden="true">#</a> 5、视图解析与模版引擎</h2><p>视图解析：<strong>SpringBoot 默认不支持 JSP，需要引入第三方模板引擎技术实现页面渲染。</strong></p><p>从 <code>DispatcherServlet</code> 开始</p><h3 id="_1、视图解析原理流程" tabindex="-1"><a class="header-anchor" href="#_1、视图解析原理流程" aria-hidden="true">#</a> 1、视图解析原理流程</h3><ol><li><strong><mark>目标方法处理的过程中，所有数据都会被放在 ModelAndViewContainer 里面</mark>。包括数据和视图地址</strong></li><li><strong>方法的参数是一个自定义类型对象（从请求参数中确定的），把他重新放在 <code>ModelAndViewContainer</code></strong></li><li><strong>任何目标方法执行完成以后都会返回 <code>ModelAndView</code>（数据和视图地址）。</strong></li><li><strong><code>processDispatchResult</code> 处理派发结果（页面改如何响应）</strong></li></ol><ul><li>1、<code>render(mv, request, response)</code>; 进行页面渲染逻辑 <ul><li>1、根据方法的 String 返回值得到 View 对象【定义了页面的渲染逻辑】 <ul><li>1、所有的视图解析器尝试是否能根据当前返回值得到 View 对象</li><li>2、得到了 redirect:/main.html --&gt; Thymeleaf new <strong>RedirectView()</strong></li><li>3、ContentNegotiationViewResolver 里面包含了下面所有的视图解析器，内部还是利用下面所有视图解析器得到视图对象。</li><li>4、view.render(mv.getModelInternal(), request, response); 视图对象调用自定义的 render 进行页面渲染工作 <ul><li><strong>RedirectView 如何渲染【重定向到一个页面】</strong></li><li><strong>1、获取目标 url 地址</strong></li><li><strong>2、response.sendRedirect(encodedURL);</strong></li></ul></li></ul></li></ul></li></ul><p><strong>视图解析：</strong></p><ul><li>返回值以 forward: 开始： new InternalResourceView(forwardUrl); --&gt; 转发 request.getRequestDispatcher(path).forward(request, response);</li><li>返回值以 redirect: 开始： new RedirectView() --》 render 就是重定向</li><li>返回值是普通字符串： new ThymeleafView（）---&gt;</li></ul><p>后续：自定义视图解析器+自定义视图</p><h2 id="_6、拦截器" tabindex="-1"><a class="header-anchor" href="#_6、拦截器" aria-hidden="true">#</a> 6、拦截器</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**  
 * 1、编写一个拦截器实现HandlerInterceptor接口
 * 2、拦截器注册到容器中（实现webMvcConfigurer的addInterceptors)
 * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】 
 */</span>
<span class="token annotation punctuation">@Configuration</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>  
    <span class="token annotation punctuation">@Override</span>  
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token comment">//所有请求都被拦截，包括静态资源  </span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">,</span>  <span class="token string">&quot;/fonts/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/image/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放行的请求  </span>
 <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_7、文件上传" tabindex="-1"><a class="header-anchor" href="#_7、文件上传" aria-hidden="true">#</a> 7、文件上传</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 文件上传测试
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormTestController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/form_layouts&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">forem_layouts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;form/form_layouts&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * MultipartFile 自动封装上传过来的文件
     *
     * <span class="token keyword">@param</span> <span class="token parameter">email</span>
     * <span class="token keyword">@param</span> <span class="token parameter">username</span>
     * <span class="token keyword">@param</span> <span class="token parameter">headerImg</span>
     * <span class="token keyword">@param</span> <span class="token parameter">photos</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span><span class="token comment">//从请求参数中获取值</span>
                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>
                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;headerImg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> headerImg<span class="token punctuation">,</span>
                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;photos&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span><span class="token punctuation">[</span><span class="token punctuation">]</span> photos<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headerImg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//保存到文件服务器，OSS服务器，然后异步更新</span>
            <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> headerImg<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//可以再拼接一个UUID防止文件名重复</span>
            headerImg<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\cache\\\\&quot;</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>photos<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> photo <span class="token operator">:</span> photos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headerImg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> originalFilename <span class="token operator">=</span> headerImg<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    headerImg<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\cache\\\\&quot;</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> <span class="token string">&quot;main&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>application.properties</code> 设置文件传输的大小，每次请求多个文件总大小</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.servlet.multipart.max-file-size</span><span class="token punctuation">=</span><span class="token value attr-value">10MB  </span>
<span class="token key attr-name">spring.servlet.multipart.max-request-size</span><span class="token punctuation">=</span><span class="token value attr-value">100MB</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>form_layouts.html</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{/upload}<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-group<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInputEmail1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>email<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInputEmail1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Enter email<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-group<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInputPassword1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInputPassword1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-group<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInputFile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>头像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>headerImg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInputFile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-group<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInputFile<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>生活照<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>photos<span class="token punctuation">&quot;</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>  
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Check me out  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-primary<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>3、自动配置原理</strong></p><p><strong>文件上传自动配置类-MultipartAutoConfiguration-MultipartProperties</strong></p><ul><li>自动配置好了 <strong>StandardServletMultipartResolver 【文件上传解析器】</strong></li><li><strong>原理步骤</strong><ul><li><strong>1、请求进来使用文件上传解析器判断（<code>isMultipart</code>）并封装（<code>resolveMultipart</code>，返回 <code>MultipartHttpServletRequest</code>）文件上传请求</strong></li><li><strong>2、参数解析器来解析请求中的文件内容封装成 MultipartFile</strong></li><li><strong>3、将 request 中文件信息封装为一个 Map</strong>；<code>MultiValueMap&lt;String, MultipartFile&gt;</code></li></ul></li></ul><p>工具类 FileCopyUtils。实现文件流的拷贝</p><h2 id="_8、异常处理" tabindex="-1"><a class="header-anchor" href="#_8、异常处理" aria-hidden="true">#</a> 8、异常处理</h2><h3 id="_1、错误处理" tabindex="-1"><a class="header-anchor" href="#_1、错误处理" aria-hidden="true">#</a> 1、错误处理</h3><ol><li><p>默认规则</p><ul><li>默认情况下，Spring Boot 提供 <code>/error</code> 处理所有错误的映射</li><li>对于机器客户端，它将生成 JSON 响应，其中包含错误，HTTP 状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以 HTML 格式呈现相同的数据</li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>要对其进行自定义，添加</strong><code>View</code> <strong>解析为</strong><code>error</code></p><p>要完全替换默认行为，可以实现 <code>ErrorController</code> 并注册该类型的 Bean 定义，或添加 <code>ErrorAttributes 类型的组件 </code> 以使用现有机制但替换其内容。</p><p>error/下的 4xx，5xx 页面会被自动解析；</p></li></ol><h3 id="_2、定制错误处理逻辑" tabindex="-1"><a class="header-anchor" href="#_2、定制错误处理逻辑" aria-hidden="true">#</a> 2、定制错误处理逻辑</h3><ul><li><p>自定义错误页</p><ul><li>error/404.html error/5xx.html；有精确的错误状态码页面就匹配精确，没有就找 4xx.html；如果都没有就触发白页</li></ul></li><li><p>3 种自定义设置异常</p><ul><li><p><code>@ControllerAdvice</code>+<code>@ExceptionHandler</code> 处理全局异常；底层是 <code>ExceptionHandlerExceptionResolver</code> 支持的</p><figure><img src="'+f+`" alt="image-20220212182352085" tabindex="0" loading="lazy"><figcaption>image-20220212182352085</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 处理整个web controller的异常
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">//处理异常</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleArithException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;异常是：{}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;login&quot;</span><span class="token punctuation">;</span>  <span class="token comment">//视图地址，也可以返回 ModelAndView</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>ErrorViewResolver</strong> 实现自定义处理异常；</p><figure><img src="`+q+`" alt="image-20220212182643187" tabindex="0" loading="lazy"><figcaption>image-20220212182643187</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">,</span> reason <span class="token operator">=</span> <span class="token string">&quot;用户数量太多&quot;</span><span class="token punctuation">)</span> <span class="token comment">//403错误</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTooManyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">UserTooManyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>自定义实现 HandlerExceptionResolver 处理异常；可以作为默认的全局异常处理规则</p><figure><img src="`+x+`" alt="image-20220212182527329" tabindex="0" loading="lazy"><figcaption>image-20220212182527329</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//提高优先级，不然会被默认的错误处理解决掉，轮不到自定义错误</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">HIGHEST_PRECEDENCE</span><span class="token punctuation">)</span><span class="token comment">//优先级：数字越小，优先级越高</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerHandlerExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
                                         <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>
                                         <span class="token class-name">Object</span> handler<span class="token punctuation">,</span>
                                         <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">511</span><span class="token punctuation">,</span> <span class="token string">&quot;我喜欢的错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><figure><img src="`+w+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure></li></ul><h3 id="_3、异常处理步骤流程" tabindex="-1"><a class="header-anchor" href="#_3、异常处理步骤流程" aria-hidden="true">#</a> 3、异常处理步骤流程</h3><ol><li><p>执行目标方法，目标方法运行期间有任何异常都会被 catch、而且标志当前请求结束；并且用 dispatchException</p></li><li><p>进入视图解析流程（页面渲染？） processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</p></li><li><p>mv = processHandlerException；处理 handler 发生的异常，处理完成返回 ModelAndView；</p></li><li><p>遍历所有的 handlerExceptionResolvers，看谁能处理当前异常【HandlerExceptionResolver 处理器异常解析器】 <img src="'+_+'" alt="" loading="lazy"></p></li><li><p><strong>系统默认的 异常解析器；</strong><img src="'+S+'" alt="" loading="lazy"></p></li></ol><p><code>DefaultErrorAttributes</code> 先来处理异常。把异常信息保存到 <code>request</code> 域，并且返回 <code>null</code>； 6. <strong>默认没有任何人能处理异常，所以异常会被抛出</strong></p><pre><code>1.  如果没有任何人能处理最终底层就会发送 `/error` 请求。会被底层的 `BasicErrorController` 处理\n2.  解析错误视图；**遍历所有的 ErrorViewResolver 看谁能解析。**\n    ![](./assets/Pasted%20image%2020220211184424.png)\n3.  默认的 `DefaultErrorViewResolver` ,作用是把响应状态码作为错误页的地址，`error/500.html`\n4.  模板引擎最终响应这个页面 `error/500.html`\n</code></pre><h2 id="_9、web-原生组件注入-servlet、filter、listener" tabindex="-1"><a class="header-anchor" href="#_9、web-原生组件注入-servlet、filter、listener" aria-hidden="true">#</a> 9、Web 原生组件注入（Servlet、Filter、Listener）</h2><h3 id="_1、使用-servlet-api-使用下面一种方式更方便" tabindex="-1"><a class="header-anchor" href="#_1、使用-servlet-api-使用下面一种方式更方便" aria-hidden="true">#</a> 1、使用 Servlet API（使用下面一种方式更方便）</h3><ul><li><p><code>@ServletComponentScan(basePackages = &quot;com.atguigu.admin&quot;)</code>:指定原生 Servlet 组件都放在那里</p></li><li><p><code>@WebServlet(urlPatterns = &quot;/my&quot;)</code>：效果：直接响应，<strong>没有经过 Spring 的拦截器？</strong></p><ul><li>1、<code>MyServlet</code> --&gt;<code>/my</code></li><li>2、<code>DispatcherServlet</code> --&gt;<code>/</code></li><li>多个 Servlet 都能处理到同一层路径精确优先原则</li></ul></li><li><p><code>@WebFilter(urlPatterns=({&quot;/css/*&quot;,&quot;/images/*&quot;})</code></p></li><li><p><code>@WebListener</code></p></li></ul><figure><img src="'+M+`" alt="image-20220213104442175" tabindex="0" loading="lazy"><figcaption>image-20220213104442175</figcaption></figure><p>在 <code>Boot05WebAdminApplication</code> 中添加包扫描</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.atguigu.admin&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boot05WebAdminApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Boot05WebAdminApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>package com.atguigu.admin.servlet;</code> 包下面创建三个文件</p><ul><li><p><code>MyServlet</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;/my&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;666666&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>MyFilter</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/css/*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/images/*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;MyFilter初始化完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;MyFilter工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;MyFilter销毁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>MySwervletContextListener</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@WebListener</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySwervletContextListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletContextListener</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">contextInitialized</span><span class="token punctuation">(</span>sce<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;MySwervletContextListener监听到项目初始化完成&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletContextListener</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">contextDestroyed</span><span class="token punctuation">(</span>sce<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;MySwervletContextListener监听到项目销毁&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2、使用-registrationbean" tabindex="-1"><a class="header-anchor" href="#_2、使用-registrationbean" aria-hidden="true">#</a> 2、使用 RegistrationBean</h3><p>与上面的方法效果一样，也是注入原生 Servlet</p><figure><img src="`+C+`" alt="image-20220213162358459" tabindex="0" loading="lazy"><figcaption>image-20220213162358459</figcaption></figure><p>MyRegistConfig</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// proxyBeanMethods = true :保证依赖的组件始终是单实例的</span>
<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRegistConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">myServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyServlet</span> myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span> <span class="token string">&quot;my01&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my02&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyFilter</span> myFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        return new FilterRegistrationBean(myFilter,myServlet());</span>
        <span class="token class-name">FilterRegistrationBean</span> filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span>myFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;/my&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/css/*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">ServletListenerRegistrationBean</span> <span class="token function">myListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MySwervletContextListener</span> mySwervletContextListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySwervletContextListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token punctuation">(</span>mySwervletContextListener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10、嵌入式-servlet-容器" tabindex="-1"><a class="header-anchor" href="#_10、嵌入式-servlet-容器" aria-hidden="true">#</a> 10、嵌入式 Servlet 容器</h2><h3 id="_1、切换嵌入式-servlet-容器" tabindex="-1"><a class="header-anchor" href="#_1、切换嵌入式-servlet-容器" aria-hidden="true">#</a> 1、切换嵌入式 Servlet 容器</h3><ul><li><p>默认支持的 webServer</p></li><li><ul><li><code>Tomcat</code>, <code>Jetty</code>, or <code>Undertow</code></li><li><code>ServletWebServerApplicationContext 容器启动寻找 ServletWebServerFactory 并引导创建服务器 </code></li></ul></li><li><p>切换服务器</p><figure><img src="`+j+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2、定制-servlet-容器" tabindex="-1"><a class="header-anchor" href="#_2、定制-servlet-容器" aria-hidden="true">#</a> 2、定制 Servlet 容器</h3><p>3 种实现方式</p><ul><li>实现 <code>WebServerFactoryCustomizer &lt;ConfigurableServletWebServerFactory&gt;</code><ul><li>把配置文件的值和**<code>ServletWebServerFactory</code> 进行绑定**</li></ul></li><li>修改配置文件 <strong><code>server.xxx</code></strong></li><li>直接自定义 <strong><code>ConfigurableServletWebServerFactory</code></strong></li></ul><p><code>xxxxxCustomizer****</code>：定制化器，可以改变 xxxx 的默认规则******</p><h2 id="_11、定制化原理" tabindex="-1"><a class="header-anchor" href="#_11、定制化原理" aria-hidden="true">#</a> 11、定制化原理</h2><h3 id="_1、定制化的常见方式" tabindex="-1"><a class="header-anchor" href="#_1、定制化的常见方式" aria-hidden="true">#</a> 1、定制化的常见方式</h3><ul><li><p>修改配置文件；</p></li><li><p><strong>xxxxxCustomizer；</strong></p></li><li><p><strong>编写自定义的配置类 xxxConfiguration；+@Bean 替换、增加容器中默认组件；视图解析器</strong></p></li><li><p><mark><strong>Web 应用 编写一个配置类实现</strong> WebMvcConfigurer 即可定制化 web 功能</mark>；+ @Bean 给容器中再扩展一些组件。（非常常用的一种方式）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//@EnableWebMvc :全面接管，所有内容需要自己配置</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span>
  <span class="token comment">//通过重写方法来达到定制化目的</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>@EnableWebMvc + WebMvcConfigurer —— @Bean 可以全面接管 SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能。举例：</p><figure><img src="`+E+`" alt="image-20220213185828035" tabindex="0" loading="lazy"><figcaption>image-20220213185828035</figcaption></figure></li><li><p>原理</p><ul><li>1、<code>WebMvcAutoConfiguration</code> 默认的 SpringMVC 的自动配置功能类。静态资源、欢迎页.....</li><li>2、一旦使用 <code>@EnableWebMvc</code> 、。会 <code>@Import(DelegatingWebMvcConfiguration.class)</code></li><li>3、<strong>DelegatingWebMvcConfiguration</strong> 的 作用，只保证 SpringMVC 最基本的使用 <ul><li>把所有系统中的 <code>WebMvcConfigurer</code> 拿过来。所有功能的定制都是这些 <code>WebMvcConfigurer</code> 合起来一起生效</li><li>自动配置了一些非常底层的组件。<strong>RequestMappingHandlerMapping</strong>、这些组件依赖的组件都是从容器中获取</li><li><strong>public class</strong> DelegatingWebMvcConfiguration <strong>extends</strong> <strong>WebMvcConfigurationSupport</strong></li></ul></li><li>4、<strong>WebMvcAutoConfiguration</strong> 里面的配置要能生效 必须 <code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code></li><li>5、<code>@EnableWebMvc</code> 导致了 <strong>WebMvcAutoConfiguration 没有生效。</strong></li></ul></li><li><p>... ...</p></li></ul><h3 id="_2、原理分析套路" tabindex="-1"><a class="header-anchor" href="#_2、原理分析套路" aria-hidden="true">#</a> 2、原理分析套路</h3><p><mark><strong>场景 starter</strong></mark> <strong>- xxxxAutoConfiguration - 导入 xxx 组件 - 绑定 xxxProperties --</strong> <strong><mark>绑定配置文件项</mark></strong></p><h1 id="_06、数据访问" tabindex="-1"><a class="header-anchor" href="#_06、数据访问" aria-hidden="true">#</a> 06、数据访问</h1><h2 id="_1、sql" tabindex="-1"><a class="header-anchor" href="#_1、sql" aria-hidden="true">#</a> 1、SQL</h2><h3 id="_1、数据源的自动配置-hikaridatasource" tabindex="-1"><a class="header-anchor" href="#_1、数据源的自动配置-hikaridatasource" aria-hidden="true">#</a> 1、数据源的自动配置-<strong>HikariDataSource</strong></h3><h4 id="_1、导入-jdbc-场景" tabindex="-1"><a class="header-anchor" href="#_1、导入-jdbc-场景" aria-hidden="true">#</a> 1、导入 JDBC 场景</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+P+`" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>数据库驱动？</p><p>为什么导入 JDBC 场景，官方不导入驱动？官方不知道我们接下要操作什么数据库。</p><p>数据库版本和驱动版本对应</p><p>默认版本：&lt;mysql.version&gt;8.0.22&lt;/mysql.version&gt;</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!--&lt;version&gt;5.1.49&lt;/version&gt;--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
想要修改版本
1、直接依赖引入具体版本（maven的就近依赖原则）
2、重新声明版本（maven的属性的就近优先原则）
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">&gt;</span></span>5.1.49<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、分析自动配置-过时-有-spring-boot-star-的配置场景" tabindex="-1"><a class="header-anchor" href="#_2、分析自动配置-过时-有-spring-boot-star-的配置场景" aria-hidden="true">#</a> 2、分析自动配置（过时，有 Spring-boot-star 的配置场景）</h4><p>1、自动配置的类</p><ul><li><p>DataSourceAutoConfiguration ： 数据源的自动配置</p></li><li><ul><li>修改数据源相关的配置：<strong>spring.datasource</strong></li><li><strong>数据库连接池的配置，是自己容器中没有 DataSource 才自动配置的</strong></li></ul></li><li><ul><li>底层配置好的连接池是：<strong>HikariDataSource</strong></li></ul></li><li><p>DataSourceTransactionManagerAutoConfiguration： 事务管理器的自动配置</p></li><li><p>JdbcTemplateAutoConfiguration： <strong>JdbcTemplate 的自动配置，可以来对数据库进行 crud</strong></p></li><li><ul><li>可以修改这个配置项@ConfigurationProperties(prefix = <strong>&quot;spring.jdbc&quot;</strong>) 来修改 JdbcTemplate</li><li>@Bean@Primary JdbcTemplate；容器中有这个组件</li></ul></li><li><p>JndiDataSourceAutoConfiguration： jndi 的自动配置</p></li><li><p>XADataSourceAutoConfiguration： 分布式事务相关的</p></li></ul><p>2、修改配置项</p><p><code>@ConfigurationProperties (&quot;spring.datasource&quot;)</code> 从配置文件中，获取绑定数据源</p><figure><img src="`+R+`" alt="image-20220213204428550" tabindex="0" loading="lazy"><figcaption>image-20220213204428550</figcaption></figure><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_account
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、使用-druid-数据源" tabindex="-1"><a class="header-anchor" href="#_2、使用-druid-数据源" aria-hidden="true">#</a> 2、使用 Druid 数据源</h3><p>1、druid 官方 github 地址</p>`,94),un={href:"https://github.com/alibaba/druid",target:"_blank",rel:"noopener noreferrer"},rn=e(`<p>整合第三方技术的两种方式</p><ul><li>自定义（略过）</li><li>找 starter（推荐）</li></ul><h4 id="_1、引入-druid-starter" tabindex="-1"><a class="header-anchor" href="#_1、引入-druid-starter" aria-hidden="true">#</a> 1、引入 druid-starter</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、配置示例" tabindex="-1"><a class="header-anchor" href="#_3、配置示例" aria-hidden="true">#</a> 3、配置示例</h4><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_account
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver

    <span class="token key atrule">druid</span><span class="token punctuation">:</span>
      <span class="token key atrule">aop-patterns</span><span class="token punctuation">:</span> com.atguigu.admin.*  <span class="token comment">#监控SpringBean</span>
      <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall     <span class="token comment"># 底层开启功能，stat（sql监控），wall（防火墙）</span>

      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>   <span class="token comment"># 配置监控页功能</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> admin
        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> admin
        <span class="token key atrule">resetEnable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

      <span class="token key atrule">web-stat-filter</span><span class="token punctuation">:</span>  <span class="token comment"># 监控web</span>
        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">urlPattern</span><span class="token punctuation">:</span> <span class="token string">&#39;/*&#39;</span>
        <span class="token key atrule">exclusions</span><span class="token punctuation">:</span> <span class="token string">&#39;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&#39;</span> <span class="token comment">#默认开启</span>

      <span class="token key atrule">filter</span><span class="token punctuation">:</span>
        <span class="token key atrule">stat</span><span class="token punctuation">:</span>    <span class="token comment"># 对上面filters里面的stat的详细配置</span>
          <span class="token key atrule">slow-sql-millis</span><span class="token punctuation">:</span> <span class="token number">1000</span>
          <span class="token key atrule">logSlowSql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">wall</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">config</span><span class="token punctuation">:</span>
            <span class="token key atrule">drop-table-allow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),dn={href:"https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter",target:"_blank",rel:"noopener noreferrer"},kn={href:"https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},vn=n("h3",{id:"_3、整合-mybatis-操作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3、整合-mybatis-操作","aria-hidden":"true"},"#"),s(" 3、整合 MyBatis 操作")],-1),mn={href:"https://github.com/mybatis",target:"_blank",rel:"noopener noreferrer"},gn=e(`<p>导入 starter，第三方的： *-spring-boot-starter</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1、配置模式" tabindex="-1"><a class="header-anchor" href="#_1、配置模式" aria-hidden="true">#</a> 1、配置模式</h4><p><code>application.yaml</code> 中配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 配置mybatis规则</span>
<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token comment"># config-location: classpath:mybatis/mybatis-config.xml  #全局配置文件位置</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/<span class="token important">*.xml</span>  <span class="token comment">#sql映射文件位置</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span> <span class="token comment"># 指定mybatis全局配置文件中的相关配置项</span>
    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    
  可以不写全局；配置文件，所有全局配置文件的配置都放在configuration配置项中即可
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>mybatis-config.xml</code>：全局配置文件</p><p><code>mapper</code> 文件夹下面，sql 映射文件位置</p><p>Mapper 接口---&gt;绑定 xml</p><figure><img src="`+I+`" alt="image-20220214164955876" tabindex="0" loading="lazy"><figcaption>image-20220214164955876</figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
        <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>
        <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.atguigu.admin.mapper.AccountMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--    public Account getAcct(Long id); --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getAcct<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.atguigu.admin.bean.Account<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select * from  account_tbl where  id=#{id}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实践步骤</p><ul><li><p>导入 mybatis 官方 starter</p></li><li><p>编写 mapper 接口。标注@Mapper 注解，也可以在启动类上加上@MapperScan 替换@Mapper</p></li><li><p>编写 sql 映射文件并绑定 mapper 接口</p></li><li><p>在 application.yaml 中指定 Mapper 配置文件的位置，以及指定全局配置文件的信息 （建议；<strong>配置在 mybatis.configuration</strong>）</p></li></ul><h4 id="_2、注解模式" tabindex="-1"><a class="header-anchor" href="#_2、注解模式" aria-hidden="true">#</a> 2、注解模式</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CityMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from city where id=#{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">City</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">City</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、混合模式" tabindex="-1"><a class="header-anchor" href="#_3、混合模式" aria-hidden="true">#</a> 3、混合模式</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--    public void insert(City city);--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insert<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        insert into  city(\`name\`,\`state\`,\`country\`) values(#{name},#{state},#{country})
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+T+'" alt="image-20220214172141255" tabindex="0" loading="lazy"><figcaption>image-20220214172141255</figcaption></figure><p><strong>等价与</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用注解方式获得插入后自增字段</span>\n<span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into  city(`name`,`state`,`country`) values(#{name},#{state},#{country})&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">City</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+B+'" alt="image-20220214172024257" tabindex="0" loading="lazy"><figcaption>image-20220214172024257</figcaption></figure><p><strong>最佳实战：</strong></p><ul><li>引入 mybatis-starter</li><li><strong>配置 application.yaml 中，指定 mapper-location 位置即可</strong></li><li>编写 Mapper 接口并标注 <code>@Mapper</code> 注解</li><li>简单方法直接注解方式</li><li>复杂方法编写 mapper.xml 进行绑定映射</li><li><code>@MapperScan(&quot;com.atguigu.admin.mapper&quot;)</code> 简化（加在 <code>application</code> 主入口上方），其他的接口就可以不用标注 <code>@Mapper</code> 注解</li></ul><h3 id="_4、整合-mybatis-plus-完成-crud" tabindex="-1"><a class="header-anchor" href="#_4、整合-mybatis-plus-完成-crud" aria-hidden="true">#</a> 4、整合 MyBatis-Plus 完成 CRUD</h3><h4 id="_1、什么是-mybatis-plus" tabindex="-1"><a class="header-anchor" href="#_1、什么是-mybatis-plus" aria-hidden="true">#</a> 1、什么是 MyBatis-Plus</h4>',24),bn={href:"https://github.com/baomidou/mybatis-plus",target:"_blank",rel:"noopener noreferrer"},hn={href:"http://www.mybatis.org/mybatis-3/",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://baomidou.com/",target:"_blank",rel:"noopener noreferrer"},fn=e(`<p>建议安装 <strong>MybatisX</strong> 插件</p><h4 id="_2、整合-mybatis-plus" tabindex="-1"><a class="header-anchor" href="#_2、整合-mybatis-plus" aria-hidden="true">#</a> 2、整合 MyBatis-Plus</h4><p>有了 <code>MyBatis-Plus</code> 启动场景之后，不需要 <code>MyBatis</code> 启动场景了</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动配置</p><ul><li><p>MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定。<strong><code>mybatis-plus：xxx </code> 就是对 mybatis-plus 的定制</strong></p></li><li><p><strong>SqlSessionFactory 自动配置好。底层是容器中默认的数据源</strong></p></li><li><p><strong>mapperLocations 自动配置好的。有默认值。</strong> <code>classpath*:/mapper/**/*.xml</code>；<strong>任意包的类路径下的所有 mapper 文件夹下任意路径下的所有 xml 都是 sql 映射文件。 建议以后 sql 映射文件，放在 mapper 下</strong></p></li><li><p><strong>容器中也自动配置好了</strong> <code>SqlSessionTemplate</code></p></li><li><p><strong>@Mapper 标注的接口也会被自动扫描；建议直接</strong> <code>@MapperScan(&quot;com.atguigu.admin.mapper&quot;)</code> 批量扫描就行</p></li></ul><p><strong>优点：</strong></p><ul><li>只需要我们的 Mapper 继承 <strong>BaseMapper</strong> 就可以拥有 crud 能力</li></ul><h4 id="_3、crud-功能" tabindex="-1"><a class="header-anchor" href="#_3、crud-功能" aria-hidden="true">#</a> 3、CRUD 功能</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/user/delete/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span>
                             <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;pn&quot;</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token class-name">Integer</span> pn<span class="token punctuation">,</span>
                             <span class="token class-name">RedirectAttributes</span> ra<span class="token punctuation">)</span><span class="token punctuation">{</span>

        userService<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        ra<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;pn&quot;</span><span class="token punctuation">,</span>pn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;redirect:/dynamic_table&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/dynamic_table&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">dynamic_table</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;pn&quot;</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> pn<span class="token punctuation">,</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//表格内容的遍历</span>
<span class="token comment">//        response.sendError</span>
<span class="token comment">//     List&lt;User&gt; users = Arrays.asList(new User(&quot;zhangsan&quot;, &quot;123456&quot;),</span>
<span class="token comment">//                new User(&quot;lisi&quot;, &quot;123444&quot;),</span>
<span class="token comment">//                new User(&quot;haha&quot;, &quot;aaaaa&quot;),</span>
<span class="token comment">//                new User(&quot;hehe &quot;, &quot;aaddd&quot;));</span>
<span class="token comment">//        model.addAttribute(&quot;users&quot;,users);</span>
<span class="token comment">//</span>
<span class="token comment">//        if(users.size()&gt;3){</span>
<span class="token comment">//            throw new UserTooManyException();</span>
<span class="token comment">//        }</span>
        <span class="token comment">//从数据库中查出user表中的用户进行展示</span>

        <span class="token comment">//构造分页参数</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>pn<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用page进行分页</span>
        <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userPage <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//        userPage.getRecords()</span>
<span class="token comment">//        userPage.getCurrent()</span>
<span class="token comment">//        userPage.getPages()</span>

        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span>userPage<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token string">&quot;table/dynamic_table&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承 <code>IService</code> 和 <code>ServiceImpl</code> 会帮我们写一些单表操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、定制化" tabindex="-1"><a class="header-anchor" href="#_4、定制化" aria-hidden="true">#</a> 4、定制化</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;user_tb1&quot;</span><span class="token punctuation">)</span> <span class="token comment">//如果表名和类名不同，使用该注解</span>

<span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">//表示该字段在数据库中不存在</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+A+'" alt="image-20220214214703956" tabindex="0" loading="lazy"><figcaption>image-20220214214703956</figcaption></figure>',15);function qn(xn,wn){const a=l("ExternalLinkIcon");return o(),c("div",null,[H,n("ul",null,[n("li",null,[s("B 站视频： "),n("a",W,[s("尚硅谷雷神 SpringBoot2 零基础入门 springboot 全套完整版（spring boot2）"),t(a)])]),n("li",null,[s("语雀： "),n("a",O,[s("SpringBoot2 核心技术与响应式编程"),t(a)])])]),z,n("ul",null,[V,D,n("li",null,[n("p",null,[s("Support for serving static resources, including support for WebJars (covered "),n("a",L,[s("later in this document"),t(a)]),s(" )).")])]),U,n("li",null,[n("p",null,[s("Support for "),N,s(" (covered "),n("a",G,[s("later in this document"),t(a)]),s(" ).")])]),J,n("li",null,[n("p",null,[s("Automatic registration of "),X,s(" (covered "),n("a",K,[s("later in this document"),t(a)]),s(" ).")])]),Y,Q,Z,n("li",null,[n("p",null,[s("Custom "),$,s(" support (covered "),n("a",nn,[s("later in this document"),t(a)]),s(" ).")])]),sn,n("li",null,[n("p",null,[s("Automatic use of a "),an,s(" bean (covered "),n("a",tn,[s("later in this document"),t(a)]),s(" ).")])]),en]),pn,n("p",null,[s("发请求： "),n("a",on,[s("http://localhost:8080/test/person?format=json"),t(a)])]),n("p",null,[n("a",cn,[s("http://localhost:8080/test/person?format=xml"),t(a)])]),ln,n("p",null,[n("a",un,[s("https://github.com/alibaba/druid"),t(a)])]),rn,n("ul",null,[n("li",null,[n("p",null,[n("a",dn,[s("SpringBoot 配置示例"),t(a)])])]),n("li",null,[n("p",null,[n("a",kn,[s("配置项列表"),t(a)])])])]),vn,n("p",null,[n("a",mn,[s("https://github.com/mybatis"),t(a)])]),gn,n("p",null,[n("a",bn,[s("MyBatis-Plus"),t(a)]),s(" （简称 MP）是一个 "),n("a",hn,[s("MyBatis"),t(a)]),s(" 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。")]),n("p",null,[n("a",yn,[s("mybatis plus 官网"),t(a)])]),fn])}const Sn=p(F,[["render",qn],["__file","SpringBoot2课堂笔记.html.vue"]]);export{Sn as default};
