import{_ as n,X as s,Y as a,a2 as t}from"./framework-c2b0d87a.js";const e={},p=t(`<p>在 Nestjs 中我们使用了大量装饰器 decorator ，所以 Nestjs 也允许我们去自定义装饰器。</p><h3 id="案例-1-自定义权限装饰器" tabindex="-1"><a class="header-anchor" href="#案例-1-自定义权限装饰器" aria-hidden="true">#</a> 案例 1 自定义权限装饰器</h3><p>生成装饰器</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nest g d [name]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> SetMetadata <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Role</span> <span class="token operator">=</span> <span class="token punctuation">(</span>role<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>role<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">SetMetadata</span><span class="token punctuation">(</span><span class="token string">&#39;role&#39;</span><span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例-2-自定义参数装饰器返回一个-url" tabindex="-1"><a class="header-anchor" href="#案例-2-自定义参数装饰器返回一个-url" aria-hidden="true">#</a> 案例 2 自定义参数装饰器返回一个 url</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> SetMetadata<span class="token punctuation">,</span>createParamDecorator<span class="token punctuation">,</span>ExecutionContext <span class="token punctuation">,</span>applyDecorators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span>Request<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;express&#39;</span>


<span class="token keyword">export</span> <span class="token keyword">const</span> ReqUrl <span class="token operator">=</span> <span class="token function">createParamDecorator</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>ctx<span class="token operator">:</span>ExecutionContext<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> req <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">switchToHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-function"><span class="token function">getRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span>Request<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> req<span class="token punctuation">.</span>url
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合装饰器" tabindex="-1"><a class="header-anchor" href="#组合装饰器" aria-hidden="true">#</a> 组合装饰器</h3><p>可以把多个装饰器合并成一个</p>`,9),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(e,[["render",c],["__file","22-decorator自定义装饰器.html.vue"]]);export{u as default};
