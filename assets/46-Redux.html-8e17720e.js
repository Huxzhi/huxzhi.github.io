const e=JSON.parse('{"key":"v-4b58596e","path":"/code/react/React18/46-Redux.html","title":"46-Redux","lang":"zh-CN","frontmatter":{"category":["react18"],"date":"2023-03-18 16:21","title":"46-Redux","updated":"2023-03-20 16:36","description":"46-Redux A Predictable State Container for JS Apps 是 Redux 官方对于 Redux 的描述，这句话可以这样翻译“一个专为 JS 应用设计的可预期的状态容器”，简单来说 Redux 是一个可预测的状态容器 Redux 可以理解为是 reducer 和 context 的结合体，使用 Redux 即可管理复杂的 state，又可以在不同的组件间方便的共享传递 state。 状态（State） state 直译过来就是状态。state 不过就是一个变量，一个用来记录（组件）状态的变量。组件可以根据不同的状态值切换为不同的显示，比如，用户登录和没登录看到页面应该是不同的，那么用户的登录与否就应该是一个状态。再比如，数据加载与否，显示的界面也应该不同，那么数据本身就是一个状态。换句话说，状态控制了页面的如何显示。","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/react/React18/46-Redux.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"46-Redux"}],["meta",{"property":"og:description","content":"46-Redux A Predictable State Container for JS Apps 是 Redux 官方对于 Redux 的描述，这句话可以这样翻译“一个专为 JS 应用设计的可预期的状态容器”，简单来说 Redux 是一个可预测的状态容器 Redux 可以理解为是 reducer 和 context 的结合体，使用 Redux 即可管理复杂的 state，又可以在不同的组件间方便的共享传递 state。 状态（State） state 直译过来就是状态。state 不过就是一个变量，一个用来记录（组件）状态的变量。组件可以根据不同的状态值切换为不同的显示，比如，用户登录和没登录看到页面应该是不同的，那么用户的登录与否就应该是一个状态。再比如，数据加载与否，显示的界面也应该不同，那么数据本身就是一个状态。换句话说，状态控制了页面的如何显示。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://huxzhi.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T16:11:07.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"46-Redux"}],["meta",{"property":"article:published_time","content":"2023-03-18T16:21:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T16:11:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"46-Redux\\",\\"image\\":[\\"https://huxzhi.github.io/\\"],\\"datePublished\\":\\"2023-03-18T16:21:00.000Z\\",\\"dateModified\\":\\"2023-03-22T16:11:07.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"状态（State）","slug":"状态-state","link":"#状态-state","children":[]},{"level":2,"title":"容器（Container）","slug":"容器-container","link":"#容器-container","children":[]},{"level":2,"title":"可预测（Predictable）","slug":"可预测-predictable","link":"#可预测-predictable","children":[]},{"level":2,"title":"为什么是 Redux？","slug":"为什么是-redux","link":"#为什么是-redux","children":[]},{"level":2,"title":"使用 Redux","slug":"使用-redux","link":"#使用-redux","children":[]}],"git":{"createdTime":1679501467000,"updatedTime":1679501467000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":1}]},"readingTime":{"minutes":2.9,"words":871},"filePathRelative":"code/react/React18/46-Redux.md","localizedDate":"2023年3月18日","excerpt":"<h1> 46-Redux</h1>\\n<p>A Predictable State Container for JS Apps 是 Redux 官方对于 Redux 的描述，这句话可以这样翻译“一个专为 JS 应用设计的可预期的状态容器”，简单来说 Redux 是一个可预测的状态容器</p>\\n<p><mark>Redux 可以理解为是 reducer 和 context 的结合体</mark>，使用 Redux 即可管理复杂的 state，又可以在不同的组件间方便的共享传递 state。</p>\\n<h2> 状态（State）</h2>\\n<p><a href=\\"/code/react/React18/18-useState%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F.html\\" target=\\"blank\\">state</a> 直译过来就是状态。state 不过就是一个变量，一个用来记录（组件）状态的变量。组件可以根据不同的状态值切换为不同的显示，比如，用户登录和没登录看到页面应该是不同的，那么用户的登录与否就应该是一个状态。再比如，数据加载与否，显示的界面也应该不同，那么数据本身就是一个状态。换句话说，状态控制了页面的如何显示。</p>","copyright":{},"autoDesc":true}');export{e as data};
