import{_ as o,X as p,Y as l,Z as n,$ as s,a1 as e,a2 as t,G as i}from"./framework-c2b0d87a.js";const c="/assets/image-2023-02-03_20-02-34-176-25-entity实体-1ff55615.png",r={},d=t(`<p>3## 什么是实体</p><p>实体是一个映射到数据库表的类。 你可以通过定义一个新类来创建一个实体，并用<code>@Entity()</code>来标记：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>Entity<span class="token punctuation">,</span>Column<span class="token punctuation">,</span>PrimaryGeneratedColumn<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;typeorm&#39;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryGeneratedColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    id<span class="token operator">:</span><span class="token builtin">number</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    name<span class="token operator">:</span><span class="token builtin">string</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    password<span class="token operator">:</span><span class="token builtin">string</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    age<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="主列" tabindex="-1"><a class="header-anchor" href="#主列" aria-hidden="true">#</a> 主列</h2><h3 id="自动递增的主键" tabindex="-1"><a class="header-anchor" href="#自动递增的主键" aria-hidden="true">#</a> 自动递增的主键</h3><div class="language-TypeScript line-numbers-mode" data-ext="TypeScript"><pre class="language-TypeScript"><code>@PrimaryGeneratedColumn()
id:number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动递增-uuid" tabindex="-1"><a class="header-anchor" href="#自动递增-uuid" aria-hidden="true">#</a> 自动递增 uuid</h3><div class="language-TypeScript line-numbers-mode" data-ext="TypeScript"><pre class="language-TypeScript"><code>@PrimaryGeneratedColumn(&quot;uuid&quot;)
id:number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列类型" tabindex="-1"><a class="header-anchor" href="#列类型" aria-hidden="true">#</a> 列类型</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span><span class="token string">&quot;varchar&quot;</span><span class="token punctuation">,</span>length<span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
password<span class="token operator">:</span> <span class="token builtin">string</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
age<span class="token operator">:</span> <span class="token builtin">number</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">CreateDateColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token operator">:</span><span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
create_time<span class="token operator">:</span>Date
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mysql-所有类型" tabindex="-1"><a class="header-anchor" href="#mysql-所有类型" aria-hidden="true">#</a> mysql 所有类型</h3><p><code>int, tinyint, smallint, mediumint, bigint, float, double, dec, decimal, numeric, date, datetime, timestamp, time, year, char, varchar, nvarchar, text, tinytext, mediumtext, blob, longtext, tinyblob, mediumblob, longblob, enum, json, binary, geometry, point, linestring, polygon, multipoint, multilinestring, multipolygon, geometrycollection</code></p><h3 id="自动生成列" tabindex="-1"><a class="header-anchor" href="#自动生成列" aria-hidden="true">#</a> 自动生成列</h3><div class="language-TypeScript line-numbers-mode" data-ext="TypeScript"><pre class="language-TypeScript"><code>@Generated(&#39;uuid&#39;)
uuid:string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="枚举列" tabindex="-1"><a class="header-anchor" href="#枚举列" aria-hidden="true">#</a> 枚举列</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span><span class="token string">&quot;enum&quot;</span><span class="token punctuation">,</span>
    <span class="token keyword">enum</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;4&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">&#39;1&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  xx<span class="token operator">:</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列选项" tabindex="-1"><a class="header-anchor" href="#列选项" aria-hidden="true">#</a> 列选项</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    type<span class="token operator">:</span><span class="token string">&quot;varchar&quot;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span><span class="token string">&quot;ipaaa&quot;</span><span class="token punctuation">,</span> <span class="token comment">//数据库表中的列名</span>
    nullable<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//在数据库中使列NULL或NOT NULL。 默认情况下，列是nullable：false</span>
    comment<span class="token operator">:</span><span class="token string">&quot;注释&quot;</span><span class="token punctuation">,</span>
    select<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">//定义在进行查询时是否默认隐藏此列。 设置为false时，列数据不会显示标准查询。 默认情况下，列是select：true</span>
    <span class="token keyword">default</span><span class="token operator">:</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">,</span> <span class="token comment">//加数据库级列的DEFAULT值</span>
    primary<span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//将列标记为主要列。 使用方式和@ PrimaryColumn相同。</span>
    update<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//指示&quot;save&quot;操作是否更新列值。如果为false，则只能在第一次插入对象时编写该值。 默认值为&quot;true&quot;</span>
    collation<span class="token operator">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token comment">//定义列排序规则。</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
ip<span class="token operator">:</span><span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="columnoptions-中可用选项列表" tabindex="-1"><a class="header-anchor" href="#columnoptions-中可用选项列表" aria-hidden="true">#</a> <code>ColumnOptions</code> 中可用选项列表：</h3>`,20),u=n("code",null,"type: ColumnType",-1),m={href:"https://typeorm.biunav.com/zh/entities.html#column-types",title:"上面",target:"_blank",rel:"noopener noreferrer"},k=n("li",null,[n("p",null,[n("code",null,"name: string"),s(" - 数据库表中的列名。 默认情况下，列名称是从属性的名称生成的。 你也可以通过指定自己的名称来更改它。")])],-1),v=n("li",null,[n("p",null,[n("code",null,"length: number"),s(" - 列类型的长度。 例如，如果要创建"),n("code",null,"varchar（150）"),s("类型，请指定列类型和长度选项。")])],-1),b=n("code",null,"width: number",-1),h={href:"https://dev.mysql.com/doc/refman/5.7/en/integer-types.html",title:"MySQL integer types(opens new window)",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"onUpdate: string",-1),y=n("code",null,"ON UPDATE",-1),f={href:"https://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html",title:"MySQL (opens new window)",target:"_blank",rel:"noopener noreferrer"},_=t("<li><p><code>nullable: boolean</code> - 在数据库中使列<code>NULL</code>或<code>NOT NULL</code>。 默认情况下，列是<code>nullable：false</code>。</p></li><li><p><code>update: boolean</code> - 指示&quot;save&quot;操作是否更新列值。如果为 false，则只能在第一次插入对象时编写该值。 默认值为&quot;true&quot;。</p></li><li><p><code>select: boolean</code> - 定义在进行查询时是否默认隐藏此列。 设置为<code>false</code>时，列数据不会显示标准查询。 默认情况下，列是<code>select：true</code></p></li><li><p><code>default: string</code> - 添加数据库级列的<code>DEFAULT</code>值。</p></li><li><p><code>primary: boolean</code> - 将列标记为主要列。 使用方式和<code>@ PrimaryColumn</code>相同。</p></li><li><p><code>unique: boolean</code> - 将列标记为唯一列（创建唯一约束）。</p></li><li><p><code>comment: string</code> - 数据库列备注，并非所有数据库类型都支持。</p></li><li><p><code>precision: number</code> - 十进制（精确数字）列的精度（仅适用于十进制列），这是为值存储的最大位数。仅用于某些列类型。</p></li><li><p><code>scale: number</code> - 十进制（精确数字）列的比例（仅适用于十进制列），表示小数点右侧的位数，且不得大于精度。 仅用于某些列类型。</p></li><li><p><code>zerofill: boolean</code> - 将<code>ZEROFILL</code>属性设置为数字列。 仅在 MySQL 中使用。 如果是<code>true</code>，MySQL 会自动将<code>UNSIGNED</code>属性添加到此列。</p></li><li><p><code>unsigned: boolean</code> - 将<code>UNSIGNED</code>属性设置为数字列。 仅在 MySQL 中使用。</p></li><li><p><code>charset: string</code> - 定义列字符集。 并非所有数据库类型都支持。</p></li><li><p><code>collation: string</code> - 定义列排序规则。</p></li><li><p><code>enum: string[]|AnyEnum</code> - 在<code>enum</code>列类型中使用，以指定允许的枚举值列表。 你也可以指定数组或指定枚举类。</p></li>",14),q=n("code",null,"asExpression: string",-1),w={href:"https://dev.mysql.com/doc/refman/5.7/en/create-table-generated-columns.html",title:"MySQL (opens new window)",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,'generatedType: "VIRTUAL"|"STORED"',-1),T={href:"https://dev.mysql.com/doc/refman/5.7/en/create-table-generated-columns.html",title:"MySQL (opens new window)",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,'hstoreType: "object"|"string"',-1),S=n("code",null,"HSTORE",-1),C={href:"https://typeorm.biunav.com/zh/%28https://www.postgresql.org/docs/9.6/static/hstore.html%29",title:"Postgres",target:"_blank",rel:"noopener noreferrer"},E=t("<li><p><code>array: boolean</code> - 用于可以是数组的 postgres 列类型（例如 <code>int []</code>）</p></li><li><ul><li><code>transformer: { from(value: DatabaseType): EntityType, to(value: EntityType): DatabaseType }</code> - 用于将任意类型<code>EntityType</code>的属性编组为数据库支持的类型<code>DatabaseType</code>。</li></ul></li>",2),N=t(`<h2 id="simple-array-列类型" tabindex="-1"><a class="header-anchor" href="#simple-array-列类型" aria-hidden="true">#</a> simple-array  列类型</h2><p>有一种称为<code>simple-array</code>的特殊列类型，它可以将原始数组值存储在单个字符串列中。 所有值都以逗号分隔 <mark>值不能包含 <code>,</code> 逗号</mark></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryGeneratedColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token string">&quot;simple-array&quot;</span><span class="token punctuation">)</span>
    names<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="simple-json-列类型" tabindex="-1"><a class="header-anchor" href="#simple-json-列类型" aria-hidden="true">#</a> simple-json 列类型</h2><p>还有一个名为<code>simple-json</code>的特殊列类型，它可以存储任何可以通过 JSON.stringify 存储在数据库中的值。 当你的数据库中没有 json 类型而你又想存储和加载对象，该类型就很有用了。 例如</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryGeneratedColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>

    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token string">&quot;simple-json&quot;</span><span class="token punctuation">)</span>
    profile<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> nickname<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function U(D,M){const a=i("ExternalLinkIcon");return p(),l("div",null,[d,n("ul",null,[n("li",null,[n("p",null,[u,s(" - 列类型。其中之一在"),n("a",m,[s("上面"),e(a)]),s(".")])]),k,v,n("li",null,[n("p",null,[b,s(" - 列类型的显示范围。 仅用于"),n("a",h,[s("MySQL integer types(opens new window)"),e(a)])])]),n("li",null,[n("p",null,[g,s(" - "),y,s("触发器。 仅用于  "),n("a",f,[s("MySQL (opens new window)"),e(a)]),s(".")])]),_,n("li",null,[n("p",null,[q,s(" - 生成的列表达式。 仅在 "),n("a",w,[s("MySQL (opens new window)"),e(a)]),s(" 中使用。")])]),n("li",null,[n("p",null,[x,s(" - 生成的列类型。 仅在 "),n("a",T,[s("MySQL (opens new window)"),e(a)]),s(" 中使用。")])]),n("li",null,[n("p",null,[L,s(" -返回"),S,s("列类型。 以字符串或对象的形式返回值。 仅在 "),n("a",C,[s("Postgres"),e(a)]),s(" 中使用。")])]),E]),N])}const Q=o(r,[["render",U],["__file","25-entity实体.html.vue"]]);export{Q as default};
