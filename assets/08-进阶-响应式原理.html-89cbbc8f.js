import{_ as n,X as s,Y as a,a3 as e}from"./framework-7bff9a9e.js";const t={},p=e(`<h1 id="未完成" tabindex="-1"><a class="header-anchor" href="#未完成" aria-hidden="true">#</a> 未完成</h1><h1 id="响应式原理" tabindex="-1"><a class="header-anchor" href="#响应式原理" aria-hidden="true">#</a> 响应式原理</h1><p>Vue2 使用的是 Object.defineProperty Vue3 使用的是 Proxy，对对象做了一个劫持</p><h2 id="_2-0-的不足" tabindex="-1"><a class="header-anchor" href="#_2-0-的不足" aria-hidden="true">#</a> 2.0 的不足</h2><p>对象只能劫持 设置好的数据，新增的数据需要 Vue.Set(xxx) 数组只能操作七种方法，修改某一项值无法劫持。</p><h2 id="reactive-和-effect-的实现" tabindex="-1"><a class="header-anchor" href="#reactive-和-effect-的实现" aria-hidden="true">#</a> reactive 和 effect 的实现</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> reactive <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>target<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token punctuation">{</span>
        <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> res  <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span> <span class="token keyword">as</span> object


          <span class="token keyword">return</span> res
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">,</span>receiver<span class="token punctuation">)</span>


           <span class="token keyword">return</span> res
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue3  的响应式原理依赖了 Proxy 这个核心 API，通过 Proxy 可以劫持对象的某些操作。</p>`,8),c=[p];function o(i,l){return s(),a("div",null,c)}const u=n(t,[["render",o],["__file","08-进阶-响应式原理.html.vue"]]);export{u as default};
