import{_ as n,X as s,Y as a,a2 as e}from"./framework-c2b0d87a.js";const p={},t=e(`<p>作为一个模块，我们不希望模块中所有的内容都暴露给外部 作为导入方，也不希望导入无用的变量</p><h1 id="export-导出" tabindex="-1"><a class="header-anchor" href="#export-导出" aria-hidden="true">#</a> export（导出）</h1><p>导出用来决定一个模块中哪些内容可以被外部查看</p><p>导出分成两种：</p><h2 id="默认导出" tabindex="-1"><a class="header-anchor" href="#默认导出" aria-hidden="true">#</a> 默认导出</h2><ul><li>语法：<br><code>export default xxx;</code></li><li>一个模块中只能有一个默认导出</li></ul><h2 id="命名导出" tabindex="-1"><a class="header-anchor" href="#命名导出" aria-hidden="true">#</a> 命名导出</h2><p><code>export const A;</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导出变量（命名导出）  </span>
<span class="token keyword">export</span> <span class="token keyword">let</span> name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN<span class="token punctuation">;</span>   
<span class="token keyword">export</span> <span class="token keyword">let</span> name1 <span class="token operator">=</span> …<span class="token punctuation">,</span> name2 <span class="token operator">=</span> …<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN<span class="token punctuation">;</span>   
​  
<span class="token comment">// 导出函数（命名导出）  </span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>  
​  
<span class="token comment">// 导出类（命名导出）  </span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>  
​  
<span class="token comment">// 导出一组  </span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span><span class="token punctuation">;</span>  
​  
<span class="token comment">// 重命名导出  </span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> variable1 <span class="token keyword">as</span> name1<span class="token punctuation">,</span> variable2 <span class="token keyword">as</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span><span class="token punctuation">;</span>  
​  
<span class="token comment">// 解构赋值后导出  </span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> <span class="token literal-property property">name2</span><span class="token operator">:</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>  
​  
<span class="token comment">// 默认导出  </span>
<span class="token keyword">export</span> <span class="token keyword">default</span> expression<span class="token punctuation">;</span>  
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">…</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span> <span class="token comment">// also class, function*  </span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">name1</span><span class="token punctuation">(</span><span class="token parameter">…</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span> <span class="token comment">// also class, function*  </span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> name1 <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">,</span> … <span class="token punctuation">}</span><span class="token punctuation">;</span>  
​  
<span class="token comment">// 聚合模块  </span>
<span class="token keyword">export</span> <span class="token operator">*</span> from …<span class="token punctuation">;</span> <span class="token comment">// 将其他模块中的全部内容导出（除了default）  </span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">as</span> name1 from …<span class="token punctuation">;</span> <span class="token comment">// ECMAScript® 2O20 将其他模块中的全部内容以指定别名导出  </span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span> from …<span class="token punctuation">;</span> <span class="token comment">// 将其他模块中的指定内容导出  </span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> import1 <span class="token keyword">as</span> name1<span class="token punctuation">,</span> import2 <span class="token keyword">as</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span> from …<span class="token punctuation">;</span> <span class="token comment">// 将其他模块中的指定内容重命名导出  </span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">,</span> … <span class="token punctuation">}</span> from …<span class="token punctuation">;</span>   
​
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="import-导入" tabindex="-1"><a class="header-anchor" href="#import-导入" aria-hidden="true">#</a> import（导入）</h1><ul><li>导入用来将外部模块中的内容导入到当前模块中</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--
    默认情况下，script标签中不能使用import语句，
        如果想让其支持模块化，必须设置script的type属性为module
--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">

    <span class="token comment">// 导入m1模块中的默认模块</span>
    <span class="token comment">// import haha from &#39;./m1.js&#39;;</span>

    <span class="token comment">// 导入m1模块中的b和c</span>
    <span class="token comment">// import {b as hello, c, obj, fn} from &#39;./m1.js&#39;;</span>

    <span class="token keyword">import</span> a<span class="token punctuation">,</span> <span class="token punctuation">{</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> fn<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./m1.js&#39;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="导入默认模块" tabindex="-1"><a class="header-anchor" href="#导入默认模块" aria-hidden="true">#</a> 导入默认模块</h2><p><code>import a from &#39;./m1.js&#39;;</code></p><ul><li>导入默认模块时，变量名可以自主指定，无需和模块中的变量名对应</li><li>在网页中导入模块时，模块的路径必须写完整（<code>/</code> ， <code>./</code> 或 <code>../</code> 开头，扩展名也得写上）</li></ul><h2 id="导入指定内容" tabindex="-1"><a class="header-anchor" href="#导入指定内容" aria-hidden="true">#</a> 导入指定内容</h2><p>用 <code>{}</code> 包裹，和模块中的变量名对应</p><p><code>import {b, c as} from &#39;./m1.js&#39;;</code></p><h3 id="以指定别名引入模块中的指定内容" tabindex="-1"><a class="header-anchor" href="#以指定别名引入模块中的指定内容" aria-hidden="true">#</a> 以指定别名引入模块中的指定内容</h3><p><code>import { export1 as alias1 } from &quot;module-name&quot;;</code></p><h2 id="导入默认及指定内容" tabindex="-1"><a class="header-anchor" href="#导入默认及指定内容" aria-hidden="true">#</a> 导入默认及指定内容</h2><p>第一逗号前是 默认导出，后面是 命名导出 <code>import a, {b, c, obj, fn} from &#39;./m1.js&#39;;</code></p>`,22),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","05-模块化.html.vue"]]);export{r as default};
