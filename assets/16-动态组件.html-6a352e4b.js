import{_ as n,W as s,X as a,a2 as e}from"./framework-cbb69da9.js";const t={},p=e(`<p>什么是动态组件 就是：让多个组件使用同一个挂载点，并动态切换，这就是动态组件。</p><blockquote><p>同样的功能实现还有 <code>v-if 标签</code> 和 <code>路由选择</code></p></blockquote><p>在挂载点使用 <code>component</code> 标签，然后使用 <code>v-bind :is=”组件”</code></p><h2 id="用法如下" tabindex="-1"><a class="header-anchor" href="#用法如下" aria-hidden="true">#</a> 用法如下</h2><p>引入组件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token constant">A</span> <span class="token keyword">from</span> <span class="token string">&#39;./A.vue&#39;</span>
<span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">&#39;./B.vue&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>A<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过 is 切换 A B 组件</p><p>使用场景 <code>tab切换</code> 居多</p><p>注意事项</p><p>1.在 Vue2 的时候 is 是通过组件名称切换的 在 Vue3 setup 是通过组件实例切换的</p><p>2.如果你把组件实例放到 Reactive Vue 会给你一个警告</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>runtime-core.esm-bundler.js:38 [Vue warn]: Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.
Component that was made reactive:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为 reactive 会进行 proxy 代理 而我们组件代理之后毫无用处 节省性能开销 推荐我们使用 shallowRef 或者 markRaw 跳过 proxy 代理</p><p>修改如下</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> comId <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span>AVue<span class="token punctuation">)</span>

<span class="token comment">//...</span>

<span class="token keyword">const</span> tab <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reactive</span><span class="token generic class-name"><span class="token operator">&lt;</span>Com<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;A组件&quot;</span><span class="token punctuation">,</span>
    comName<span class="token operator">:</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&quot;B组件&quot;</span><span class="token punctuation">,</span>
    comName<span class="token operator">:</span> <span class="token function">markRaw</span><span class="token punctuation">(</span><span class="token constant">B</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="兼容-vue2-的写法" tabindex="-1"><a class="header-anchor" href="#兼容-vue2-的写法" aria-hidden="true">#</a> 兼容 Vue2 的写法</h2><p>用字符串的形式，源码里面作了区分，if 判断</p>`,18),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","16-动态组件.html.vue"]]);export{r as default};
