const n=JSON.parse(`{"key":"v-6a8eb912","path":"/code/react/React18/06-%E7%B1%BB%E5%92%8Cthis.html","title":"06-类和this","lang":"zh-CN","frontmatter":{"category":["react18"],"date":"2023-02-15 21:28","title":"06-类和this","updated":"2023-03-20 16:36","description":"类 类是对象的模板 类决定了一个对象中有哪些属性和方法 使用 class 关键字来定义一个类 class Person{ // 可以直接在类中定义属性 name = '孙悟空'; age = 18; // 构造函数 // 当我们通过new创建对象时，实际上就是在调用类的构造函数 constructor(name, age) { // 将参数赋值给对象中的属性 // 在构造函数中，可以通过this来引用当前的对象 // 在构造函数中定义属性 this.name = name; this.age = age; } // 定义实例方法 run(){ console.log('我会跑！'); } }","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/react/React18/06-%E7%B1%BB%E5%92%8Cthis.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"06-类和this"}],["meta",{"property":"og:description","content":"类 类是对象的模板 类决定了一个对象中有哪些属性和方法 使用 class 关键字来定义一个类 class Person{ // 可以直接在类中定义属性 name = '孙悟空'; age = 18; // 构造函数 // 当我们通过new创建对象时，实际上就是在调用类的构造函数 constructor(name, age) { // 将参数赋值给对象中的属性 // 在构造函数中，可以通过this来引用当前的对象 // 在构造函数中定义属性 this.name = name; this.age = age; } // 定义实例方法 run(){ console.log('我会跑！'); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T16:11:07.000Z"}],["meta",{"property":"article:published_time","content":"2023-02-15T21:28:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T16:11:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06-类和this\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-15T21:28:00.000Z\\",\\"dateModified\\":\\"2023-03-22T16:11:07.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"类中的所有代码都会在严格模式下执行","slug":"类中的所有代码都会在严格模式下执行","link":"#类中的所有代码都会在严格模式下执行","children":[]},{"level":2,"title":"在类中方法的 this 不是固定的","slug":"在类中方法的-this-不是固定的","link":"#在类中方法的-this-不是固定的","children":[]}],"git":{"createdTime":1679501467000,"updatedTime":1679501467000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":1}]},"readingTime":{"minutes":2.52,"words":757},"filePathRelative":"code/react/React18/06-类和this.md","localizedDate":"2023年2月15日","excerpt":"<h1> 类</h1>\\n<ul>\\n<li>类是对象的模板</li>\\n<li>类决定了一个对象中有哪些属性和方法</li>\\n<li>使用 class 关键字来定义一个类</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 可以直接在类中定义属性</span>\\n    name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'孙悟空'</span><span class=\\"token punctuation\\">;</span>\\n    age <span class=\\"token operator\\">=</span> <span class=\\"token number\\">18</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 构造函数</span>\\n    <span class=\\"token comment\\">// 当我们通过new创建对象时，实际上就是在调用类的构造函数</span>\\n    <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name<span class=\\"token punctuation\\">,</span> age</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 将参数赋值给对象中的属性</span>\\n        <span class=\\"token comment\\">// 在构造函数中，可以通过this来引用当前的对象</span>\\n        <span class=\\"token comment\\">// 在构造函数中定义属性</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>age <span class=\\"token operator\\">=</span> age<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 定义实例方法</span>\\n    <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'我会跑！'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}`);export{n as data};
