const e=JSON.parse('{"key":"v-20cc73d5","path":"/code/nest-js/17-%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E5%99%A8ExceptionFilter.html","title":"17-异常拦截器ExceptionFilter","lang":"zh-CN","frontmatter":{"date":"2023-02-01 16:32","title":"17-异常拦截器ExceptionFilter","updated":"2023-05-13 22:56","description":"上一章我们讲了全局响应拦截，这一章我们来讲一下全局异常拦截器 全局异常拦截器 src/common 下面新建 filter.ts 让我们创建一个异常过滤器，它负责捕获作为 HttpException 类实例的异常，并为它们设置自定义响应逻辑。为此，我们需要访问底层平台 Request 和 Response。我们将访问 Request 对象，以便提取原始 url 并将其包含在日志信息中。我们将使用 Response.json() 方法，使用 Response 对象直接控制发送的响应。","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/nest-js/17-%E5%BC%82%E5%B8%B8%E6%8B%A6%E6%88%AA%E5%99%A8ExceptionFilter.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"17-异常拦截器ExceptionFilter"}],["meta",{"property":"og:description","content":"上一章我们讲了全局响应拦截，这一章我们来讲一下全局异常拦截器 全局异常拦截器 src/common 下面新建 filter.ts 让我们创建一个异常过滤器，它负责捕获作为 HttpException 类实例的异常，并为它们设置自定义响应逻辑。为此，我们需要访问底层平台 Request 和 Response。我们将访问 Request 对象，以便提取原始 url 并将其包含在日志信息中。我们将使用 Response.json() 方法，使用 Response 对象直接控制发送的响应。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://huxzhi.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-24T09:20:32.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"17-异常拦截器ExceptionFilter"}],["meta",{"property":"article:published_time","content":"2023-02-01T16:32:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-24T09:20:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"17-异常拦截器ExceptionFilter\\",\\"image\\":[\\"https://huxzhi.github.io/\\"],\\"datePublished\\":\\"2023-02-01T16:32:00.000Z\\",\\"dateModified\\":\\"2023-06-24T09:20:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"全局异常拦截器","slug":"全局异常拦截器","link":"#全局异常拦截器","children":[{"level":3,"title":"注册全局异常过滤器","slug":"注册全局异常过滤器","link":"#注册全局异常过滤器","children":[]}]}],"git":{"createdTime":1677862957000,"updatedTime":1687598432000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":4}]},"readingTime":{"minutes":0.82,"words":247},"filePathRelative":"code/nest-js/17-异常拦截器ExceptionFilter.md","localizedDate":"2023年2月1日","excerpt":"<p>上一章我们讲了全局响应拦截，这一章我们来讲一下全局异常拦截器</p>\\n<h2> 全局异常拦截器</h2>\\n<p>src/common 下面新建 <code>filter.ts</code></p>\\n<p>让我们创建一个异常过滤器，它负责捕获作为 <code>HttpException</code> 类实例的异常，并为它们设置自定义响应逻辑。为此，我们需要访问底层平台 <code>Request</code> 和 <code>Response</code>。我们将访问 <code>Request</code> 对象，以便提取原始 <code>url</code> 并将其包含在日志信息中。我们将使用 <code>Response.json()</code> 方法，使用 <code>Response</code> 对象直接控制发送的响应。</p>","copyright":{},"autoDesc":true}');export{e as data};
