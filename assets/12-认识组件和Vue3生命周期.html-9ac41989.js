import{_ as e,X as i,Y as l,a3 as a}from"./framework-7bff9a9e.js";const o="/assets/image-2023-01-02_19-23-40-680-12-认识组件和Vue3生命周期-12bdde3a.png",t="/assets/image-2023-01-02_19-25-14-252-12-认识组件和Vue3生命周期-f3cba1ce.png",n="/assets/image-2023-01-02_19-50-44-037-12-认识组件和Vue3生命周期-9d79629f.png",r={},d=a('<h1 id="组件基础-component" tabindex="-1"><a class="header-anchor" href="#组件基础-component" aria-hidden="true">#</a> 组件基础 component</h1><p>每一个 <code>.vue</code> 文件呢都可以充当组件来使用</p><p>每一个组件都可以复用</p><p>通常一个应用会以一棵嵌套的组件树的形式来组织:</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件</p><h2 id="父组件使用" tabindex="-1"><a class="header-anchor" href="#父组件使用" aria-hidden="true">#</a> 父组件使用</h2><p>引入子组件 <code>helloWorld</code> 然后直接就可以去当标签去使用 （切记组件名称不能与 <code>html</code> 元素标签名称一样） <img src="'+t+'" alt="" loading="lazy"></p><h1 id="组件的生命周期" tabindex="-1"><a class="header-anchor" href="#组件的生命周期" aria-hidden="true">#</a> 组件的生命周期</h1><p>简单来说就是一个组件从 创建 到 销毁 的过程称为 生命周期</p><p>在我们使用 Vue3 组合式 API 是没有  <code>beforeCreate 和 created 这两个生命周期的</code></p><p>beforeCreate created [[Setup 语法糖]]模式 是没有这两个生命周期的 setup 去代替</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>onBeforeMount() <ul><li>在组件 DOM 实际渲染安装之前调用。在这一步中，根元素还不存在。读不到 DOM</li></ul></li><li>onMounted() <ul><li>在组件的第一次渲染后调用，该元素现在可用，允许直接 DOM 访问</li></ul></li><li>onBeforeUpdate() <ul><li>数据更新时调用，发生在虚拟 DOM 打补丁之前。可以卸载一些用不到的数据</li></ul></li><li>onUpdated() <ul><li>DOM 更新后，updated 的方法即会调用。</li></ul></li><li>onBeforeUnmount() <ul><li>在卸载组件实例之前调用。在这个阶段，实例仍然是完全正常的。</li></ul></li><li>onUnmounted() <ul><li>卸载组件实例后调用。调用此钩子时，组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。</li></ul></li><li>renderTracked <ul><li>收集依赖，主要用于调试</li></ul></li><li>renderTriggered <ul><li>触发依赖，主要用于调试</li></ul></li></ul>',14),c=[d];function u(s,p){return i(),l("div",null,c)}const f=e(r,[["render",u],["__file","12-认识组件和Vue3生命周期.html.vue"]]);export{f as default};
