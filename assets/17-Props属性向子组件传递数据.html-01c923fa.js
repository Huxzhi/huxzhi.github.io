import{_ as p,X as e,Y as o,Z as n,$ as a,a1 as c,a2 as s,G as l}from"./framework-c2b0d87a.js";const u={},i=s(`<p>在使用组件时，可以通过向组件传递参数的形式来向组件传递数据,组件的参数需要通过属性传递，可以像这样向组件中传递参数</p><h2 id="在组件间-父组件可以通过-props-属性-向子组件传递数据" tabindex="-1"><a class="header-anchor" href="#在组件间-父组件可以通过-props-属性-向子组件传递数据" aria-hidden="true">#</a> 在组件间，父组件可以通过 props（属性）向子组件传递数据</h2><p>在函数组件中，属性就相当于是函数的参数，可以通过参数来访问 可以在函数组件的形参中定义一个 props，props 指向的是一个对象 它包含了父组件中传递的所有参数 console.log(props);</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">bgColor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>red<span class="token punctuation">&#39;</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>white<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>我是一个按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上边的案例中我们设置了两个属性，这些属性会被封装到一个对象中并作为参数传递给 Button 组件，只需要在 Button 组件中定义一个参数即可获取，通常这个参数我们会命名为 props，像这样：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token string">&#39;./Button.css&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">Button</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token literal-property property">backgroundColor</span><span class="token operator">:</span>props<span class="token punctuation">.</span>bgColor<span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span>props<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
​
<span class="token keyword">export</span> <span class="token keyword">default</span> Button<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),r={href:"http://rops.xxx",target:"_blank",rel:"noopener noreferrer"},k=s(`<h2 id="单向数据流-无法修改" tabindex="-1"><a class="header-anchor" href="#单向数据流-无法修改" aria-hidden="true">#</a> 单向数据流，无法修改</h2><p>还有一点一定要记住，<mark>props 中的属性是只读属性是无法修改的！</mark></p><h2 id="对象数组批量加载" tabindex="-1"><a class="header-anchor" href="#对象数组批量加载" aria-hidden="true">#</a> 对象数组批量加载</h2><p>模拟一组从服务器中加载的数据</p><p>注意：react 会警告 列表 没有 key，将 index 设置为 key，只是消除了警告，是无效操作，对性能提升没有作用。因为 index 会因为元素位置的改变而改变。起不到 diff 的作用</p><p>一般是 传输数据需要自带一个 id 属性</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>logsData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LogItem</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span> <span class="token attr-name">date</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>date<span class="token punctuation">}</span></span> <span class="token attr-name">desc</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>desc<span class="token punctuation">}</span></span> <span class="token attr-name">time</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>time<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将数据放入 JSX 中，结构更加简洁</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 将数据放入JSX中</span>
<span class="token keyword">const</span> logItemDate <span class="token operator">=</span> logsData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LogItem</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">date</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>date<span class="token punctuation">}</span></span> <span class="token attr-name">desc</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>desc<span class="token punctuation">}</span></span> <span class="token attr-name">time</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>time<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logs<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token punctuation">{</span>
        logItemDate
        <span class="token comment">// logsData.map(item =&gt; &lt;LogItem {...item}/&gt; )</span>
    <span class="token punctuation">}</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 对象数据和 props 属性名一致</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code>logsData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">LogItem</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>item<span class="token punctuation">}</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11);function d(m,g){const t=l("ExternalLinkIcon");return e(),o("div",null,[i,n("p",null,[n("a",r,[a("rops.xxx"),c(t)]),a(" 来访问外部传递进的属性，从而达到动态设置的目的。需要注意的是，标签体也可以设置为 props 的一个属性，叫做 children，可以通过 props.children 来获取标签体的内容。")]),k])}const x=p(u,[["render",d],["__file","17-Props属性向子组件传递数据.html.vue"]]);export{x as default};
