import{_ as n,W as s,X as a,a2 as e}from"./framework-cbb69da9.js";const p={},t=e(`<h1 id="声明式编程和命令式编程的比较" tabindex="-1"><a class="header-anchor" href="#声明式编程和命令式编程的比较" aria-hidden="true">#</a> 声明式编程和命令式编程的比较</h1><p>命令式编程（Imperative） vs声明式编程（ Declarative）</p><p>imperative-vs-declarative</p><h2 id="命令式编程" tabindex="-1"><a class="header-anchor" href="#命令式编程" aria-hidden="true">#</a> 命令式编程</h2><ul><li><strong>命令式编程</strong>：命令“机器”如何去做事情(how)，这样不管你想要的是什么(what)，它都会按照你的命令实现。</li><li><strong>声明式编程</strong>：告诉“机器”你想要的是什么(what)，让机器想出如何去做(how)。</li></ul><p>这么一想还真是，之前学习的都是命令式，需要考虑不同的初始条件和结束，兼容性很差，声明式 map，reduce，filter 把一些操作都抽象出来了，不再需要for循环了，没有初始条件，</p><p>所以声明式会写 很多 回调函数</p><p>也许你还不能明白，但有一个地方，你也许已经用到了声明式编程，那就是SQL。</p><p>你可以把SQL当做一个处理数据的声明式查询语言。完全用SQL写一个应用程序？这不可能。但如果是处理相互关联的数据集，它就显的无比强大了。</p><p>举个简单的例子，假设我们想让一个数组里的数值翻倍。</p><p>我们用命令式编程风格实现，像下面这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>

<span class="token keyword">var</span> doubled <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">var</span> newNumber <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span>
  doubled<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newNumber<span class="token punctuation">)</span>

<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">)</span> <span class="token comment">//=&gt; [2,4,6,8,10]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们直接遍历整个数组，取出每个元素，乘以二，然后把翻倍后的值放入新数组，每次都要操作这个 双倍数组，直到计算完所有元素。</p><p>而使用声明式编程方法，我们可以用  <code>Array.map</code>  函数，像下面这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>

<span class="token keyword">var</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">2</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">)</span> <span class="token comment">//=&gt; [2,4,6,8,10]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>map</code>  利用当前的数组创建了一个新数组，新数组里的每个元素都是经过了传入<code>map</code>的函数(这里是<code>function(n) { return n*2 }</code>)的处理。</p><p><code>map</code>函数所作的事情是将直接遍历整个数组的过程归纳抽离出来，让我们专注于描述我们想要的是什么(what)。注意，我们传入 map 的是一个纯函数；它不具有任何副作用(不会改变外部状态)，它只是接收一个数字，返回乘以二后的值。</p>`,17),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","imperative-vs-declarative.html.vue"]]);export{r as default};
