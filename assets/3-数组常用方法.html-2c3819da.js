import{_ as a,X as n,Y as s,a2 as e}from"./framework-c2b0d87a.js";const i="/assets/image-2023-03-24_16-10-13-277-3-数组常用方法-968f98ea.png",l={},t=e('<h1 id="_3-数组常用方法" tabindex="-1"><a class="header-anchor" href="#_3-数组常用方法" aria-hidden="true">#</a> 3-数组常用方法</h1><h2 id="数组常用方法-1" tabindex="-1"><a class="header-anchor" href="#数组常用方法-1" aria-hidden="true">#</a> 数组常用方法 1</h2><ol><li>join</li><li>split</li><li>push 向数组的末尾添加一个或更多元素，并返回新的长度。</li><li>pop 删除数组的最后一个元素并返回删除的元素。</li><li>unshift 方法可向数组的开头添加一个或更多元素，并返回新的长度。 <ol><li>改变数组的数目。</li></ol></li><li>shift 删除并返回数组的第一个元素。</li><li>reverse</li><li>sort</li><li>concat 方法用于连接两个或多个数组。该方法不会改变现有的数组，而是返回一个新的数组。</li><li>splice 用于添加或删除数组中的元素。 <ol><li>会改变原数组</li><li>删除元素，则返回一个元素的数组。 如果未删除任何元素，则返回空数组。第 1 个参数指定起始位置，第 2 个参数指定长度</li><li>要添加到数组的新元素 第 3 个参数</li></ol></li><li>slice 可从已有的数组中返回选定的元素 <ol><li>slice() 方法不会改变原始数组。</li><li>第 1 个参数起始，第 2 个参数结束位置</li></ol></li></ol><h2 id="遍历数组" tabindex="-1"><a class="header-anchor" href="#遍历数组" aria-hidden="true">#</a> 遍历数组</h2><p>都是接受一个 箭头函数 作为参数 ，数组中的每个元素都会执行这个函数</p><p>函数参数: 参数 描述 currentValue 必须。当前元素的值 index 可选。当前元素的索引值 arr 可选。当前元素属于的数组对象</p><ol><li>forEach 为数组里面每一项进行操作 <ol><li>没有返回值并不会被打破，</li></ol></li><li>map 对数组的每一项进行操作，并返回一个新数组， 新数组为 map 的 return 结果 <ol><li>没有 return 的元素，会返回 undefined</li></ol></li><li>filter 循环过滤符合条件的数组，返回一个新数组 <ol><li>return 为 true 的时候该元素被返回</li></ol></li><li>find 查找符合条件的元素返回，只会返回符合条件的第一个</li><li>findIndex 查找符合条件的元素返回，只会返回符合条件的第一个元素的下标</li><li>some 有真则真 返回布尔</li><li>every 有假则假 返回布尔</li><li>reduce 遍历</li></ol><h3 id="map-和-filter-结合" tabindex="-1"><a class="header-anchor" href="#map-和-filter-结合" aria-hidden="true">#</a> map 和 filter 结合</h3><figure><img src="'+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="reduce" tabindex="-1"><a class="header-anchor" href="#reduce" aria-hidden="true">#</a> reduce()</h3><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// reduce 累加</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>p<span class="token operator">+</span>n<span class="token punctuation">)</span> <span class="token comment">//21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>reduce() 可以作为一个高阶函数，用于函数的 compose</li><li><strong>注意:</strong> reduce() 对于空数组是不会执行回调函数的。</li></ol>`,13),o=[t];function r(p,c){return n(),s("div",null,o)}const d=a(l,[["render",r],["__file","3-数组常用方法.html.vue"]]);export{d as default};
