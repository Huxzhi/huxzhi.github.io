import{_ as a,X as e,Y as t,Z as p,$ as n,a1 as o,a3 as c,a2 as i,G as l}from"./framework-c2b0d87a.js";const u="/assets/image-2023-03-26_21-53-57-883-22-虚拟DOM详解和渲染过程-f9389c5a.png",d={},r=i('<h1 id="_22-虚拟-dom-详解" tabindex="-1"><a class="header-anchor" href="#_22-虚拟-dom-详解" aria-hidden="true">#</a> 22-虚拟 DOM 详解</h1><ol><li>虚拟 dom 是什么？ <ol><li>vue2.x 才有虚拟 dom</li><li>本质 js 对象 =&gt; 跨平台</li></ol></li><li>虚拟 dom 在 vue 中做了什么？ <ol><li>将真实 dom 转化虚拟 dom (js 对象）</li><li>更新的时候做对比</li></ol></li><li>虚拟 dom 是如何提升 vue 的渲染效率的？ <ol><li>局部更新（节点数据）</li><li>将直接操作 dom 的地方拿到两个 js 对象之中去做比较</li></ol></li></ol><h2 id="vue-的两大核心" tabindex="-1"><a class="header-anchor" href="#vue-的两大核心" aria-hidden="true">#</a> vue 的两大核心</h2><ol><li>组件化</li><li>数据驱动</li></ol><h2 id="vue-渲染" tabindex="-1"><a class="header-anchor" href="#vue-渲染" aria-hidden="true">#</a> vue 渲染</h2><p>vue 渲染有两条线，上面是第一次渲染，下面一条是更新的路线</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="虚拟-dom-转向真实-dom" tabindex="-1"><a class="header-anchor" href="#虚拟-dom-转向真实-dom" aria-hidden="true">#</a> 虚拟 dom 转向真实 dom</h3><ol><li>初始化 patch(container, vnode)</li><li>更新 update(vnode, newVnode)</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 初始化 patch(container, vnode)</span>
<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> tag <span class="token operator">=</span> vnode<span class="token punctuation">.</span>tag<span class="token punctuation">;</span> <span class="token comment">// 目标元素 ul</span>
  <span class="token keyword">let</span> attrs <span class="token operator">=</span> vnode<span class="token punctuation">.</span>attrs <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//属性</span>
  <span class="token keyword">let</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 子节点</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 1. 创建对应的dom</span>
  <span class="token keyword">let</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> attrName<span class="token punctuation">;</span>
  <span class="token comment">// 2. 给dom添加属性</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>attrName <span class="token keyword">in</span> attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>attrs<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> attrs<span class="token punctuation">[</span>attrName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 3. 将子元素添加到目标之上</span>
  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">childVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    elem<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">createElement</span><span class="token punctuation">(</span>childVnode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> elem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. 更新 update(vnode, newVnode)</span>
<span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> newVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> children <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> newChildren <span class="token operator">=</span> newVnode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">childrenVnode<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 循环的每一项</span>
    <span class="token keyword">let</span> newChildrenVnode <span class="token operator">=</span> newChildren<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 第一层没有变化</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>childrenVnode<span class="token punctuation">.</span>tag <span class="token operator">===</span> newChildrenVnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//深层次对比 =&gt; 递归</span>
      <span class="token function">updateChildren</span><span class="token punctuation">(</span>childrenVnode<span class="token punctuation">,</span> newChildrenVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">//两个tag不一样</span>
      <span class="token function">replaceNode</span><span class="token punctuation">(</span>childrenVnode<span class="token punctuation">,</span> newChildrenVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">replaceNode</span><span class="token punctuation">(</span><span class="token parameter">childrenVnode<span class="token punctuation">,</span> newChildrenVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//移除原来的元素</span>
  childrenVnode <span class="token operator">=</span> newChildrenVnode<span class="token punctuation">;</span>
  <span class="token function">createElement</span><span class="token punctuation">(</span>childrenVnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="diff-算法" tabindex="-1"><a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a> diff 算法</h2>`,11);function k(v,m){const s=l("RouterLink");return e(),t("div",null,[r,p("p",null,[n("diff 算法详见 "),o(s,{to:"/code/vue/vue3/04-Vue%E6%A0%B8%E5%BF%83%E8%99%9A%E6%8B%9FDom%E5%92%8Cdiff%E7%AE%97%E6%B3%95.html#vue3%20diff%20%E4%B8%AD%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E7%B3%BB%E5%88%97%EF%BC%88%E5%AF%B9%E5%BA%94%E7%B4%A2%E5%BC%95%EF%BC%89"},{default:c(()=>[n("vue3 diff 中最长递增子系列（对应索引）")]),_:1})])])}const b=a(d,[["render",k],["__file","22-虚拟DOM详解和渲染过程.html.vue"]]);export{b as default};
