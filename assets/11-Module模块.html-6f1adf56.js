import{_ as n,X as s,Y as a,a2 as e}from"./framework-c2b0d87a.js";const t="/assets/image-2023-01-28_20-39-06-680-11-Module模块-bd81fba7.png",o="/assets/image-2023-01-28_20-39-25-559-11-Module模块-016fed85.png",i="/assets/image-2023-01-28_20-41-00-754-11-Module模块-2bbfa7c5.png",p="/assets/image-2023-01-28_20-39-54-749-11-Module模块-5ef13a8a.png",c="/assets/image-2023-01-28_20-41-20-610-11-Module模块-9a5ecd59.png",l="/assets/image-2023-01-28_20-41-38-100-11-Module模块-0ff89e92.png",u="/assets/image-2023-01-28_20-41-55-757-11-Module模块-744484ed.png",r="/assets/image-2023-01-28_20-42-21-824-11-Module模块-0451d88e.png",d="/assets/image-2023-01-28_20-42-34-470-11-Module模块-17941b3c.png",k={},m=e('<h1 id="模块-module" tabindex="-1"><a class="header-anchor" href="#模块-module" aria-hidden="true">#</a> 模块@Module</h1><p>每个 Nest 应用程序至少有一个模块，即根模块。根模块是 Nest 开始安排应用程序树的地方。 事实上，根模块可能是应用程序中唯一的模块，特别是当应用程序很小时，但是对于大型程序来说这是没有意义的。 在大多数情况下，您将拥有多个模块，每个模块都有一组紧密相关的功能</p><h3 id="_1-基本用法" tabindex="-1"><a class="header-anchor" href="#_1-基本用法" aria-hidden="true">#</a> 1.基本用法</h3><p>当我们使用 nest g res user 创建一个 CURD 模板的时候 nestjs 会自动帮我们引入模块</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-共享模块" tabindex="-1"><a class="header-anchor" href="#_2-共享模块" aria-hidden="true">#</a> 2.共享模块</h3><p>例如 user 的 Service 想暴露给 其他模块使用就可以使用 exports 导出该服务</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>由于 App.modules 已经引入过该模块 就可以直接使用 user 模块的 Service <img src="'+i+'" alt="" loading="lazy"></p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-全局模块" tabindex="-1"><a class="header-anchor" href="#_3-全局模块" aria-hidden="true">#</a> 3.全局模块</h3><p>@Global()</p><p>我们给 user 模块添加  @Global() 他便注册为全局模块 <img src="'+c+'" alt="" loading="lazy"></p><p>在 list 模块使用无须在 module  import 导入 <img src="'+l+'" alt="" loading="lazy"></p><h3 id="_4-动态模块" tabindex="-1"><a class="header-anchor" href="#_4-动态模块" aria-hidden="true">#</a> 4.动态模块</h3><p>动态模块主要就是为了给模块传递参数 可以给该模块添加一个静态方法 用来接受参数</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Module<span class="token punctuation">,</span> DynamicModule<span class="token punctuation">,</span> Global <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span>



<span class="token keyword">interface</span> <span class="token class-name">Options</span> <span class="token punctuation">{</span>
    path<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Global</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ConfigModule</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token function">forRoot</span><span class="token punctuation">(</span>options<span class="token operator">:</span> Options<span class="token punctuation">)</span><span class="token operator">:</span> DynamicModule <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            module<span class="token operator">:</span> ConfigModule<span class="token punctuation">,</span>
            providers<span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    provide<span class="token operator">:</span> <span class="token string">&quot;Config&quot;</span><span class="token punctuation">,</span>
                    useValue<span class="token operator">:</span> <span class="token punctuation">{</span> baseApi<span class="token operator">:</span> <span class="token string">&quot;/api&quot;</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>path <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            exports<span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    provide<span class="token operator">:</span> <span class="token string">&quot;Config&quot;</span><span class="token punctuation">,</span>
                    useValue<span class="token operator">:</span> <span class="token punctuation">{</span> baseApi<span class="token operator">:</span> <span class="token string">&quot;/api&quot;</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>path <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',20),g=[m];function v(b,_){return s(),a("div",null,g)}const h=n(k,[["render",v],["__file","11-Module模块.html.vue"]]);export{h as default};
