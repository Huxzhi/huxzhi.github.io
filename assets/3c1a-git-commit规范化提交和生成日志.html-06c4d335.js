import{_ as s,X as c,Y as l,a1 as o,a0 as r,Z as n,$ as e,a2 as m,G as a}from"./framework-c2b0d87a.js";const d={},p=n("h1",{id:"git-commit-最佳实践-commitizen-husky-commitlint-规范化校验",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#git-commit-最佳实践-commitizen-husky-commitlint-规范化校验","aria-hidden":"true"},"#"),e(" git commit 最佳实践 commitizen + husky + commitlint 规范化校验")],-1),u=n("ul",null,[n("li",null,[n("code",null,"commitizen"),e("：使用 git cz 代替 git commit，引导用户填写规范的 commit 信息")]),n("li",null,[n("code",null,"husky + commitlint"),e("：git commit 动作时，校验 commit 信息，如果不满足 commitizen 规范，无法提交")])],-1),h=m(`<p>package.json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;commitlint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commitlint --config commitlint.config.cjs -e -V&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>module</code> 引入方式 不支持 <code>module.exports</code> 的形式，需要把名字改成 <code>commitlint.config.cjs</code></p><h2 id="semantic-commit-与-changelog-生成" tabindex="-1"><a class="header-anchor" href="#semantic-commit-与-changelog-生成" aria-hidden="true">#</a> Semantic commit 与 Changelog 生成</h2>`,4),g={href:"https://github.com/zuoxiaobai/commitizen-practice-demo",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"Node.js 环境下可以使用:",-1),k={href:"https://github.com/commitizen/cz-conventional-changelog",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"git cz",-1),b=n("h2",{id:"根据-commit-信息生成-changelog",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#根据-commit-信息生成-changelog","aria-hidden":"true"},"#"),e(" 根据 commit 信息生成 changelog")],-1),f={href:"https://github.com/conventional-changelog/conventional-changelog",target:"_blank",rel:"noopener noreferrer"},z=n("h3",{id:"standard-version-自动生成、打-tag",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#standard-version-自动生成、打-tag","aria-hidden":"true"},"#"),e(" standard-version（自动生成、打 tag）")],-1),q={href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"},x={href:"http://CHANGELOG.md",target:"_blank",rel:"noopener noreferrer"};function y(B,N){const i=a("BiliBili"),t=a("ExternalLinkIcon");return c(),l("div",null,[o(i,{bvid:"BV193411C7XE"}),p,u,r(" more "),h,n("p",null,[e("教学案例 "),n("a",g,[e("https://github.com/zuoxiaobai/commitizen-practice-demo"),o(t)])]),_,n("ul",null,[n("li",null,[n("a",k,[e("cz-conventional-changelog"),o(t)]),e("  提供  "),v,e("  命令辅助创建 semantic commit。")])]),b,n("ul",null,[n("li",null,[n("a",f,[e("conventional-changelog-cli"),o(t)]),e("  来快速生成更新日志")])]),z,n("p",null,[e("npm run version 更新版本号会直接提交，导致且 commit 信息就是版本号，不符合 commitizen 规范。导致手动生成 log 时，会是空白。"),n("a",q,[e("standard-version"),o(t)]),e("  就很好的解决了这个问题。安装后，只需要 npm run release，就可以有 npm run version 的功能，而且提交信息是标准的 commitizen 规范，而且自动生成 changelog 自动打 tag，自动 commit。你只需要 push 即可。")]),n("p",null,[e("需要注意的是："),n("strong",null,[n("a",x,[e("CHANGELOG.md"),o(t)]),e(" 是追加写入内容的，如果你之前没有对应的内容或删了之前的内容，会导致生成的内容较少，或者不完整。")])])])}const C=s(d,[["render",y],["__file","3c1a-git-commit规范化提交和生成日志.html.vue"]]);export{C as default};
