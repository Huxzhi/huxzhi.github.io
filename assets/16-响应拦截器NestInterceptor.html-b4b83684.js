import{_ as n,X as s,Y as a,a2 as e}from"./framework-c2b0d87a.js";const t="/assets/image-2023-02-01_16-11-09-433-16-响应拦截器-b880ec21.png",p={},o=e('<h2 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器" aria-hidden="true">#</a> 拦截器</h2><p>拦截器具有一系列有用的功能，这些功能受面向切面编程（AOP）技术的启发。它们可以：</p><ul><li>在函数执行之前/之后绑定额外的逻辑</li><li>转换从函数返回的结果</li><li>转换从函数抛出的异常</li><li>扩展基本函数行为</li><li>根据所选条件完全重写函数 (例如, 缓存目的)</li></ul><h2 id="简单拦截器案例-规范返回给前端格式" tabindex="-1"><a class="header-anchor" href="#简单拦截器案例-规范返回给前端格式" aria-hidden="true">#</a> 简单拦截器案例-规范返回给前端格式</h2><p>我们现在没有给我们的 Nestjs 规范返回给前端的格式现在比较乱 <img src="'+t+`" alt="" loading="lazy"></p><p>我们想给他返回一个标准的 json 格式 就要给我们的数据做一个全局 format</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  data<span class="token punctuation">,</span> <span class="token comment">//数据</span>
  status<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
  message<span class="token operator">:</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">,</span>
  success<span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>src 下 新建 common 文件夹 创建 response.ts</p><h2 id="nest-js-配合-rxjs-格式化数据" tabindex="-1"><a class="header-anchor" href="#nest-js-配合-rxjs-格式化数据" aria-hidden="true">#</a> Nest Js 配合 Rxjs 格式化数据</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable<span class="token punctuation">,</span> NestInterceptor<span class="token punctuation">,</span> CallHandler <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@nestjs/common&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> map <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs/operators&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Observable<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;rxjs&#39;</span>


<span class="token keyword">interface</span> <span class="token class-name">data</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token constant">T</span>
<span class="token punctuation">}</span>

@<span class="token function">Injectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">ComResponse</span><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> any<span class="token operator">&gt;</span> <span class="token keyword">implements</span> <span class="token class-name">NestInterceptor</span> <span class="token punctuation">{</span>
    <span class="token function">intercept</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token literal-property property">next</span><span class="token operator">:</span> CallHandler<span class="token punctuation">)</span><span class="token operator">:</span>Observable<span class="token operator">&lt;</span>data<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
               data<span class="token punctuation">,</span>
               <span class="token literal-property property">status</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
               <span class="token literal-property property">success</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
               <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&quot;牛逼&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在main-ts-注册" tabindex="-1"><a class="header-anchor" href="#在main-ts-注册" aria-hidden="true">#</a> 在main.ts 注册</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//全局依赖注入，需要实例化（）</span>
app<span class="token punctuation">.</span><span class="token function">useGlobalInterceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ComResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,12),c=[o];function l(i,r){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","16-响应拦截器NestInterceptor.html.vue"]]);export{d as default};
