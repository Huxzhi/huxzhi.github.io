import{_ as p,X as e,Y as o,Z as n,$ as s,a1 as c,a3 as a,G as l}from"./framework-7bff9a9e.js";const i="/assets/image-2023-02-21_16-37-37-916-00-学习Vue3-介绍-8b827cdb.png",u="/assets/image-2023-01-01_11-48-31-002-学习Vue3-fc8d35bd.png",r="/assets/image-2023-01-01_11-42-35-691-学习Vue3-f2c9d579.png",k="/assets/image-2023-01-01_11-43-32-177-学习Vue3-ef036f0b.png",d={},v=a('<p>视频教程 Vue3 + vite + Ts + pinia + 实战 + 源码 +全栈_哔哩哔哩_bilibili</p><h1 id="介绍-vue" tabindex="-1"><a class="header-anchor" href="#介绍-vue" aria-hidden="true">#</a> 介绍 vue</h1><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><p>MVVM（Model-View-ViewModel）架构</p><ul><li>『View』：视图层（UI 用户界面）</li><li>『ViewModel』：业务逻辑层（一切 js 可视为业务逻辑）</li><li>『Model』：数据层（存储数据及对数据的处理如增删改查）</li></ul><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="回顾-vue2-对比-vue3" tabindex="-1"><a class="header-anchor" href="#回顾-vue2-对比-vue3" aria-hidden="true">#</a> 回顾 vue2 对比  vue3</h2><p>我们看如下图</p><p>发现传统的 vue2 逻辑比较分散 可读性差 可维护性差</p><p>对比 vue3 逻辑分明 可维护性 高</p><p>Options API vs Composition API</p><p><code>Options API</code>，即大家常说的选项 API，即以<code>vue</code>为后缀的文件，通过定义<code>methods</code>，<code>computed</code>，<code>watch</code>，<code>data</code>等属性与方法，共同处理页面逻辑</p><p><code>Options</code>代码编写方式，如果是组件状态，则写在<code>data</code>属性上，如果是方法，则写在<code>methods</code>属性上... 如下图：</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="vue3-新特性介绍" tabindex="-1"><a class="header-anchor" href="#vue3-新特性介绍" aria-hidden="true">#</a> Vue3 新特性介绍</h1><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="重写双向绑定" tabindex="-1"><a class="header-anchor" href="#重写双向绑定" aria-hidden="true">#</a> 重写双向绑定</h2><p>原来的方法主要是对数组不方便，要重写方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>vue2
基于Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>实现

vue3 基于Proxy
proxy与Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> desc<span class="token punctuation">)</span>方式相比有以下优势：

<span class="token comment">//丢掉麻烦的备份数据</span>
<span class="token comment">//省去for in 循环</span>
<span class="token comment">//可以监听数组变化</span>
<span class="token comment">//代码更简化</span>
<span class="token comment">//可以监听动态新增的属性；</span>
<span class="token comment">//可以监听删除的属性 ；</span>
<span class="token comment">//可以监听数组的索引和 length 属性；</span>

    <span class="token keyword">let</span> proxyObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span>
        <span class="token function-variable function">get</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> prop <span class="token keyword">in</span> target <span class="token operator">?</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">set</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span>prop<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue3-优化-vdom" tabindex="-1"><a class="header-anchor" href="#vue3-优化-vdom" aria-hidden="true">#</a> Vue3 优化 Vdom</h2><p><strong>在 Vue2 中,每次更新 diff,都是全量对比,Vue3 则只对比带有标记的,这样大大减少了非动态内容的对比消耗</strong></p>`,21),m={href:"https://vue-next-template-explorer.netlify.app/",title:"Vue Template Explorer",target:"_blank",rel:"noopener noreferrer"},g=a('<figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="patch-flag-优化静态树" tabindex="-1"><a class="header-anchor" href="#patch-flag-优化静态树" aria-hidden="true">#</a> patch flag 优化静态树</h2><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>Hello world! <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Vue3</code>  编译后的  <code>Vdom</code>  是这个样子的</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>_ctx，_cache，$props，$setup，$data，$options<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_createBlock</span><span class="token punctuation">(</span>_Fragment<span class="token punctuation">,</span><span class="token keyword">null</span>，<span class="token punctuation">[</span>
<span class="token function">_createvNode</span><span class="token punctuation">(</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">&quot;Hello world ! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">_createvNode</span><span class="token punctuation">(</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span>，<span class="token string">&quot;Hello world! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">_createvNode</span><span class="token punctuation">(</span> <span class="token string">&quot;span&quot;</span>，<span class="token keyword">null</span>，<span class="token string">&quot;Hello world! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">_createvNode</span><span class="token punctuation">(</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span>，<span class="token string">&quot;Hello world! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">_createVNode</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token function">，_toDisplaystring</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>，<span class="token number">1</span><span class="token comment">/* TEXT */</span><span class="token punctuation">)</span>，
<span class="token function">_createvNode</span><span class="token punctuation">(</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span>，<span class="token string">&quot;Hello world! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token function">_createvNode</span><span class="token punctuation">(</span> <span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span>，<span class="token string">&quot;Hello world! &quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>，<span class="token number">64</span><span class="token comment">/*STABLE_FRAGMENT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增了  <code>patch flag</code> 标记</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token constant">TEXT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 动态文本节点</span>
<span class="token constant">CLASS</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token comment">// 2//动态class</span>
<span class="token class-name"><span class="token constant">STYLE</span></span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span>，<span class="token comment">// 4 //动态style</span>
<span class="token constant">PROPS</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">// 8 //动态属性，但不包含类名和样式</span>
<span class="token constant">FULLPR0PS</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token comment">// 16 //具有动态key属性，当key改变时，需要进行完整的diff比较。</span>
<span class="token constant">HYDRATE_</span> <span class="token constant">EVENTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span>，<span class="token comment">// 32 //带有监听事件的节点</span>
<span class="token constant">STABLE</span> <span class="token constant">FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token comment">// 64 //一个不会改变子节点顺序的fragment</span>
<span class="token constant">KEYED_</span> <span class="token constant">FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token comment">// 128 //带有key属性的fragment 或部分子字节有key</span>
<span class="token constant">UNKEYED</span> <span class="token constant">FRAGMENT</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token comment">// 256 //子节点没有key 的fragment</span>
<span class="token constant">NEED</span> <span class="token constant">PATCH</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token comment">// 512 //一个节点只会进行非props比较</span>
<span class="token constant">DYNAMIC_SLOTS</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span> <span class="token comment">// 1024 // 动态slot</span>
<span class="token constant">HOISTED</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment">// 静态节点</span>
<span class="token constant">BALL</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现创建动态 dom 元素的时候，Vdom 除了模拟出来了它的基本信息之外，还给它加了一个标记： <code>1 /* TEXT */</code></p><p>这个标记就叫做 <code>patch flag</code>（补丁标记）</p><p><code>patch flag</code> 的强大之处在于，当你的 <code>diff</code> 算法走到 <code>_createBlock</code> 函数的时候，会忽略所有的静态节点，只对有标记的动态节点进行对比，而且在多层的嵌套下依然有效。</p><p>尽管 JavaScript 做 Vdom 的对比已经非常的快，但是 patch flag 的出现还是让 Vue3 的 Vdom 的性能得到了很大的提升，尤其是在针对大组件的时候。</p><h2 id="vue3-fragment" tabindex="-1"><a class="header-anchor" href="#vue3-fragment" aria-hidden="true">#</a> Vue3 Fragment</h2><p>vue3 允许我们支持多个根节点</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时新增了 Suspense teleport  和   多 v-model 用法</p><h2 id="vue3-tree-shaking" tabindex="-1"><a class="header-anchor" href="#vue3-tree-shaking" aria-hidden="true">#</a> Vue3 Tree shaking</h2><p>简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码</p><p>在 Vue2 中，无论我们使用什么功能，它们最终都会出现在生产代码中。主要原因是 Vue 实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到</p><p>而 Vue3 源码引入 <code>tree shaking</code> 特性，将全局 API 进行分块。如果你不使用其某些功能，它们将不会包含在你的基础包中</p><p>就是比如你要用 watch 就是 <code>import {watch} from &#39;vue&#39;</code> 其他的 <code>computed</code> 没用到就不会给你打包减少体积</p><h2 id="vue-3-composition-api" tabindex="-1"><a class="header-anchor" href="#vue-3-composition-api" aria-hidden="true">#</a> Vue 3 Composition Api</h2><p>[[Setup 语法糖]]式编程</p><p>例如 ref reactive watch computed toRefs toRaws 我们会在下几个章节详解</p><p>而<code>Compositon API</code>正是解决上述问题，将某个逻辑关注点相关的代码全都放在一个函数里，这样当需要修改一个功能时，就不再需要在文件中跳来跳去</p><p>下面举个简单例子，将处理<code>count</code>属性相关的代码放在同一个函数了</p><p>用 函数 包裹起来，如 <code>const A = ()=&gt;{ ... }</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> double <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">handleConut</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        count<span class="token punctuation">.</span>value <span class="token operator">=</span> count<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        count<span class="token punctuation">,</span>
        double<span class="token punctuation">,</span>
        handleConut<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function b(f,h){const t=l("ExternalLinkIcon");return e(),o("div",null,[v,n("p",null,[n("a",m,[s("Vue Template Explorer"),c(t)]),s("  我们可以通过这个网站看到静态标记")]),g])}const y=p(d,[["render",b],["__file","00-学习Vue3-介绍.html.vue"]]);export{y as default};
