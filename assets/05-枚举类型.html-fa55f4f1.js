import{_ as e,X as n,Y as a,a2 as s}from"./framework-c2b0d87a.js";const c="/assets/Pasted-image-20221230173547-af918f05.png",d="/assets/Pasted-image-20221230173608-18fa463d.png",o={},t=s(`<p>在javaScript中是没有枚举的概念的TS帮我们定义了枚举这个类型</p><h2 id="使用枚举-通过enum关键字定义我们的枚举" tabindex="-1"><a class="header-anchor" href="#使用枚举-通过enum关键字定义我们的枚举" aria-hidden="true">#</a> 使用枚举 通过enum关键字定义我们的枚举</h2><div class="language-TypeScript line-numbers-mode" data-ext="TypeScript"><pre class="language-TypeScript"><code>enum Types{
   Red = 0,
   Green = 1,
   BLue = 2
}
//默认就是从0开始的 可以不写值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增长枚举 如上，我们定义了一个数字枚举， Red使用初始化为 <code>1</code>。 其余的成员会从 <code>1</code>开始自动增长。 换句话说， Type.<code>Red</code>的值为 <code>1</code>， <code>Green</code>为 <code>2</code>， <code>Blue</code>为 <code>3</code>。</p><h2 id="const枚举" tabindex="-1"><a class="header-anchor" href="#const枚举" aria-hidden="true">#</a> const枚举</h2><p>let 和 var 都是不允许的声明只能使用const</p><p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 const枚举。 常量枚举通过在枚举上使用 const修饰符来定义</p><p>const 声明的枚举会被编译成常量</p><p>普通声明的枚举编译完后是个对象</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token keyword">enum</span> Types<span class="token punctuation">{</span>
   No <span class="token operator">=</span> <span class="token string">&quot;No&quot;</span><span class="token punctuation">,</span>
   Yes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Const 声明编译之后，变成常量 <img src="`+c+'" alt="" loading="lazy"> 普通声明编译之后，变成对象 <img src="'+d+'" alt="" loading="lazy"></p><h1 id="反向映射" tabindex="-1"><a class="header-anchor" href="#反向映射" aria-hidden="true">#</a> 反向映射</h1><p>它包含了正向映射（ <code>name</code> -&gt; <code>value</code>）和反向映射（ <code>value</code> -&gt; <code>name</code>）</p><p>数字可以</p><p>要注意的是 <em>不会</em> 为<mark>字符串</mark>枚举成员生成反向映射。</p>',15),i=[t];function p(r,l){return n(),a("div",null,i)}const m=e(o,[["render",p],["__file","05-枚举类型.html.vue"]]);export{m as default};
