import{_ as a,X as e,Y as t,Z as p,$ as n,a1 as c,a3 as o,a2 as i,G as l}from"./framework-c2b0d87a.js";const u={},r=i(`<h1 id="_46a-redux-使用" tabindex="-1"><a class="header-anchor" href="#_46a-redux-使用" aria-hidden="true">#</a> 46a-Redux 使用</h1><ol><li>引入 redux 核心包</li><li>创建 reducer 整合函数</li><li>通过 reducer 对象创建 store</li><li>对 store 中的 state 进行订阅</li><li>通过 dispatch 派发 state 的操作指令</li></ol><p>采取 subscribe 订阅发布模式 和 dispatch 分派</p><h2 id="html-内使用" tabindex="-1"><a class="header-anchor" href="#html-内使用" aria-hidden="true">#</a> html 内使用</h2><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">/*
    *   state 表示当前state，可以根据这个state生成新的state
    *   action 是一个js对象，它里边会保存操作的信息
    *   type表示操作的类型
    *   其他需要传递的参数，也可以在action中设置
    * */</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token string">&#39;ADD&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">&#39;SUB&#39;</span><span class="token operator">:</span>
            <span class="token keyword">return</span> state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> Redux<span class="token punctuation">.</span><span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 打印state的值</span>
    <span class="token comment">// console.log(store.getState());</span>
    countSpan<span class="token punctuation">.</span>innerText <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


subBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;SUB&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

addBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ADD&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多个-reducer" tabindex="-1"><a class="header-anchor" href="#多个-reducer" aria-hidden="true">#</a> 多个 Reducer</h2><p>上边的案例的写法存在一个非常严重的问题！将所有的代码都写到一个 reducer 中，会使得这个 reducer 变得无比庞大，现在只有学生和学校两个信息。如果数据在多一些，操作方法也会随之增多，reducer 会越来越庞大变得难以维护。</p><p>Redux 中是允许我们创建多个 reducer 的，所以上例中的 reducer 我们可以根据它的数据和功能进行拆分，拆分为两个 reducer，像是这样：</p><h2 id="combinereducer-将多个-reducer-进行合并" tabindex="-1"><a class="header-anchor" href="#combinereducer-将多个-reducer-进行合并" aria-hidden="true">#</a> <code>combineReducer</code> 将多个 reducer 进行合并</h2><p>拆分后，还需要使用 Redux 为我们提供的函数 <code>combineReducer</code> 将多个 reducer 进行合并，合并后才能传递进 createStore 来创建 store。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">stu</span><span class="token operator">:</span>stuReducer<span class="token punctuation">,</span>
    <span class="token literal-property property">school</span><span class="token operator">:</span>schoolReducer
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>combineReducer</code> 需要一个对象作为参数，对象的属性名可以根据需要指定，比如我们有两种数据 stu 和 school，属性名就命名为 stu 和 school，stu 指向 stuReducer，school 指向 schoolReducer。读取数据时，直接通过 state.stu 读取学生数据，通过 state.school 读取学校数据。</p><h2 id="缺点和问题" tabindex="-1"><a class="header-anchor" href="#缺点和问题" aria-hidden="true">#</a> 缺点和问题</h2><ol><li>如果 state 过于复杂，将会非常难以维护 <ul><li>可以通过对 state 分组来解决这个问题，创建多个 reducer，然后将其合并为一个</li></ul></li><li>state 每次操作时，都需要对 state 进行复制，然后再去修改</li><li>case 后边的常量维护起来会比较麻烦</li></ol><h2 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法" aria-hidden="true">#</a> 解决办法</h2>`,15);function d(k,v){const s=l("RouterLink");return e(),t("div",null,[r,p("p",null,[n("使用 "),c(s,{to:"/code/react/React18/47-Redux-Toolkit%E4%BD%BF%E7%94%A8.html"},{default:o(()=>[n("47-Redux-Toolkit使用")]),_:1})])])}const b=a(u,[["render",d],["__file","46a-Redux使用.html.vue"]]);export{b as default};
