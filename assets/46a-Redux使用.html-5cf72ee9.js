const n=JSON.parse(`{"key":"v-3004b390","path":"/code/react/React18/46a-Redux%E4%BD%BF%E7%94%A8.html","title":"46a-Redux使用","lang":"zh-CN","frontmatter":{"category":["react18"],"date":"2023-03-18 16:22","title":"46a-Redux使用","updated":"2023-05-13 22:56","description":"46a-Redux 使用 引入 redux 核心包 创建 reducer 整合函数 通过 reducer 对象创建 store 对 store 中的 state 进行订阅 通过 dispatch 派发 state 的操作指令 采取 subscribe 订阅发布模式 和 dispatch 分派 html 内使用 function reducer(state, action) { /* * state 表示当前state，可以根据这个state生成新的state * action 是一个js对象，它里边会保存操作的信息 * type表示操作的类型 * 其他需要传递的参数，也可以在action中设置 * */ switch (action.type) { case 'ADD': return state + 1; case 'SUB': return state - 1; default: return state; } } const store = Redux.createStore(reducer, 1); store.subscribe(() =&gt; { // 打印state的值 // console.log(store.getState()); countSpan.innerText = store.getState(); }); subBtn.addEventListener('click', () =&gt; { store.dispatch({type: 'SUB'}); }); addBtn.addEventListener('click', () =&gt; { store.dispatch({type: 'ADD'}); });","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/react/React18/46a-Redux%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"46a-Redux使用"}],["meta",{"property":"og:description","content":"46a-Redux 使用 引入 redux 核心包 创建 reducer 整合函数 通过 reducer 对象创建 store 对 store 中的 state 进行订阅 通过 dispatch 派发 state 的操作指令 采取 subscribe 订阅发布模式 和 dispatch 分派 html 内使用 function reducer(state, action) { /* * state 表示当前state，可以根据这个state生成新的state * action 是一个js对象，它里边会保存操作的信息 * type表示操作的类型 * 其他需要传递的参数，也可以在action中设置 * */ switch (action.type) { case 'ADD': return state + 1; case 'SUB': return state - 1; default: return state; } } const store = Redux.createStore(reducer, 1); store.subscribe(() =&gt; { // 打印state的值 // console.log(store.getState()); countSpan.innerText = store.getState(); }); subBtn.addEventListener('click', () =&gt; { store.dispatch({type: 'SUB'}); }); addBtn.addEventListener('click', () =&gt; { store.dispatch({type: 'ADD'}); });"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-24T09:20:32.000Z"}],["meta",{"property":"article:published_time","content":"2023-03-18T16:22:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-24T09:20:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"46a-Redux使用\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T16:22:00.000Z\\",\\"dateModified\\":\\"2023-06-24T09:20:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"html 内使用","slug":"html-内使用","link":"#html-内使用","children":[]},{"level":2,"title":"多个 Reducer","slug":"多个-reducer","link":"#多个-reducer","children":[]},{"level":2,"title":"combineReducer 将多个 reducer 进行合并","slug":"combinereducer-将多个-reducer-进行合并","link":"#combinereducer-将多个-reducer-进行合并","children":[]},{"level":2,"title":"缺点和问题","slug":"缺点和问题","link":"#缺点和问题","children":[]},{"level":2,"title":"解决办法","slug":"解决办法","link":"#解决办法","children":[]}],"git":{"createdTime":1679501467000,"updatedTime":1687598432000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":4}]},"readingTime":{"minutes":1.92,"words":577},"filePathRelative":"code/react/React18/46a-Redux使用.md","localizedDate":"2023年3月18日","excerpt":"<h1> 46a-Redux 使用</h1>\\n<ol>\\n<li>引入 redux 核心包</li>\\n<li>创建 reducer 整合函数</li>\\n<li>通过 reducer 对象创建 store</li>\\n<li>对 store 中的 state 进行订阅</li>\\n<li>通过 dispatch 派发 state 的操作指令</li>\\n</ol>\\n<p>采取 subscribe 订阅发布模式 和 dispatch 分派</p>\\n<h2> html 内使用</h2>\\n<div class=\\"language-jsx line-numbers-mode\\" data-ext=\\"jsx\\"><pre class=\\"language-jsx\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">reducer</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">state<span class=\\"token punctuation\\">,</span> action</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">/*\\n    *   state 表示当前state，可以根据这个state生成新的state\\n    *   action 是一个js对象，它里边会保存操作的信息\\n    *   type表示操作的类型\\n    *   其他需要传递的参数，也可以在action中设置\\n    * */</span>\\n    <span class=\\"token keyword\\">switch</span> <span class=\\"token punctuation\\">(</span>action<span class=\\"token punctuation\\">.</span>type<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token string\\">'ADD'</span><span class=\\"token operator\\">:</span>\\n            <span class=\\"token keyword\\">return</span> state <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">case</span> <span class=\\"token string\\">'SUB'</span><span class=\\"token operator\\">:</span>\\n            <span class=\\"token keyword\\">return</span> state <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">default</span><span class=\\"token operator\\">:</span>\\n            <span class=\\"token keyword\\">return</span> state<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">const</span> store <span class=\\"token operator\\">=</span> Redux<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">createStore</span><span class=\\"token punctuation\\">(</span>reducer<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\nstore<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">subscribe</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 打印state的值</span>\\n    <span class=\\"token comment\\">// console.log(store.getState());</span>\\n    countSpan<span class=\\"token punctuation\\">.</span>innerText <span class=\\"token operator\\">=</span> store<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\nsubBtn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    store<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'SUB'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\naddBtn<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n    store<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">dispatch</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">type</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'ADD'</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}`);export{n as data};
