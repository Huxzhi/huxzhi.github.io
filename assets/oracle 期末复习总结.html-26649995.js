import{_ as t,X as p,Y as e,a2 as r}from"./framework-c2b0d87a.js";const a="/assets/bd5f92b1705b945f2afe9b29fc2c1d9a-76a9c062.png",o="/assets/22a4495533408ca92cfea9d14607c721-6a663bfd.png",l="/assets/267b1a9f8cfe196686f10add781bc08d-ba53742c.png",i="/assets/5b5c159f437e56bde5aea24a8de1dc84-6bd23c72.png",n="/assets/a35d2164e8f49707b8abbb05fb4d28e4-ce56a3d6.png",d="/assets/82ecddcb87fa26d66f1e359f68179be8-266f562f.png",s="/assets/cc4e6f6b12f07e94810628e41f829658-9856330f.png",c={},g=r('<h1 id="oracle-期末复习总结" tabindex="-1"><a class="header-anchor" href="#oracle-期末复习总结" aria-hidden="true">#</a> oracle 期末复习总结</h1><p>1.监听器、net服务名的特点、作用。</p><p>监听程序与Net服务名的关系是怎样的？</p><p>TNSListener为结尾</p><p>监听程序配置在</p><p><strong>服务器</strong></p><p>端，负责监视客户端的连接请求；Net服务名配置在客户端，用于向其他工具提供连接信息的配置。</p><p>2.列举3个oracle创建数据库之后， 自动预创建的用户的用户名，及他们角色，登陆方式。</p><p>a) 普通用户:   scott， 密码tiger  (练习常用)   Normal</p><p>b) 普通管理员 ：system</p><p>c) 超级管理员：  sys  sysdba</p><p>3.模式的概念，模式与用户的关系。</p><ul><li>用户（user）<br>user在Oracle中的主要是用于身份验证，权限分配的一个标识。在连接数据库和操作数据库对象时就是通过用户进行身份和权限的验证。</li><li>模式（schema）<br>Oracle中的schema是若干个数据库对象的集合，用于管理数据库中的各种对象，这里的对象包括：表、视图、存过、序列、索引等等。一个schema下包括若干个表、视图、存过等对象。</li></ul><ol start="4"><li>orade体系结构</li></ol><p>数据库Database</p><p>实例 Instance</p><p>一个数据库可以被多个实例装载和打开；</p><p>一个实例在其生存期内只能装载和打开一个数据库。</p><p>启动实例装载、打开数据库</p><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>5.启动数据库、关闭数据库命令</p><ul><li>Oracle数据库实例的启动过程分为3步骤，分别是<strong>启动实例、加载数据库、打开数据库</strong></li></ul><p>STARTUP [nomount | mount | open | force] [resetrict] [pfile=filename]</p><p>nomount : 启动实例不加载数据库。通常创建新数据库或重建控制文件时使用。</p><p>mount: 启动实例、加载数据库并保持数据库的关闭状态。通常数据库维护时使用。</p><p>open : 默认选项。3步骤都做。常用。</p><p>force： 终止实例并重新启动数据库。</p><p>resetrict：以受限制的会话方式启动数据库，通常用于备份。</p><p>pfile: 指定启动实例时锁使用的文本参数文件。Oracle数据库实例在启动时必须读取一个初始化参数文件，以从中获得配置信息。若没有指定，则查找默认配置文件。</p><ul><li>关闭数据库实例也分为3个步骤，分别是<strong>关闭数据库、卸载数据库、关闭Oracle实例</strong>。</li></ul><p>SHUTDOWN [normal | transactional | immediate | abort]</p><p>normal：阻止任何用户建立新的连接。等待当前所有正在连接的用户主动断开连接。当所有用户断开连接后，立即关闭数据库。</p><p>transactional：阻止用户建立新连接和开始新事务。等待所有活动事务提交后再断开用户连接。当所有的活动事务提交完毕、所有的用户都断开连接后，将关闭数据库。</p><p>immediate: 阻止用户建立新连接和开始新事务。将未提交的活动事务回退。关闭数据库。</p><p>abort：阻止用户建立新连接和开始新事务。取消未提交的活动事务，而不是回退。立即终止正在执行的任何sql语句。关闭数据库。有一定的强制性和破坏性。</p><p>6.归档命令</p><ol><li>shutdown immediate 关闭数据库</li><li>startup mount 启动实例，加载数据库（没有打开数据库）</li><li>archive log list 查看当前归档模式</li><li>alter database archivelog 设置归档模式</li><li>altar database open 打开数据局</li></ol><p>7.表空间概念的理解</p><p>数据文件和日志文件是数据库中最关键的文件。它们是数据存储的地方。每一个数据库至少有一个与之相关的数据文件，通常情况下不仅仅一个，有非常多。</p><p>表空间就是一个用于管理数据文件的逻辑容器，它是与数据文件相关联的，一个表空间至少要有一个数据文件与之关联。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>8.创建数据表、约束</p><ol><li>创建一个图书表BOOK，其字段定义如下。指定该表放在test表空间中。</li></ol><table><thead><tr><th>字段名称</th><th>数据类型</th><th>长度</th><th></th></tr></thead><tbody><tr><td>ID</td><td>整数</td><td></td><td>主键</td></tr><tr><td>NAME</td><td>变长字符串</td><td>50字节</td><td>不能为空</td></tr><tr><td>ISBN</td><td>定长字符串</td><td>30字符</td><td>唯一</td></tr><tr><td>OP_DATE</td><td>日期</td><td></td><td></td></tr><tr><td>PRICE</td><td>数值</td><td>长度7<br>小数点后1位</td><td>默认为0</td></tr></tbody></table><p>写出该SQL脚本。</p><p>create table BOOK(<br> ID int PRIMARY KEY,<br>  NAME varchar2(50 byte) NOT NULL,<br>  ISBN char(30 char) UNIQUE,<br>  OP_DATE date,<br>  PRICE number(7,1) default 0<br>)TABLESPACE test;</p><ol><li>生成一个借阅表Borrow，使用默认表空间。</li></ol><table><thead><tr><th>字段名称</th><th>数据类型</th><th>长度</th><th></th></tr></thead><tbody><tr><td>ID</td><td>整数</td><td></td><td>主键</td></tr><tr><td>BookID</td><td>整数</td><td></td><td>外键，引用BOOK表PROJID。级联删除</td></tr><tr><td>START_DATE</td><td>日期</td><td></td><td>START_DATE默认为系统当前时间</td></tr><tr><td>END_DATE</td><td>日期</td><td></td><td>END_DATE不能比START_DATE早</td></tr></tbody></table><p>写出该SQL脚本。</p><p>create table Borrow (<br>  ID int PRIMARY KEY,<br>  BookID int REFERENCES BOOK on delete caseade,<br>  START_DATE  date default sysdate,<br>  END_DATE date ,<br>  check( END_DATE &gt;= START_DATE )<br>);</p><ol start="9"><li>dual表的使用</li></ol><p>因为oracle的查询语句必须满足select ….from…结构，from 后必须有一个表名，</p><p>dual表可以用作这个强制的虚表</p><p>10.增删改查命令的使用</p><ul><li>插入数据：</li></ul><p>INSERT INTO 表名</p><p>[(column_name [,column_name2]…)]</p><p>VALUES (express1,[,express2]…)</p><ul><li>更新数据</li></ul><p>UPDATE 表名</p><p>SET 列名 = 列值</p><p>[,列名 = 列值…]</p><p>[WHERE 过滤条件]</p><ul><li>删除数据</li></ul><p>DELETE FROM 表名  [WHERE 条件]</p><ol start="11"><li>truncate命令的使用，与delete命令的区别</li></ol><p>TRANCATE   table   表名</p><p>[REUSE STORAGE|DROP STORAGE]</p><p>truncate  table employee; --删除全表的记录</p><p><strong>与delete 的区别</strong></p><p>：</p><p>delete  删除数据时，oracle会产生回滚记录，可以用rollback语句来撤销。 Truncate 不产生回滚记录。</p><p>删除全表记录truncate比delete要快，但是无法使用rollback语句撤销。</p><p>删除后是否保留记录所占用的空间，默认DROP.</p><p><strong>REUSE:</strong></p><p>删除后保留所占用的空间，</p><p><strong>DROP：</strong></p><p>表示删除后立即回收记录占用的空间。</p><p>12.分页查询</p><p>SELECT * FROM <br>( <br>    SELECT list.<em>, rownum as RNUM FROM <br>    ( <br>        业务select语句<br>)<br> list WHERE ROWNUM &lt;=    &amp;&amp;size</em>&amp;&amp;page<br>) WHERE RNUM &gt;&amp;size*(&amp;page-1)  <br><br>替换变量：<br>&amp;    生命周期：输入值单次引用有效<br>&amp;&amp;  生命周期：输入值整个会话有效</p><p>13.索引的概念、使用注意事项</p><p>**索引: **</p><p>是建立在数据表的列之上的数据库对象。</p><p><strong>作用</strong></p><p>就像图书目录一样，可以帮助用户快速查找需要的数据，提高SQL查询语句的速度。</p><p><strong>目录的内容：</strong></p><p>关键值---页码的对应关系</p><p>**索引的内容： **</p><p>（索引）列键值 --- 其记录行的物理地址Rowid的对应关系</p><p><strong>使用注意事项：</strong></p><p>没有索引时，查询数据需要全表扫描：</p><p><strong>索引加快了查询速度，减慢了增、删、改的速度</strong></p><p>在Oracle系统中，对索引的应用和维护是自动完成的。</p><p>当用户执行了INSERT、UPDATE、DELETE操作后，系统自动更新索引列表。</p><p>当用户执行SELECT、UPDATE、DELETE操作时，系统自动选择合适的索引来优化操作。</p><p>14.素引的创建</p><ul><li>创建<strong>B树索引</strong></li></ul><p>在students表的stuname列上创建索引，放在表空间users, 预留25%的空间。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>pctfree 指定为将来insert操作所预留的空闲空间，如果将来在表上执行大量insert操作，那么应该设置较大的pctfree</p><ul><li>在students表性别列上创建<strong>位图索引</strong></li></ul><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>15.序列的创建，序列的使用。</p><p>对于序列，有两个重要的属性——</p><p><strong>currval和nextval</strong></p><p>。其中currval用于获得序列的当前值，而nextval则用于获得序列的下一个值。每次调用nextval，都会使序列的当前值增加单位步长（默认步长为1）。</p><p>需要注意的是，在序列创建之后，应该首先使用seq.nextval，然后才能够使用seq.currval。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>16.创建存储过程，完成指定功能。</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>17.调用存储过程</p><p>pl/sql编程调用</p><figure><img src="'+s+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>18.触发器的概念、特点。</p><p>一种特殊的存储过程，它在执行方式上不同于一般的存储过程。触发器是通过事件触发后由系统自动调用的。</p><p><strong>特点：</strong></p><p>在结构上，触发器非常类似于存储过程，都是实现特殊的功能而执行的代码块。触发器的主要部分是代码块，在某些条件成立时，代码块被自动执行。</p><p>触发器不允许用户显式传递参数，不能够返回参数值</p><p>也不允许用户调用触发器，触发器只能由Oracle在合适的时机自动调用，类似于面向切面编程中的拦截器。可以在动作执行之前或者执行之后，自定义操作</p><p>19.触发器的创建</p><p>For each row :行级触发器，对每一行数据进行操作时都会引起该触发器的运行。如果未指定该条件，则表示创建语句级触发器，无论数据操作影响了多少行，触发器都只会执行一次。</p><p>Tri_event, 触发事件比如，insert, update, delete, create, alter, drop..多个之间用or</p><p>Tri_condition: 只有当该表达式的值为true时，遇到触发事件才会自动执行触发器，否则即使遇到触发事件也不会执行触发器</p><p>create [or replace] trigger tri_name</p><pre><code>[before | after | instead of] tri_event

on table_name | view_name | user_name | db_name
</code></pre><p>[for each row] [when tri_condition]</p><p>begin</p><pre><code>plsql_sentences;
</code></pre><p>end tri_name;</p><p>create or replace trigger 名字<br> before insert on dept<br>    for each row<br>     begin<br>     select seq_1.nextval into :new.id from dual<br>   end；</p><p>20.用户的创建、授权</p><p><strong>创建用户 create user</strong></p><p>CREATE USER AUTHOR<br>IDENTIFIED BY “密码”<br>quota unlimited on 表空间<br>profile ‘概要文件名’ ;</p><p><strong>授权操作使用GRANT命令：</strong></p><p>grant sys_privi | role to user | role | public</p><p>[with admin option]</p><p>撤销权限：</p><p>revoke sys_privi | role from user | role | public</p>`,138),b=[g];function f(u,E){return p(),e("div",null,b)}const _=t(c,[["render",f],["__file","oracle 期末复习总结.html.vue"]]);export{_ as default};
