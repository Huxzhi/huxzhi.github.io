const t=JSON.parse('{"key":"v-568bfcaa","path":"/code/nest-js/16-%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8NestInterceptor.html","title":"16-响应拦截器NestInterceptor","lang":"zh-CN","frontmatter":{"date":"2023-02-01 15:59","title":"16-响应拦截器NestInterceptor","updated":"2023-05-08 09:12","description":"拦截器 拦截器具有一系列有用的功能，这些功能受面向切面编程（AOP）技术的启发。它们可以： 在函数执行之前/之后绑定额外的逻辑 转换从函数返回的结果 转换从函数抛出的异常 扩展基本函数行为 根据所选条件完全重写函数 (例如, 缓存目的) 简单拦截器案例-规范返回给前端格式 我们现在没有给我们的 Nestjs 规范返回给前端的格式现在比较乱 我们想给他返回一个标准的 json 格式 就要给我们的数据做一个全局 format","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/nest-js/16-%E5%93%8D%E5%BA%94%E6%8B%A6%E6%88%AA%E5%99%A8NestInterceptor.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"16-响应拦截器NestInterceptor"}],["meta",{"property":"og:description","content":"拦截器 拦截器具有一系列有用的功能，这些功能受面向切面编程（AOP）技术的启发。它们可以： 在函数执行之前/之后绑定额外的逻辑 转换从函数返回的结果 转换从函数抛出的异常 扩展基本函数行为 根据所选条件完全重写函数 (例如, 缓存目的) 简单拦截器案例-规范返回给前端格式 我们现在没有给我们的 Nestjs 规范返回给前端的格式现在比较乱 我们想给他返回一个标准的 json 格式 就要给我们的数据做一个全局 format"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://huxzhi.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-08T02:14:57.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"16-响应拦截器NestInterceptor"}],["meta",{"property":"article:published_time","content":"2023-02-01T15:59:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-08T02:14:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"16-响应拦截器NestInterceptor\\",\\"image\\":[\\"https://huxzhi.github.io/\\"],\\"datePublished\\":\\"2023-02-01T15:59:00.000Z\\",\\"dateModified\\":\\"2023-05-08T02:14:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"拦截器","slug":"拦截器","link":"#拦截器","children":[]},{"level":2,"title":"简单拦截器案例-规范返回给前端格式","slug":"简单拦截器案例-规范返回给前端格式","link":"#简单拦截器案例-规范返回给前端格式","children":[]},{"level":2,"title":"Nest Js 配合 Rxjs 格式化数据","slug":"nest-js-配合-rxjs-格式化数据","link":"#nest-js-配合-rxjs-格式化数据","children":[{"level":3,"title":"在main.ts 注册","slug":"在main-ts-注册","link":"#在main-ts-注册","children":[]}]}],"git":{"createdTime":1677862957000,"updatedTime":1683512097000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":3}]},"readingTime":{"minutes":1.03,"words":310},"filePathRelative":"code/nest-js/16-响应拦截器NestInterceptor.md","localizedDate":"2023年2月1日","excerpt":"<h2> 拦截器</h2>\\n<p>拦截器具有一系列有用的功能，这些功能受面向切面编程（AOP）技术的启发。它们可以：</p>\\n<ul>\\n<li>在函数执行之前/之后绑定额外的逻辑</li>\\n<li>转换从函数返回的结果</li>\\n<li>转换从函数抛出的异常</li>\\n<li>扩展基本函数行为</li>\\n<li>根据所选条件完全重写函数 (例如, 缓存目的)</li>\\n</ul>\\n<h2> 简单拦截器案例-规范返回给前端格式</h2>\\n<p>我们现在没有给我们的 Nestjs 规范返回给前端的格式现在比较乱\\n</p>\\n<p>我们想给他返回一个标准的 json 格式 就要给我们的数据做一个全局 format</p>","copyright":{},"autoDesc":true}');export{t as data};
