import{_ as r,X as t,Y as o,Z as n,$ as s,a1 as i,a2 as e,G as p}from"./framework-c2b0d87a.js";const c="/assets/image-2023-01-24_22-33-06-606-03-Nginx常用命令和配置文件-7b0560fc.png",d="/assets/image-2023-01-24_22-38-47-618-03-Nginx常用命令和配置文件-fafd76de.png",l={},u=e(`<p>目录</p><ul><li><a href="#Nginx%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">Nginx 常用命令</a></li><li><a href="#Nginx%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">Nginx 配置文件</a></li><li><a href="#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a></li><li><a href="#%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90">日志分析</a></li><li><a href="#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%20upstream">负载均衡 upstream</a></li></ul><h2 id="nginx-常用命令" tabindex="-1"><a class="header-anchor" href="#nginx-常用命令" aria-hidden="true">#</a> Nginx 常用命令</h2><h3 id="_0-安装-nginx" tabindex="-1"><a class="header-anchor" href="#_0-安装-nginx" aria-hidden="true">#</a> 0.安装 nginx</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-查看-nginx-版本号" tabindex="-1"><a class="header-anchor" href="#_1-查看-nginx-版本号" aria-hidden="true">#</a> 1.查看 nginx 版本号</h3><p>nginx -v</p><h3 id="_2-启动-nginx" tabindex="-1"><a class="header-anchor" href="#_2-启动-nginx" aria-hidden="true">#</a> 2.启动 nginx</h3><p>直接执行 nginx 即可</p><h3 id="_3-停止-nginx" tabindex="-1"><a class="header-anchor" href="#_3-停止-nginx" aria-hidden="true">#</a> 3.停止 nginx</h3><div class="language-vbnet line-numbers-mode" data-ext="vbnet"><pre class="language-vbnet"><code>nginx <span class="token operator">-</span>s <span class="token keyword">stop</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Stop 是立即停止</p><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>nginx -s quit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Quit 是一个优雅的关闭方式，Nginx 在退出前完成已经接受的请求处理</p><h3 id="_4-重载-nginx-配置文件" tabindex="-1"><a class="header-anchor" href="#_4-重载-nginx-配置文件" aria-hidden="true">#</a> 4.重载 nginx 配置文件</h3><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>nginx -s reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-查看-nginx-进程" tabindex="-1"><a class="header-anchor" href="#_5-查看-nginx-进程" aria-hidden="true">#</a> 5 查看 nginx 进程</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ps -ef | grep nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>root       <span class="token number">49550</span>       <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">19</span>:37 ?        00:00:00 nginx: master process /usr/sbin/nginx <span class="token parameter variable">-g</span> daemon on<span class="token punctuation">;</span> master_process on<span class="token punctuation">;</span>
www-data   <span class="token number">49551</span>   <span class="token number">49550</span>  <span class="token number">0</span> <span class="token number">19</span>:37 ?        00:00:00 nginx: worker process
www-data   <span class="token number">49552</span>   <span class="token number">49550</span>  <span class="token number">0</span> <span class="token number">19</span>:37 ?        00:00:00 nginx: worker process
root       <span class="token number">51468</span>   <span class="token number">19545</span>  <span class="token number">0</span> <span class="token number">20</span>:14 pts/0    00:00:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ps -ef</code></p><p>输出标准格式的 linux 进程 命令</p><p><code>grep nginx</code></p><p><code>grep命令</code> 是查找，是一种强大的文本搜索工具 我们这儿是查找 nginx</p><h1 id="nginx-配置文件" tabindex="-1"><a class="header-anchor" href="#nginx-配置文件" aria-hidden="true">#</a> Nginx 配置文件</h1><h2 id="_1-如何查找-nginx-配置文件" tabindex="-1"><a class="header-anchor" href="#_1-如何查找-nginx-配置文件" aria-hidden="true">#</a> 1.如何查找 nginx 配置文件</h2><p><code>nginx -t</code> 检查配置文件是否有语法错误</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-打开配置文件" tabindex="-1"><a class="header-anchor" href="#_2-打开配置文件" aria-hidden="true">#</a> 2.打开配置文件</h2><p><code>vim /etc/nginx/nginx.conf</code></p><p>Nginx 的主配置文件是 nginx.conf，这个配置文件一共由三部分组成，分别为全局块、events 块和 http 块。</p><p>在 http 块中，又包含 http 全局块、多个 server 块。</p><p>每个 server 块中，可以包含 server 全局块和多个 location 块。在同一配置块中嵌套的配置块，各个之间不存在次序关系</p><h3 id="_1-全局块" tabindex="-1"><a class="header-anchor" href="#_1-全局块" aria-hidden="true">#</a> 1.全局块</h3><p>全局块是默认配置文件从开始到 events 块之间的一部分内容，主要设置一些影响 Nginx 服务器整体运行的配置指令，因此，这些指令的作用域是 Nginx 服务器全局。</p><ul><li><code>user [user] [group]</code> 指定可以运行 nginx 服务的用户和用户组，只能在全局块配置 user 指令在 Windows 上不生效，如果你制定具体用户和用户组会报警告</li><li><code>worker_processes</code> nginx 进程数量 worker_processes 比如设置为 2 nginx 将会开启一个 master 进程和 2 两个 worker 进程</li><li><code>pid</code> logs/nginx.pid 存放 pid 文件</li><li><code>error_log</code> logs/error.log; 全局错误日志类型 debug info warn error 存放地址</li></ul><h3 id="_2-events-块" tabindex="-1"><a class="header-anchor" href="#_2-events-块" aria-hidden="true">#</a> 2.events 块</h3><p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接。常用到的设置包括是否开启对多 worker process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型处理连接请求，每个 worker process 可以同时支持的最大连接数等</p><ul><li><p><code>accept_mutex</code> 默认开启-开启之后 nginx 的多个 worker 将会以串行的方式来处理，只会有一个 worker 将会被唤起，其他的 worker 继续睡眠，如果不开启将会造成惊群效应多个 worker 全部唤起不过只有一个 Worker 能获取新连接，其它的 Worker 会重新进入休眠状态</p></li><li><p><code>worker_connections</code> 单个进程最大连接数（最大连接数=连接数+进程数）</p></li></ul><h3 id="_3-http-块" tabindex="-1"><a class="header-anchor" href="#_3-http-块" aria-hidden="true">#</a> 3.http 块</h3><p>http 块是 Nginx 服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。</p><ul><li><code>include</code> 指令，用于引入其他的配置文件</li><li><code>default_type</code> 如果 Web 程序没设置，Nginx 也没对应文件的扩展名，就用 Nginx 里默认的 default_type 定义的处理方式。<code>default_type application/octet-stream; #nginx</code> 默认文件类型</li><li><code>log_format</code> 指令，用于定义日志格式，此指令只能在 http 块中进行配置</li><li><code>sendfile</code> 简单来说就是启用 <code>sendfile()</code> 系统调用来替换 <code>read()</code> 和 <code>write()</code>调用，减少系统上下文切换从而提高性能，当 nginx 是静态文件服务器时，能极大提高 nginx 的性能表现</li><li><code>keepalive_timeout</code> HTTP 有一个 KeepAlive 模式，它告诉 webserver 在处理完一个请求后保持这个 TCP 连接的打开状态。若接收到来自客户端的其它请求，服务端会利用这个未被关闭的连接，而不需要再建立一个连接。</li><li><code>gzip</code> 开启 Gzip 压缩功能， 可以使网站的 css、js 、xml、html 文件在传输时进行压缩，提高访问速度, 进而优化 Nginx 性能</li></ul><h3 id="_4-server-块" tabindex="-1"><a class="header-anchor" href="#_4-server-块" aria-hidden="true">#</a> 4.server 块</h3><p>每一个 http 块都可以包含多个 server 块，而每个 server 块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务</p><p>listen 指令的配置非常灵活，可以单独制定 ip，单独指定端口或者同时指定 ip 和端口</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>listen <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">8000</span><span class="token punctuation">;</span>  <span class="token comment">#只监听来自127.0.0.1这个IP，请求8000端口的请求</span>
listen <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">;</span> <span class="token comment">#只监听来自127.0.0.1这个IP，请求80端口的请求（不指定端口，默认80）</span>
listen <span class="token number">9999</span><span class="token punctuation">;</span> <span class="token comment">#监听来自所有IP，请求9999端口的请求</span>
listen <span class="token operator">*</span><span class="token punctuation">:</span><span class="token number">9999</span><span class="token punctuation">;</span> <span class="token comment">#和上面效果一样</span>
listen localhost<span class="token punctuation">:</span><span class="token number">8000</span><span class="token punctuation">;</span> <span class="token comment">#和第一种效果一致</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>server_name nginx 允许一个虚拟主机有一个或多个名字，也可以使用通配符<code>*</code>来设置虚拟主机的名字 支持 ip 域名 通配符 正则等</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>server_name  localhost;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-location-块" tabindex="-1"><a class="header-anchor" href="#_5-location-块" aria-hidden="true">#</a> 5.location 块</h3><p>每个 server 块中可以包含多个 location 块。在整个 Nginx 配置文档中起着重要的作用，而且 Nginx 服务器在许多功能上的灵活性往往在 location 指令的配置中体现出来</p><p>location 指令可以分为以下 3 类：</p><ul><li>前缀字符串匹配</li><li>正则表达式匹配</li><li>用于内部跳转的命名 location</li></ul><p><strong>前缀字符串匹配</strong></p><ul><li>精确匹配 =</li><li>前缀匹配 ^~（立刻停止后续的正则搜索）</li><li>按文件中顺序的正则匹配 <sub>或</sub>*</li><li>匹配不带任何修饰的前缀匹配。</li></ul><p><strong>location root</strong></p><p>root 指定目录的上级目录，并且该上级目录要含有 locatoin 指定名称的同名目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>location /img/ <span class="token punctuation">{</span>
	root /var/www/image<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若按照这种配置的话，则访问 <code>/img/</code> 目录下的文件时，nginx 会去 <code>/var/www/image/img/</code> 目录下找文件</p><h1 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理" aria-hidden="true">#</a> 反向代理</h1>`,58),m={href:"http://nginx.org/",title:"nginx news",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>反向代理中的常用指令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>proxy_pass
proxy_set_header
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>proxy_pass</p><p>该指令用来设置被代理服务器地址，可以是主机名称、IP 地址加端口号形式。</p><h3 id="案例-1-代理到哔哩哔哩" tabindex="-1"><a class="header-anchor" href="#案例-1-代理到哔哩哔哩" aria-hidden="true">#</a> 案例 1 代理到哔哩哔哩</h3><div class="language-config line-numbers-mode" data-ext="config"><pre class="language-config"><code>location / {
   root   html;
   index  index.html index.htm;
   proxy_pass http://bilibili.com;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问/就会被转到哔哩哔哩</p><h2 id="proxy-set-header" tabindex="-1"><a class="header-anchor" href="#proxy-set-header" aria-hidden="true">#</a> <code>proxy_set_header</code></h2><p>该指令可以更改 Nginx 服务器接收到的客户端请求的请求头信息，然后将新的请求头发送给代理的服务器</p><p><code>proxy_set_header X-Real-IP $remote_addr;</code><code>proxy_set_header X-Real-Port $remote_port;</code><code>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code></p><p>三个 <code>header</code> 分别表示： <code>X-Real-IP</code> 客户端或上一级代理 ip <code>X-Real-Port</code> 客户端或上一级端口 <code>X-Forwarded-For</code> 包含了客户端和各级代理 ip 的完整 ip 链路</p><p>其中 X-Real-IP 是必需的，后两项选填。当只存在一级 nginx 代理的时候 X-Real-IP 和 X-Forwarded-For 是一致的，而当存在多级代理的时候，X-Forwarded-For 就变成了如下形式</p><p><code>$remote_addr</code> 是前一节点的 IP，并不一定是用户的真实 IP。</p><h1 id="日志分析" tabindex="-1"><a class="header-anchor" href="#日志分析" aria-hidden="true">#</a> 日志分析</h1><h2 id="goaccess" tabindex="-1"><a class="header-anchor" href="#goaccess" aria-hidden="true">#</a> GoAccess</h2><p>GoAccess 是一款开源、实时，运行在命令行终端下的 web 日志分析工具。该工具提供快速、多样的 HTTP 状态统计，可以令管理员不再纠结于统计各类数据，和繁杂的指令以及一大堆管道/正则表达式说 byebye</p><p>1.安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> http://tar.goaccess.io/goaccess-1.2.tar.gz
<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> goaccess-1.2.tar.gz
<span class="token builtin class-name">cd</span> goaccess-1.2/
./configure
<span class="token function">make</span>
<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作手册</p>`,19),h={href:"https://www.goaccess.cc/?mod=man",title:"GoAccess - 中文站 - 可视化 Web 日志分析工具",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>开启实时 HTML 报告分析（webSocket）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>goaccess access.log <span class="token parameter variable">-a</span> <span class="token parameter variable">-o</span> <span class="token punctuation">..</span>/html/report.html --real-time-html --log-format<span class="token operator">=</span>COMBINED
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="负载均衡-upstream" tabindex="-1"><a class="header-anchor" href="#负载均衡-upstream" aria-hidden="true">#</a> 负载均衡 upstream</h1><p>基本语法 upstream 的基本语法如下，一个 upstream 需要设置一个名称，这个名称可以在 server 里面当作 proxy 主机使用。</p><p>在 <code>http</code> 模块下，与 <code>server</code> 同级</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    upstream  node <span class="token punctuation">{</span>
        server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9001</span><span class="token punctuation">;</span>
        server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9002</span><span class="token punctuation">;</span>
        server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9003</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    location <span class="token operator">/</span> <span class="token punctuation">{</span>
        proxy_pass http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-默认状态是按照轮询的方式去做负载的" tabindex="-1"><a class="header-anchor" href="#_1-默认状态是按照轮询的方式去做负载的" aria-hidden="true">#</a> 1.默认状态是按照轮询的方式去做负载的</h3><h3 id="_2-权重-weight" tabindex="-1"><a class="header-anchor" href="#_2-权重-weight" aria-hidden="true">#</a> 2.权重 weight</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    upstream  node <span class="token punctuation">{</span>
        server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9001</span> weight<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
        server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9002</span> weight<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
        server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9003</span> weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>权重越大服务器承载的并发就越高 <img src="`+d+`" alt="" loading="lazy"></p><h3 id="_3-fail-timeout-backup" tabindex="-1"><a class="header-anchor" href="#_3-fail-timeout-backup" aria-hidden="true">#</a> 3.fail_timeout backup</h3><p><code>fail_timeout</code> 是故障等待超时时间</p><p><code>backup</code> 是备用服务器参数，可以为一个 <code>upstream</code> 设置一个 <code>backup</code> 的 server，在生产 server 全部都出问题之后，可以自动切换到备用 server 上，为回复服务争取时间</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    upstream  node <span class="token punctuation">{</span>

        server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9001</span> fail_timeout<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span>

        server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9002</span> fail_timeout<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>

        server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9003</span> backup<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function g(k,x){const a=p("ExternalLinkIcon");return t(),o("div",null,[u,n("p",null,[n("a",m,[s("nginx news"),i(a)])]),v,n("p",null,[n("a",h,[s("GoAccess - 中文站 - 可视化 Web 日志分析工具"),i(a)])]),b])}const f=r(l,[["render",g],["__file","03-Nginx常用命令和配置文件.html.vue"]]);export{f as default};
