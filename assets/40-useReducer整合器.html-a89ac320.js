import{_ as n,X as s,Y as a,a2 as e}from"./framework-c2b0d87a.js";const t={},p=e(`<h1 id="_40-usereducer-整合器" tabindex="-1"><a class="header-anchor" href="#_40-usereducer-整合器" aria-hidden="true">#</a> 40-useReducer 整合器</h1><p>接收一个 reducer 函数作为第一个参数，第二个参数是初始化的 state。useReducer 最终返回一个存储有当前状态值的数组和一个 dispatch 函数，该 dispatch 函数执行触发 action，带来状态的变化。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token operator">:</span><span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token literal-property property">action</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">initialArg</span><span class="token operator">:</span>state<span class="token punctuation">,</span> init<span class="token operator">?</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>参数 <ul><li>reducer : 整合函数 <ul><li>对于我们当前 state 的所有操作都应该在该函数中定义</li><li>该函数的返回值，会成为 state 的新值</li><li>reducer 在执行时，会收到两个参数： <ul><li>state 当前最新的 state</li><li>action 它需要一个对象 - 在对象中会存储 dispatch 所发送的指令</li></ul></li></ul></li><li>initialArg : state 的初始值，作用和 useState()中的值是一样</li></ul></li><li>返回值： <ul><li>数组： <ul><li>第一个参数，state 用来获取 state 的值</li><li>第二个参数，state 修改的派发器 - 通过派发器可以发送操作 state 的命令 - 具体的修改行为将会由另外一个函数(reducer)执行</li></ul></li></ul></li></ul><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token comment">// 为了避免reducer会重复创建，通常reducer会定义到组件的外部</span>
<span class="token keyword">const</span> <span class="token function-variable function">countReducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可以根据action中不同type来执行不同的操作</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token string">&quot;ADD&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token string">&quot;SUB&quot;</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> countDispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>countReducer<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="usereducer-可以让我们将-what-和-how-分开" tabindex="-1"><a class="header-anchor" href="#usereducer-可以让我们将-what-和-how-分开" aria-hidden="true">#</a> useReducer 可以让我们将 <code>what</code> 和 <code>how</code> 分开</h2><p>useReducer 可以让我们将<code>what</code>和<code>how</code>分开。比如点击了登录按钮，我们要做的就是发起登陆操作<code>dispatch({ type: &#39;login&#39; })</code>，点击退出按钮就发起退出操作<code>dispatch({ type: &#39;logout&#39; })</code>，所有和<code>how</code>相关的代码都在 reducer 中维护，组件中只需要思考<code>What</code>，让我们的代码可以像用户的行为一样，更加清晰。</p>`,7),o=[p];function c(l,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","40-useReducer整合器.html.vue"]]);export{r as default};
