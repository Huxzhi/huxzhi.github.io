import{_ as p,X as o,Y as c,Z as n,$ as s,a1 as t,a3 as e,a2 as l,G as i}from"./framework-c2b0d87a.js";const u={},d=n("p",null,"vue 组件传参",-1),r=n("li",null,"子传父传参： emit 触发组建的自定义事件",-1),k=l(`<h2 id="父传子传参" tabindex="-1"><a class="header-anchor" href="#父传子传参" aria-hidden="true">#</a> 父传子传参</h2><p>父组件通过标签属性进行数据传递 <code>&lt;PageHeader msg=&quot;我是传递的数据&quot; /&gt;</code></p><p>子组件通过 <code>defineProps</code> 获取父组件传过来的数据 子组件不允许更改父组件的数据，如果要改变数据，用 emit 触发父组件，由父组件修改值</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">// defineProps的参数为 标签属性</span>
<span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>我是子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> {{props.msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="子传父传参" tabindex="-1"><a class="header-anchor" href="#子传父传参" aria-hidden="true">#</a> 子传父传参</h2><p>emits 触发组建的自定义事件</p><h2 id="兄弟组件传参" tabindex="-1"><a class="header-anchor" href="#兄弟组件传参" aria-hidden="true">#</a> 兄弟组件传参</h2><p><code>mitt</code> 是个订阅发布机制。<code>on</code> 是订阅，<code>emit</code> 派发</p><p>事件总线：相当于全局的事件管理 使用：</p><p>mitt.emit(&quot;方法名&quot;，参数）：触发某个方法 mitt.on(&quot;对应方法名&quot;,callback)：监听某个方法 mitt.off(&quot;移除对应方法&quot;)：移除某个方法 一般放在 onUnmounted 声明周期里面</p><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h3><p>utils/bus.js 引用同一个示例对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> mitt <span class="token keyword">from</span> <span class="token string">&quot;mitt&quot;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">mitt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>emit 派发事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleChange2</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">// 事件名 和 要传递的值</span>
    bus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;broutherData&quot;</span><span class="token punctuation">,</span> sonMsg<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>on 订阅 如果存在 <code>broutherData</code> 触发回调函数。同一个地方订阅两遍会触发两次</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//bus = new mitt()</span>
bus<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;broutherData&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我是footer组件的监听回调&quot;</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>off 要在组件销毁的时候取消订阅</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">onUnmounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  bus<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&quot;broutherData&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19);function v(m,g){const a=i("RouterLink");return o(),c("div",null,[d,n("ol",null,[n("li",null,[s("父传子传参: props "),t(a,{to:"/code/vue/vue3/14-%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82.html"},{default:e(()=>[s("14-父子组件传参")]),_:1})]),r,n("li",null,[s("兄弟组件传参:事件总线 BUS vue3 使用 mitt 插件 "),t(a,{to:"/code/vue/vue3/24-%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82%E3%80%81Bus%E5%92%8CMitt.html"},{default:e(()=>[s("24-兄弟组件传参、Bus 和 Mitt")]),_:1})])]),k])}const h=p(u,[["render",v],["__file","18-vue组件传参.html.vue"]]);export{h as default};
