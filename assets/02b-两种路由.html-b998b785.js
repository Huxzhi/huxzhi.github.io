import{_ as s,X as o,Y as c,Z as a,$ as e,a1 as r,a2 as n,G as l}from"./framework-c2b0d87a.js";const i={},d=n('<p>主要是通过服务器直接访问带 路由信息链接 的话 <code>react-router</code> 没有接管路由，需要先访问主页 <code>index.js</code></p><h1 id="_02b-两种路由" tabindex="-1"><a class="header-anchor" href="#_02b-两种路由" aria-hidden="true">#</a> 02b-两种路由</h1><p><code>HashRouter</code> 会通过 url 地址中的 hash 值来对地址进行匹配 <code>BrowserRouter</code> 直接通过 url 地址进行组件的跳转，使用过程中和普通的 url 地址没有区别</p><p>为什么会有这两种 Router 呢？首先，你要明确我们的项目在开发完成后需要进行构建，构建后的代码需要放到服务器中，以供用户访问。服务器无非就是 Nginx 或 Apache 这些东西，服务器的主要功能是将 url 地址和网页进行映射。传统 web 项目中，每一个页面都对应一个文件，当用户访问/index.html 时，服务器会自动返回根目录下的 index.html。当用户访问/about.html 时，服务器会返回根目录下 about.html。换句话说 url 和文件的映射都是由服务器来完成的。</p><p>但是 React 项目不同，React 项目所有的页面都是通过 React 进行渲染构建的。项目中只存在一个 index.html 没有那么多的页面（所以才叫单页应用）。当浏览器地址发生变化时，比如用户访问/about 时，此时是不需要服务器介入的，react router 会自动挂载对应的组件。</p>',5),p={href:"http://localhost:3000/about%EF%BC%8C%E6%AD%A4%E6%97%B6%E8%AF%B7%E6%B1%82%E4%BC%9A%E5%8F%91%E9%80%81%E7%BB%99%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%9A%E5%AF%BB%E6%89%BE%E5%90%8D%E4%B8%BA",target:"_blank",rel:"noopener noreferrer"},u=n(`<p>这样一来，我们的项目只能够通过首页访问，然后点击链接跳转，刷新和直接通过路由访问都是不行的，一旦进行这些操作就会出现 404。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案：</h2><ol><li>使用 <code>HashRouter</code>，服务器不会去判断 hash 值， 所以使用 <code>HashRouter</code> 后请求将会由 React Router 处理</li><li>修改服务器的配置，将所有请求都转发到 <code>index.html</code></li></ol><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>location <span class="token operator">/</span> <span class="token punctuation">{</span>
    root   html<span class="token punctuation">;</span>
    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">index</span>  <span class="token expression">index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span></span></span>
    try_files $uri <span class="token operator">/</span>index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function h(_,m){const t=l("ExternalLinkIcon");return o(),c("div",null,[d,a("p",null,[e("当我们将 React 项目部署到服务器时，如果直接访问根目录，请求会直接发送给 index.html。这个页面我们是有的，所以此时不会有任何问题。用户访问页面后，点击页面后的连接切换到不同的组件也没有问题，因为页面并没有真的发生跳转，而是通过 react router 在内存中完成了模拟跳转。但是，当我们刷新某个路由或直接通过浏览器地址栏访问某个路由时，比如："),a("a",p,[e("http://localhost:3000/about，此时请求会发送给服务器，服务器会寻找名为"),r(t)]),e(" about 的资源（此时并没有经过 React）。显然找不到这个资源，于是返回 404。")]),u])}const b=s(i,[["render",h],["__file","02b-两种路由.html.vue"]]);export{b as default};
