const n=JSON.parse(`{"key":"v-3542a757","path":"/code/react/React18/45-hook%E8%87%AA%E5%AE%9A%E4%B9%89%E9%92%A9%E5%AD%90.html","title":"45-hook自定义钩子","lang":"zh-CN","frontmatter":{"category":["react18"],"date":"2023-03-18 15:41","title":"45-hook自定义钩子","updated":"2023-05-08 09:12","description":"45-hook 自定义钩子 React 中的钩子函数只能在函数组件或自定钩子中调用 当我们需要将 React 中钩子函数提取到一个公共区域时，就可以使用自定义钩子 自定义钩子其实就是一个普通函数，只是它的名字需要使用 use 开头 就是将创建好的变量和函数 返回给调用者，就不用重复编写了 useFetch import {useCallback, useState} from \\"react\\"; // reqObj 用来存储请求的参数 /* * { * url 请求的地址 * method 请求方法 * * } * * cb 回调函数，请求发送成功后执行 * */ export default function useFetch(reqObj, cb) { const [data, setData] = useState([]); // 添加一个state来记录数据是否正在加载,false表示没有加载数据，true表示加载 const [loading, setLoading] = useState(false); // 创建一个state来记录错误信息 const [error, setError] = useState(null); const fetchData = useCallback(async (body) =&gt; { try { setLoading(true); setError(null); const res = await fetch('http://localhost:1337/api/'+reqObj.url, { method:reqObj.method || 'get', headers:{ \\"Content-type\\":\\"application/json\\" }, body:body?JSON.stringify({data:body}):null, }); //判断请求是否加载成功 if (res.ok) { const data = await res.json(); setData(data.data); cb &amp;&amp; cb(); } else { throw new Error('数据加载失败！'); } } catch (e) { console.log(e); setError(e); } finally { setLoading(false); } }, []); // 设置返回值 return { loading, error, data, fetchData }; }","head":[["meta",{"property":"og:url","content":"https://huxzhi.github.io/code/react/React18/45-hook%E8%87%AA%E5%AE%9A%E4%B9%89%E9%92%A9%E5%AD%90.html"}],["meta",{"property":"og:site_name","content":"Huxzhiの小站"}],["meta",{"property":"og:title","content":"45-hook自定义钩子"}],["meta",{"property":"og:description","content":"45-hook 自定义钩子 React 中的钩子函数只能在函数组件或自定钩子中调用 当我们需要将 React 中钩子函数提取到一个公共区域时，就可以使用自定义钩子 自定义钩子其实就是一个普通函数，只是它的名字需要使用 use 开头 就是将创建好的变量和函数 返回给调用者，就不用重复编写了 useFetch import {useCallback, useState} from \\"react\\"; // reqObj 用来存储请求的参数 /* * { * url 请求的地址 * method 请求方法 * * } * * cb 回调函数，请求发送成功后执行 * */ export default function useFetch(reqObj, cb) { const [data, setData] = useState([]); // 添加一个state来记录数据是否正在加载,false表示没有加载数据，true表示加载 const [loading, setLoading] = useState(false); // 创建一个state来记录错误信息 const [error, setError] = useState(null); const fetchData = useCallback(async (body) =&gt; { try { setLoading(true); setError(null); const res = await fetch('http://localhost:1337/api/'+reqObj.url, { method:reqObj.method || 'get', headers:{ \\"Content-type\\":\\"application/json\\" }, body:body?JSON.stringify({data:body}):null, }); //判断请求是否加载成功 if (res.ok) { const data = await res.json(); setData(data.data); cb &amp;&amp; cb(); } else { throw new Error('数据加载失败！'); } } catch (e) { console.log(e); setError(e); } finally { setLoading(false); } }, []); // 设置返回值 return { loading, error, data, fetchData }; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-08T02:14:57.000Z"}],["meta",{"property":"article:published_time","content":"2023-03-18T15:41:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-08T02:14:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"45-hook自定义钩子\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T15:41:00.000Z\\",\\"dateModified\\":\\"2023-05-08T02:14:57.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"useFetch","slug":"usefetch","link":"#usefetch","children":[]},{"level":2,"title":"代码编写巧思","slug":"代码编写巧思","link":"#代码编写巧思","children":[]}],"git":{"createdTime":1679501467000,"updatedTime":1683512097000,"contributors":[{"name":"Huxzhi","email":"huxzhi@gmail.com","commits":3}]},"readingTime":{"minutes":1.3,"words":389},"filePathRelative":"code/react/React18/45-hook自定义钩子.md","localizedDate":"2023年3月18日","excerpt":"<h1> 45-hook 自定义钩子</h1>\\n<p>React 中的钩子函数只能在函数组件或自定钩子中调用</p>\\n<p>当我们需要将 React 中钩子函数提取到一个公共区域时，就可以使用自定义钩子</p>\\n<p>自定义钩子其实就是一个普通函数，只是它的名字需要使用 use 开头</p>\\n<p>就是<mark>将创建好的变量和函数 返回给调用者，就不用重复编写了</mark></p>\\n<h2> useFetch</h2>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span>useCallback<span class=\\"token punctuation\\">,</span> useState<span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"react\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// reqObj 用来存储请求的参数</span>\\n<span class=\\"token comment\\">/*\\n*   {\\n*       url 请求的地址\\n*       method 请求方法\\n*\\n*   }\\n*\\n* cb 回调函数，请求发送成功后执行\\n* */</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">useFetch</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">reqObj<span class=\\"token punctuation\\">,</span> cb</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>data<span class=\\"token punctuation\\">,</span> setData<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 添加一个state来记录数据是否正在加载,false表示没有加载数据，true表示加载</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>loading<span class=\\"token punctuation\\">,</span> setLoading<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 创建一个state来记录错误信息</span>\\n    <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>error<span class=\\"token punctuation\\">,</span> setError<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">const</span> fetchData <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useCallback</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">async</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">body</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">setLoading</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">setError</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">const</span> res <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> <span class=\\"token function\\">fetch</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'http://localhost:1337/api/'</span><span class=\\"token operator\\">+</span>reqObj<span class=\\"token punctuation\\">.</span>url<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token literal-property property\\">method</span><span class=\\"token operator\\">:</span>reqObj<span class=\\"token punctuation\\">.</span>method <span class=\\"token operator\\">||</span> <span class=\\"token string\\">'get'</span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token literal-property property\\">headers</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token string-property property\\">\\"Content-type\\"</span><span class=\\"token operator\\">:</span><span class=\\"token string\\">\\"application/json\\"</span>\\n                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span>\\n                <span class=\\"token literal-property property\\">body</span><span class=\\"token operator\\">:</span>body<span class=\\"token operator\\">?</span><span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">stringify</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">data</span><span class=\\"token operator\\">:</span>body<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span><span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span>\\n\\n            <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">//判断请求是否加载成功</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>res<span class=\\"token punctuation\\">.</span>ok<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">const</span> data <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">await</span> res<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">json</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token function\\">setData</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                cb <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token function\\">cb</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">throw</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Error</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'数据加载失败！'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token function\\">setError</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token function\\">setLoading</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n    <span class=\\"token comment\\">// 设置返回值</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">{</span>\\n        loading<span class=\\"token punctuation\\">,</span>\\n        error<span class=\\"token punctuation\\">,</span>\\n        data<span class=\\"token punctuation\\">,</span>\\n        fetchData\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n\\n\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}`);export{n as data};
